class CurateSqls():
    @staticmethod
    def get_curation_sql(table_name):
        curate_sql_dict = {
                            "gfs_pdh_txn_interface": "Insert into pdh_rd_data_navigator.gfs_pdh_txn_interface  SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,  SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id,h,tran_uid,SAFE.PARSE_TIMESTAMP(\'%Y%m%d%H%M%S\',substr(tstamp_trans,1,length(tstamp_trans)-2)) as tstamp_trans  ,SAFE.PARSE_TIMESTAMP(\'%Y%m%d%H%M%S\',tstamp_local) as tstamp_local,masked_pan,SAFE.PARSE_DATE(\'%Y%m%d\',date_recon_acq) as date_recon_acq,  net_term_id,rpt_lvl_id_b,mti,tran_type_id,SAFE_CAST(amt_recon_net as NUMERIC) as amt_recon_net,  act_code,response_code,account_type,SAFE_CAST(transaction_total as NUMERIC) as transaction_total,  SAFE_CAST(purchase_total as NUMERIC) as purchase_total,SAFE_CAST(cashout_total as NUMERIC) as cashout_total,  SAFE_CAST(retrieval_ref_no as NUMERIC) as retrieval_ref_no,SAFE_CAST(stan as NUMERIC) as stan,  SAFE_CAST(original_stan as NUMERIC) as original_stan,proc_id_acq_b,inst_id_recn_acq_b,card_acpt_name_loc,proc_id_iss_b,  issuer_institution_id,card_owner,pos_crd_dat_in_mod,pos_crdhldr_presnt,order_number,approval_code,  adtnl_response_data,card_acpt_id,merchant_store_id,dom_int_ind,card_type,card_subtype,bin_product_code,scheme,SAFE_CAST(surcharge_amount as NUMERIC) as surcharge_amount,SAFE_CAST(tip_amount as NUMERIC) as tip_amount,SAFE_CAST(inst_id_recon_iss as NUMERIC) as inst_id_recon_iss,inst_id_recon_iss_name,SAFE_CAST(card_acceptor_business_code as NUMERIC) as card_acceptor_business_code,additional_data_acquirer,SAFE_CAST(currency_code as NUMERIC) as currency_code, pymt_acct_ref,adl_data_national,adl_data_priv_acq  from {{ staging_table }};",
                            "gfs_aux_visa": "Insert into pdh_rd_data_navigator.gfs_aux_visa SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id,h,mti,tran_disposition,issuer, pan,SAFE_CAST(tran_amt as NUMERIC) as tran_amt,SAFE.PARSE_TIMESTAMP('%Y%m%d%H%M%S',tstamp_trans) as tstamp_trans, SAFE_CAST(stan as NUMERIC) as stan,SAFE.PARSE_TIMESTAMP('%Y%m%d%H%M%S',tstamp_local) as tstamp_local,SAFE.PARSE_DATE('%Y%m%d',date_recon) as date_recon, SAFE_CAST(rrn as NUMERIC) as rrn,card_acpt_term_id,SAFE_CAST(interchange_fee as NUMERIC) as interchange_fee,domestic_or_international,acct_funding_source,processing_code,moto_indicator  from {{ staging_table }};",
                            "gfs_aux_eftpos": "Insert into pdh_rd_data_navigator.gfs_aux_eftpos SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id,mti,tran_disposition,issuer, pan,SAFE_CAST(tran_amt as NUMERIC) as tran_amt,SAFE.PARSE_TIMESTAMP(\'%Y%m%d%H%M%S\',substr(tstamp_trans,1,length(tstamp_trans)-2)) as tstamp_trans, SAFE_CAST(stan as NUMERIC) as stan,SAFE.PARSE_TIMESTAMP('%Y%m%d%H%M%S',tstamp_local) as tstamp_local,SAFE.PARSE_DATE('%Y%m%d',date_recon) as date_recon, SAFE_CAST(rrn as NUMERIC) as rrn,card_acpt_term_id,SAFE_CAST(issuer_interchange_amt as NUMERIC) as issuer_interchange_amt,SAFE_CAST(acquirer_interchange_amt as NUMERIC) as acquirer_interchange_amt,SAFE_CAST(scheme_fee as NUMERIC) as scheme_fee from {{ staging_table }};",
                            "gfs_merfee": "Insert into pdh_rd_data_navigator.gfs_merfee SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id,record_type,merchant,wow_store_no,merchant_store_no,card_present_indicator,scheme,transaction_type,approval_status,safe_cast(total_amount as numeric),safe_cast(total_count as numeric) from {{ staging_table }};",
                            "digitalpay_gc_txns": "Insert into pdh_rd_data_navigator.digitalpay_gc_txns SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id,SAFE_CAST(containerRef as NUMERIC) as containerRef, SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',dateWeekStart) as dateWeekStart,SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',dateWeekEnd) as dateWeekEnd,SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',txnTime) as txnTime,txnRef,SAFE_CAST(applicationId as NUMERIC) as applicationId,MerchantName,SAFE_CAST(userId as NUMERIC) as userId,username,userStatus,SAFE_CAST(itemId as NUMERIC) as itemId,SAFE_CAST(clientId as NUMERIC) as clientId,SAFE_CAST(containerId as NUMERIC) as containerId,containerStatus,responseCodeContainer,responseTextContainer,transactionType,bin,cardSuffix,SAFE_CAST(amount as NUMERIC) as amount,responseCode,responseText,SAFE_CAST(duration as NUMERIC) as duration,orderNumber,customerRef,authCode,stan,originalTxnRef,originalTxnLogRef,parentTxnRef,schemeName,itemType,itemStatus,SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',itemLastUsed) as itemLastUsed,SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',itemLastUpdated) as itemLastUpdated,SAFE_CAST(itemPriority as NUMERIC) as itemPriority,token,fraudRequestId,fraudDecision,fraudReasonCd,ipAddress,gateway,comment,applicationRef,SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',itemCreatedOn) as itemCreatedOn,item_token,StoreId,RRN,DeviceId,SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\',storeTimeStamp) as storeTimeStamp,terminal_id,rrn_controlblock from {{ staging_table }};",
                            "sap_hybris_qc_item_level_report": "Insert into pdh_rd_quickcilver.sap_hybris_qc_item_level_report SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id, card_no, order_no, invoice_no, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',order_date) as order_date, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',order_completion_date) as order_completion_date, payment_method, customer_no, gc_id, gc_name, SAFE_CAST(gc_face_value as NUMERIC) as gc_face_value,SAFE_CAST(gc_sale_value as NUMERIC) as gc_sale_value, promotion_id, discount_percent, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',promotion_start_date) as promotion_start_date, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',promotion_end_date) as promotion_end_date, retailer, sales_merchant, account_id,customer_id,email,billing_state,usertype,b2b_unit,SAFE_CAST(delivery_fee as NUMERIC) as delivery_fee,SAFE_CAST(donation as NUMERIC) as donation,sales_application from {{ staging_table }};",
                            "qc_partner_summary": "Insert into pdh_rd_quickcilver.qc_partner_summary SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id, SAFE.PARSE_TIMESTAMP(\'%d/%m/%Y %H:%M:%S\',DateFromAEST) as DateFromAEST,SAFE.PARSE_TIMESTAMP(\'%d/%m/%Y %H:%M:%S\',DateToAEST) as DateToAEST,Merchant,SAFE_CAST(MID as NUMERIC) as MID,TransactionType,SAFE_CAST(GrossSalesValue as NUMERIC) as GrossSalesValue,SAFE_CAST(Discount as NUMERIC) as Discount,SAFE_CAST(NetSalesValue as NUMERIC) as NetSalesValue,SAFE_CAST(SalesCount as NUMERIC) as SalesCount,BatchNumber from {{ staging_table }};",
                            "qc_partner_detail": "Insert into pdh_rd_quickcilver.qc_partner_detail SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id, SAFE.PARSE_TIMESTAMP(\'%d/%m/%Y %H:%M:%S\',DateFrom) as DateFrom, SAFE.PARSE_TIMESTAMP(\'%d/%m/%Y %H:%M:%S\',DateTo) as DateTo, Merchant, OutletCode, ProgramGroup, CardNumber, DesignCode, InvoiceNumber, ReferenceNumber, SAFE_CAST(Amount as NUMERIC) as Amount, TransactionType, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', TransactionDate) as TransactionDate, Discount, SAFE_CAST(DiscountValue as NUMERIC) as DiscountValue, SAFE_CAST(NetValue as NUMERIC) as NetValue,BatchNumber from {{ staging_table }};",
                            "alipay_linkly": "Insert into pdh_rd_apm.alipay_linkly SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id, SAFE_CAST(ReqMT as NUMERIC) as ReqMT,ReqType,SAFE_CAST(ReqSTAN as NUMERIC) as ReqSTAN,ReqUID,SAFE_CAST(ReqPAN as NUMERIC) as ReqPAN,ReqTxRef,SAFE_CAST(ReqAmt as NUMERIC),SAFE_CAST(ReqTotalAmt as NUMERIC),ReqStore, SAFE.PARSE_DATE(\'%Y-%m-%d\',ReqDate) as ReqDate,SAFE.PARSE_TIME(\'%H:%M:%E*S\',ReqTime) as ReqTime,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%E*S\',ReqTT) as ReqTT,ResRef,ResRC,ResHRC,ResRT,ResHRT,TerminalID,Reversed,OrigData from {{ staging_table }};",
                            "alipay_stlm": "Insert into pdh_rd_apm.alipay_stlm SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id,Partner_transaction_id,SAFE_CAST(Transaction_id as NUMERIC) as Transaction_id,SAFE_CAST(Amount as NUMERIC) as Amount,SAFE_CAST(Rmb_amount as NUMERIC) as Rmb_amount,SAFE_CAST(Fee as NUMERIC) as Fee,SAFE_CAST(Settlement as NUMERIC) as Settlement,SAFE_CAST(Rmb_settlement as NUMERIC) as Rmb_settlement,Currency,SAFE_CAST(Rate as NUMERIC) as Rate,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%E*S\',Payment_time) as Payment_time,SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%E*S\',Settlement_time) as Settlement_time,Type,Status,Remarks,SAFE_CAST(Secondary_merchant_industry as NUMERIC) as Secondary_merchant_industry,Secondary_merchant_name,Secondary_merchant_id,Store_id ,Store_Name ,Terminal_id ,	Operator_name ,Order_scene ,Trans_currency,SAFE_CAST(Trans_amount as NUMERIC) as Trans_amount ,SAFE_CAST(Trans_forex_rate as NUMERIC) as Trans_forex_rate ,SAFE_CAST(m_discount_amount as NUMERIC) as m_discount_amount  from {{ staging_table }};",
                            "chargebacks": "Insert into pdh_rd_data_navigator.chargebacks SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id, SAFE_CAST(id as NUMERIC) as id, region, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',received_dt) as received_dt, bank_ref_no, store_id, store_name, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',txn_dttm_local) as txn_dttm_local, SAFE_CAST(amount as NUMERIC) as amount, bank, rrn, reason, SAFE_CAST(lane as NUMERIC) as lane, status_open, SAFE.PARSE_TIMESTAMP(\'%m/%d/%Y %H:%M:%S\', closed_utc) as closed_utc, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', rr_sent_dttm_utc) as rr_sent_dttm_utc, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', rr_resent_dttm_utc) as rr_resent_dttm_utc, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', response_dttm_utc) as response_dttm_utc, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', response_2_dttm_utc) as response_2_dttm_utc, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', charged_dt) as charged_dt, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', chgbk_challenge_dt) as chgbk_challenge_dt, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\', chgbk_rev_dt) as chgbk_rev_dt, signature, orderno, dn_completion_pos_crd_dat_in_mod, all_comments from {{ staging_table }};",
                            "gfs_pdh_txn_interface_super": "INSERT INTO pdh_rd_data_navigator.gfs_pdh_txn_interface_super SELECT SAFE.PARSE_DATE(\'%Y%m%d\',\'{{ file_date }}\') as file_date, \'{{ file_name }}\' as file_name, SAFE.PARSE_TIMESTAMP(\'%Y-%m-%d %H:%M:%S\',\'{{ pdh_load_time }}\') as pdh_load_time, \'{{ payload_id }}\' as payload_id, h, tran_uid, SAFE.PARSE_TIMESTAMP(\'%Y%m%d%H%M%S\', SAFE.SUBSTR(tstamp_trans, 0, 14)) AS tstamp_trans, SAFE.PARSE_TIMESTAMP(\'%Y%m%d%H%M%S\', tstamp_local) AS tstamp_local, masked_pan, SAFE.PARSE_DATE(\'%Y%m%d\', date_recon_acq) AS date_recon_acq, net_term_id, rpt_lvl_id_b, mti, tran_type_id, SAFE_CAST(amt_recon_net AS NUMERIC) AS amt_recon_net, act_code, response_code, account_type, SAFE_CAST(transaction_total AS NUMERIC) AS transaction_total, SAFE_CAST(purchase_total AS NUMERIC) AS purchase_total, SAFE_CAST(cashout_total AS NUMERIC) AS cashout_total, SAFE_CAST(retrieval_ref_no AS NUMERIC) AS retrieval_ref_no, SAFE_CAST(stan AS NUMERIC) AS stan, SAFE_CAST(original_stan AS NUMERIC) AS original_stan, proc_id_acq_b, inst_id_recn_acq_b, card_acpt_name_loc, proc_id_iss_b, issuer_institution_id, card_owner, pos_crd_dat_in_mod, pos_crdhldr_presnt, order_number, approval_code, adtnl_response_data, card_acpt_id, merchant_store_id, dom_int_ind, card_type, card_subtype, bin_product_code, scheme, SAFE_CAST(surcharge_amount AS NUMERIC) AS surcharge_amount, SAFE_CAST(tip_amount AS NUMERIC) AS tip_amount, SAFE_CAST(inst_id_recon_iss AS NUMERIC) AS inst_id_recon_iss, inst_id_recon_iss_name, SAFE_CAST(card_acceptor_business_code AS NUMERIC) AS card_acceptor_business_code, additional_data_acquirer, SAFE_CAST(currency_code AS NUMERIC) AS currency_code, pymt_acct_ref, adl_data_national, adl_data_priv_acq FROM {{ staging_table }};"
                        }
        sql = curate_sql_dict[table_name]
        return sql
