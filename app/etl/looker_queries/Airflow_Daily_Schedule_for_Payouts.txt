-------------------------------------------------------------------------------------

-- FINAL: NRT

-----------------------------------------------------------
create or replace table wpay_analytics.wpay_payouts_all_merchants 
as(

with settle_cutoff as
(
  SELECT
    division,
    TIME(
      CAST(SUBSTR(FORMAT('%04d', settlement_cutoff), 1, 2) AS INT64), 
      CAST(SUBSTR(FORMAT('%04d', settlement_cutoff), 3, 2) AS INT64), 
      0
    ) as settlement_cutoff
  FROM 
    pdh_ref_ds.ref_merchant_settlement_window
  group by 1,2
)


, settlement_ref as
(
select
  t1.*,
  t2.settlement_cutoff,
  CASE 
    WHEN TIME '00:00:00' < t2.settlement_cutoff
    THEN 24*60 - TIME_DIFF(t2.settlement_cutoff, TIME '00:00:00', MINUTE)
    ELSE TIME_DIFF(TIME '00:00:00', t2.settlement_cutoff, MINUTE)
  END AS time_diff_minutes
from
  --wpay_analytics.settlement_reference t1
  wpay_analytics.settlement_reference t1
inner join
  settle_cutoff t2
on upper(t1.division) = upper(t2.division)
)


,
runtime as
(
  select 
    concat(left(t.net_term_id,5)," | ", upper(site_name)) site_name,
    max(tstamp_trans) as max_time
  FROM wpay_analytics.vw_lv_wpay_billing_engine_tran_dtl t
  LEFT JOIN pdh_ref_ds.ref_store_details s 
  ON LEFT(t.net_term_id, 5) = s.store_id
  group by 1
)   

,

excluded_schemes as
(
select * from
(
select
 --merchant_organisation_id, 
 wpay_store_number as store_id,
 scheme
FROM pdh_ref_ds.ref_str_to_sap_customermapping, UNNEST(SPLIT(exclude__issuers)) AS scheme
group by 1,2
)
union all
select
  store_id,
  "PAYPAL"
from
  pdh_ref_ds.ref_store_details
union all
select
  store_id,
  "ALIPAY"
from
  pdh_ref_ds.ref_store_details
)

,

trans_included as
(
SELECT t.*,
       upper(s.division) as division,
       s.company,
       s.invoice_group,
       s.merchant_portal_mg,
      --  s.site_name as site_name,
       concat(left(t.net_term_id,5)," | ", upper(site_name)) site_name,
       CASE
    WHEN settle.settlement_application = 'PDH' OR UPPER(t.calc_scheme) = 'GIFT CARDS' THEN
      TIMESTAMP_ADD(tstamp_trans, INTERVAL time_diff_minutes MINUTE)
    ELSE
      timestamp (TIMESTAMP_ADD(date_recon_acq, INTERVAL 0 day))
  END AS new_time
FROM wpay_analytics.vw_lv_wpay_billing_engine_tran_dtl t
LEFT JOIN pdh_ref_ds.ref_store_details s 
ON LEFT(t.net_term_id, 5) = s.store_id
LEFT JOIN excluded_schemes e ON LEFT(t.net_term_id, 5) = trim(e.store_id) and t.calc_scheme = e.scheme
LEFT JOIN settlement_ref settle on upper(settle.division) = upper(s.division)
WHERE (e.scheme IS NULL)
-- AND upper(s.company) = 'EG FUEL'
--and left(cast(tstamp_trans as string),10) = '2023-11-07'
and calc_approval_flag = 'A'
and t.switch_tran_date between DATE_SUB(switch_tran_date, INTERVAL 14 day) and current_Date()
)

,

trans_excluded as
(
SELECT t.*,
       upper(s.division) as division,
       s.company,
       s.invoice_group,
       s.merchant_portal_mg,
       concat(left(t.net_term_id,5)," | ", upper(site_name)) site_name,
      CASE
    WHEN settle.settlement_application = 'PDH' OR UPPER(t.calc_scheme) = 'GIFT CARDS' THEN
      TIMESTAMP_ADD(tstamp_trans, INTERVAL time_diff_minutes MINUTE)
    ELSE
      timestamp (TIMESTAMP_ADD(date_recon_acq, INTERVAL 0 day))
  END AS new_time
FROM wpay_analytics.vw_lv_wpay_billing_engine_tran_dtl t
LEFT JOIN pdh_ref_ds.ref_store_details s 
ON LEFT(t.net_term_id, 5) = s.store_id
LEFT JOIN excluded_schemes e ON LEFT(t.net_term_id, 5) = trim(e.store_id) and t.calc_scheme = e.scheme
LEFT JOIN settlement_ref settle on upper(settle.division) = upper(s.division)
WHERE (e.scheme IS NOT NULL)
-- AND upper(s.company) = 'EG FUEL'
--and left(cast(tstamp_trans as string),10) = '2023-11-07'
and calc_approval_flag = 'A'
and t.switch_tran_date between DATE_SUB(switch_tran_date, INTERVAL 14 day) and current_Date()
)
-------------------------------------------------------------------------------------------------
,
output_included as 
(
SELECT 
  'Wpay' as method,
  --case when left(cast(T.new_time as string),7) = (select max(left(cast(T.new_time as string),7)) from trans_included T) then "Month to date" else left(cast(T.new_time as string),7) end as month,
  date(left(cast(T.new_time as string),10)) as period,
  T.division,
  T.company,
  T.invoice_group,
  T.site_name,
  T.merchant_portal_mg,
  --T.amount,
  t.calc_scheme as scheme,
  t.calc_card_type as card_type,
  CASE
    WHEN S.payout_days = 'Weekdays' THEN
      CASE
        WHEN EXTRACT(DAYOFWEEK FROM T.new_time) = 1 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL  
            CASE S.weekend_payout
              WHEN 'Monday' THEN 1
              WHEN 'Tuesday' THEN 2
              WHEN 'Wednesday' THEN 3
              WHEN 'Thursday' THEN 4
              WHEN 'Friday' THEN 5
            END DAY))
        WHEN EXTRACT(DAYOFWEEK FROM T.new_time) = 7 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL  
            CASE S.weekend_payout
              WHEN 'Monday' THEN 2
              WHEN 'Tuesday' THEN 3
              WHEN 'Wednesday' THEN 4
              WHEN 'Thursday' THEN 5
              WHEN 'Friday' THEN 6
            END DAY))
        WHEN EXTRACT(DAYOFWEEK FROM TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY)) = 1 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule + 1 DAY))
        WHEN EXTRACT(DAYOFWEEK FROM TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY)) = 7 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule + 2 DAY))
        ELSE
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY))
      END
    ELSE
      DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY))
  END AS settle_date,
  case when s.payment_time is null then "03:00" else s.payment_time end as payout_time_only,

  (sum(case when T.calc_tran_type_description in 
  ('PURCHASE','PURCHASE WITH CASHOUT','REDEMPTION','CASHOUT','REFUND REVERSAL') then (transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('PURCHASE REVERSAL','PURCHASE WITH CASHOUT REVERSAL','REDEMPTION REVERSAL','REFUND','ACTIVATION','CASHOUT REVERSAL') then (transaction_total/100) else 0 end)
  ) as trans_amount,

  (sum(case when T.calc_tran_type_description in 
  ('PURCHASE','PURCHASE WITH CASHOUT','REDEMPTION') then (T.transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('PURCHASE REVERSAL','PURCHASE WITH CASHOUT REVERSAL','REDEMPTION REVERSAL') then (T.transaction_total/100) else 0 end)
  ) as gross_sales,

  (sum(case when T.calc_tran_type_description in 
  ('REFUND REVERSAL') then (T.transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('REFUND') then (T.transaction_total/100) else 0 end)
  ) as refunds,

  (sum(case when T.calc_tran_type_description in 
  ('CASHOUT') then (T.transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('ACTIVATION','CASHOUT REVERSAL') then (T.transaction_total/100) else 0 end)
  ) as adjustments

FROM 
  trans_included T
JOIN 
  wpay_analytics.settlement_reference S 
ON 
  upper(T.division) = upper(S.division)
group by 1,2,3,4,5,6,7,8,9,10,11
)


,
output_excluded as 
(
SELECT 
  'Third Party' as method,
  --case when left(cast(T.new_time as string),7) = (select max(left(cast(T.new_time as string),7)) from trans_excluded T) then "Month to date" else left(cast(T.new_time as string),7) end as month,
  date(left(cast(T.new_time as string),10)) as period,
  T.division,
  T.company,
  T.invoice_group,
  T.site_name,
  T.merchant_portal_mg,
  --T.amount,
  t.calc_scheme as scheme,
  t.calc_card_type as card_type,
  CASE
    WHEN S.payout_days = 'Weekdays' THEN
      CASE
        WHEN EXTRACT(DAYOFWEEK FROM T.new_time) = 1 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL  
            CASE S.weekend_payout
              WHEN 'Monday' THEN 1
              WHEN 'Tuesday' THEN 2
              WHEN 'Wednesday' THEN 3
              WHEN 'Thursday' THEN 4
              WHEN 'Friday' THEN 5
            END DAY))
        WHEN EXTRACT(DAYOFWEEK FROM T.new_time) = 7 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL  
            CASE S.weekend_payout
              WHEN 'Monday' THEN 2
              WHEN 'Tuesday' THEN 3
              WHEN 'Wednesday' THEN 4
              WHEN 'Thursday' THEN 5
              WHEN 'Friday' THEN 6
            END DAY))
        WHEN EXTRACT(DAYOFWEEK FROM TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY)) = 1 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule + 1 DAY))
        WHEN EXTRACT(DAYOFWEEK FROM TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY)) = 7 THEN
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule + 2 DAY))
        ELSE
          DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY))
      END
    ELSE
      DATE(TIMESTAMP_ADD(T.new_time, INTERVAL S.payout_schedule DAY))
  END AS settle_date,
  case when s.payment_time is null then "03:00" else s.payment_time end as payout_time_only,

  (sum(case when T.calc_tran_type_description in 
  ('PURCHASE','PURCHASE WITH CASHOUT','REDEMPTION','CASHOUT','REFUND REVERSAL') then (transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('PURCHASE REVERSAL','PURCHASE WITH CASHOUT REVERSAL','REDEMPTION REVERSAL','REFUND','ACTIVATION','CASHOUT REVERSAL') then (transaction_total/100) else 0 end)
  ) as trans_amount,

  (sum(case when T.calc_tran_type_description in 
  ('PURCHASE','PURCHASE WITH CASHOUT','REDEMPTION') then (T.transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('PURCHASE REVERSAL','PURCHASE WITH CASHOUT REVERSAL','REDEMPTION REVERSAL') then (T.transaction_total/100) else 0 end)
  ) as gross_sales,

  (sum(case when T.calc_tran_type_description in 
  ('REFUND REVERSAL') then (T.transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('REFUND') then (T.transaction_total/100) else 0 end)
  ) as refunds,

  (sum(case when T.calc_tran_type_description in 
  ('CASHOUT') then (T.transaction_total/100) else 0 end)
  -
  sum(case when T.calc_tran_type_description in 
  ('ACTIVATION','CASHOUT REVERSAL') then (T.transaction_total/100) else 0 end)
  ) as adjustments

FROM 
  trans_excluded T
JOIN 
  wpay_analytics.settlement_reference S 
ON 
  upper(T.division) = upper(S.division)
group by 1,2,3,4,5,6,7,8,9,10,11
)

,output as (
select * from(
select 
  *, 
  concat(cast(settle_date as string),' ',payout_time_only) as payout_time,
  FORMAT_DATE('%A', settle_date) AS weekday_name,
  case when (datetime(cast(settle_date as string)) <= current_date()) then 'Confirmed' else 'Pending' end as Pending_Flag,
  case when left(cast(settle_date as string),7) = left(cast(current_date() as string),7) then "Month to date" else left(cast(settle_date as string),7) end as month, 
from 
  output_included
union all
select 
  *, 
  concat(cast(settle_date as string),' ',payout_time_only) as payout_time,
  FORMAT_DATE('%A', settle_date) AS weekday_name,
  case when (datetime(cast(settle_date as string)) <= current_date()) then 'Confirmed' else 'Pending' end as Pending_Flag,
  case when left(cast(settle_date as string),7) = left(cast(current_date() as string),7) then "Month to date" else left(cast(settle_date as string),7) end as month, 
from 
  output_excluded
)

-- where period between date_sub(current_date(), interval 3 month) and current_date()
where

period between
      date_add(date_sub((select max(period) from(
      select * from 
     output_included 
      WHERE period BETWEEN date_trunc(date_sub(current_date(), interval 1 month), month) AND last_day(date_sub(current_date(), interval 1 month), month))) , interval 6 month), interval 1 day) and (select max(period) from(
      select * from 
      output_included ))

)
  
select
  output.*,
  left(cast(runtime.max_time as string),19) as max_time
from
  output
left join 
  runtime
  on output.site_name = runtime.site_name


);

create or replace view wpay_analytics.vw_wpay_payouts_all_merchants 
as select * from wpay_analytics.wpay_payouts_all_merchants 
;

-------------------------------------------------------------------------------------------------------
------------------