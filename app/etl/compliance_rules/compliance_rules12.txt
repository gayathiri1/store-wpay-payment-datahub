--Rule12 Remove project reference and point store_details to ref_ds
Declare backMonth INT64 Default -10;
DECLARE StartDate Date DEFAULT DATE_ADD(DATE_TRUNC(Current_Date("Australia/Sydney"), month),  INTERVAL backMonth MONTH);
DECLARE EndDate Date DEFAULT DATE_ADD(StartDate,  INTERVAL 11 MONTH);
DECLARE RptStartDate Date DEFAULT DATE_ADD(EndDate,  INTERVAL -8 MONTH);
DECLARE MonAvgStartDate Date DEFAULT DATE("2020-10-01");
if Exists(Select File_Date 
          From `pdh_rd_data_navigator.gfs_pdh_txn_interface`
          Where File_Date  = Current_Date("Australia/Sydney") - 1
          Limit 1) Then
--
Truncate Table `pdh_staging_ds.Rule12_Output`;
Insert into `pdh_staging_ds.Rule12_Output` 
--
With  TrnDET as (
         Select Upper(Trim(Case 
                     When IFNUll(rc0.Merchant_to_report,"") <> "" then rc0.Merchant_to_report
                     Else mh.division
                  End)) as Merchant,
                       upper(trim(case(mh.division)  when "LIVE GROUP" then mh.store_id else "" end)) as store_id,
          upper(trim(case(mh.division)    when "LIVE GROUP" then mh.site_name else "" end)) as site_name, 
                  
                  DATE_TRUNC(Date(tstamp_local),month) as FirstOfMonth,
                  1 as Count_Card_Present,
                  Case
                         When trn.pos_crd_dat_in_mod	in ("B","C") then 1
                         Else 0
                      End Count_Tech_Fallback
           FROM `pdh_rd_data_navigator.gfs_pdh_txn_interface` trn
           Join `pdh_ref_ds.ref_store_details` mh 
                on left(trn.Net_Term_ID,5) = mh.store_id 
               and mh.division is not Null 
               and mh.division <> "" 
           left join `pdh_staging_ds.Compliance_Control_Table` rc0
                   on rc0.Rule_ID = 0
                  and rc0.Attribute ="Merge" 
                  and Upper(Trim(rc0.Merchant)) = Upper(Trim(mh.division))
           Where IfNull(trn.Net_Term_ID,"") <> ""
             and trn.pos_crdhldr_presnt = "0"
             and Date(trn.tstamp_local) >= StartDate 
             and Date(trn.tstamp_local) < EndDate
),
--TrnSum
Monthly_Combined as (
           Select Merchant,
                  store_id,
                  site_name,
                  FirstOfMonth,
                  Sum(Count_Card_Present) Count_Card_Present,
                  Sum(Count_Tech_Fallback) Count_Tech_Fallback
           FROM trnDET
           Group By Merchant,
                    store_id,
                    site_name,
                  FirstOfMonth
             )
 
    Select m.Merchant,
           m.store_id,
           m.site_name,
           m.FirstOfMonth,
           m.Count_Card_Present,
           m.Count_Tech_Fallback,
           Case
              When m.FirstOfMonth < MonAvgStartDate then Null
              When ((Case When IFNULL(p1.Count_Card_Present,0) = 0 then 0 Else 1 End) +
                    (Case When IFNULL(p2.Count_Card_Present,0) = 0 then 0 Else 1 End) +
                    (Case When IFNULL(p3.Count_Card_Present,0) = 0 then 0 Else 1 End)) = 0 then NULL
              Else
                (IFNULL(p1.Count_Card_Present,0) + 
                 IFNULL(p2.Count_Card_Present,0) + 
                 IFNULL(p3.Count_Card_Present,0)) * 1.0 /
                    ((Case When IFNULL(p1.Count_Card_Present,0) = 0 then 0 Else 1 End) +
                     (Case When IFNULL(p2.Count_Card_Present,0) = 0 then 0 Else 1 End) +
                     (Case When IFNULL(p3.Count_Card_Present,0) = 0 then 0 Else 1 End))
          End As RollingAvg_last_3mon_CP,
          Case
              When m.FirstOfMonth < MonAvgStartDate then Null
              When ((Case When IFNULL(p1.Count_Tech_Fallback,0) = 0 then 0 Else 1 End) +
                    (Case When IFNULL(p2.Count_Tech_Fallback,0) = 0 then 0 Else 1 End) +
                    (Case When IFNULL(p3.Count_Tech_Fallback,0) = 0 then 0 Else 1 End)) = 0 then NULL
              Else
                (IFNULL(p1.Count_Tech_Fallback,0) + 
                 IFNULL(p2.Count_Tech_Fallback,0) + 
                 IFNULL(p3.Count_Tech_Fallback,0)) * 1.0 /
                    ((Case When IFNULL(p1.Count_Tech_Fallback,0) = 0 then 0 Else 1 End) +
                     (Case When IFNULL(p2.Count_Tech_Fallback,0) = 0 then 0 Else 1 End) +
                     (Case When IFNULL(p3.Count_Tech_Fallback,0) = 0 then 0 Else 1 End))
          End As RollingAvg_last_3mon_TFB,
          rc1.value * 0.01 as Threshold1,
          rc2.value * 0.01 as Threshold2,
          Current_Datetime() As Datetime_Created
   From Monthly_Combined m
   Left Join Monthly_Combined p1 on p1.Merchant = m.Merchant and m.FirstOfMonth = Date_Add(p1.FirstOfMonth, INTERVAL 1 MONTH)
                                    and p1.store_id = m.store_id and p1.site_name= m.site_name	
   Left Join Monthly_Combined p2 on p2.Merchant = m.Merchant and m.FirstOfMonth = Date_Add(p2.FirstOfMonth, INTERVAL 2 MONTH)
                                    and p2.store_id = m.store_id and p2.site_name= m.site_name	
   Left Join Monthly_Combined p3 on p3.Merchant = m.Merchant and m.FirstOfMonth = Date_Add(p3.FirstOfMonth, INTERVAL 3 MONTH)
                                    and p3.store_id = m.store_id and p3.site_name= m.site_name	
     left join `pdh_staging_ds.Compliance_Control_Table` rc1
            on rc1.Rule_ID = 12
           and rc1.Attribute ="Ratio_Technical Fallback per month to Average Technical Fallback last 3 months_Low"
  left join `pdh_staging_ds.Compliance_Control_Table` rc2
            on rc2.Rule_ID = 12
           and rc2.Attribute ="Ratio_Technical Fallback per month to Average Technical Fallback last 3 months_High"
  Where m.FirstOfMonth >= RptStartDate and m.FirstOfMonth < EndDate;
End if