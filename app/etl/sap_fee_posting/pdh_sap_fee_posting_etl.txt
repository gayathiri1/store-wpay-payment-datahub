-- Get current date based on AEST
DECLARE current_run_date DATE DEFAULT (CURRENT_DATE("Australia/Sydney"));
DECLARE formatted_curr_date INT64 DEFAULT CAST(FORMAT_DATE("%Y%m%d", current_run_date) AS INT64);
DECLARE current_run_time TIME DEFAULT CURRENT_TIME("Australia/Sydney");

-- Declaration of date variables
DECLARE post_date DATE DEFAULT DATE_SUB(current_run_date, INTERVAL 3 DAY);
DECLARE trans_date_range ARRAY < DATE >;
DECLARE max_file_date DATE;

--Get the etl extract start and end date range 
DECLARE etl_start_date DATE;
DECLARE etl_end_date DATE;

--Get current & batch start datetime based on AEST
DECLARE batch_start_time DATETIME DEFAULT DATETIME_TRUNC(CURRENT_DATETIME("Australia/Sydney"), SECOND);

--Get batch end date based on AEST
DECLARE batch_end_time DATETIME;

--Get current time(seconds) based on AEST
DECLARE current_run_sec STRING DEFAULT FORMAT_TIMESTAMP("%X", CURRENT_TIMESTAMP, "Australia/Sydney");

--Get current timestamp based on AEST
DECLARE sap_post_time TIMESTAMP DEFAULT CAST(DATETIME(CURRENT_TIMESTAMP(), 'Australia/Sydney' ) as TIMESTAMP);

--Get the companies list
Declare companies ARRAY < string >;

--Get Filename
DECLARE file_name STRING DEFAULT concat('WPAYFEES_', FORMAT_DATE("%Y%m%d%H%M%S", batch_start_time));

--Check count for billing engine tables
DECLARE edg_count DEFAULT (
  SELECT COUNT(*) 
  FROM `pdh_analytics_ds.tbl_edg_fees_rpt` 
  WHERE 
    switch_tran_date = post_date);

DECLARE smlmrc_count DEFAULT (
  SELECT COUNT(*) 
  FROM `pdh_analytics_ds.tbl_sml_merchant_fees_rpt` 
  WHERE 
    switch_tran_date = post_date);

DECLARE egfuel_count DEFAULT (
  SELECT COUNT(*) 
  FROM `pdh_analytics_ds.tbl_egfuel_fees_rpt` 
  WHERE 
    switch_tran_date = post_date);

--Populate batch number for current run
DECLARE current_batch_no STRING;
DECLARE batch_no INT64;

--Declare variable for finding missing store details
DECLARE count_miss_store INT64;

--Declare variable for finding batch number
DECLARE inp_lookup DEFAULT "SAP Fee";
DECLARE batch STRING;

--Check dependency of billing engine
IF edg_count = 0 OR smlmrc_count = 0 OR egfuel_count = 0 THEN 
	RETURN;
END IF;

--Get batch number
CALL pdh_ref_ds.get_nextbatch(inp_lookup, batch);
IF (
  batch IS NOT NULL AND batch NOT IN ("NOContRec", "UpdFailed")
) THEN 
SET current_batch_no = batch;
END IF;

--Get max run date from control table
IF current_batch_no = 'SAP00000000' THEN 
  SET max_file_date = current_run_date - 1;
ELSE 
  SET max_file_date = (
    SELECT 
      distinct date(file_date) 
    FROM 
      `pdh_analytics_ds.file_gen_details` 
    WHERE 
      merchant_name like 'sapfee%' 
      AND extract_wf_complete is true 
      AND batch_number = (
        SELECT 
          max(batch_number) 
        FROM 
          `pdh_analytics_ds.file_gen_details` 
        WHERE 
          merchant_name like 'sapfee%' 
          AND extract_wf_complete is true
      )
  );
END IF;

-- Get transaction date based on run date
IF ((max_file_date = current_run_date - 1) OR (max_file_date = current_run_date)
) THEN 
--If the run is on daily basis, transaction date is popoulated for 3 days prior to calendar date
SET trans_date_range = (
    SELECT GENERATE_DATE_ARRAY(current_run_date - 3, current_run_date - 1, INTERVAL 3 DAY));
ELSE 
--If the run is missed on a day, transaction date is popoulated for the missed date range
SET trans_date_range = (
    SELECT GENERATE_DATE_ARRAY(max_file_date - 2, post_date, INTERVAL 1 DAY));
END IF;

--Fetch etl start and end date
SET etl_start_date = trans_date_range[offset(0) ];
SET etl_end_date = trans_date_range[ordinal(ARRAY_LENGTH(trans_date_range)) ];

--Fetch companies list
SET companies = ARRAY(
    SELECT DISTINCT TRIM(wpay_company_code) 
    FROM `pdh_ref_ds.ref_str_to_sap_customermapping` 
    WHERE upper(ifnull(active_flag, "N")) <> "N" AND ifnull(wpay_company_code, "") <> "");
  
CREATE TEMP TABLE tbl_tran_date AS 
  Select * from pdh_analytics_ds.tbl_edg_fees_rpt WHERE EXISTS ((SELECT 1 FROM UNNEST(trans_date_range)transdate where transdate = switch_tran_date))
    union all
  Select * from pdh_analytics_ds.tbl_egfuel_fees_rpt WHERE EXISTS ((SELECT 1 FROM UNNEST(trans_date_range)transdate where transdate = switch_tran_date))
    union all
  Select * from pdh_analytics_ds.tbl_sml_merchant_fees_rpt WHERE EXISTS ((SELECT 1 FROM UNNEST(trans_date_range)transdate where transdate = switch_tran_date))
    union all
  Select * from pdh_analytics_ds.tbl_super_fees_rpt WHERE EXISTS ((SELECT 1 FROM UNNEST(trans_date_range)transdate where transdate = switch_tran_date))
    union all	
  Select * from pdh_analytics_ds.tbl_wpaynz_fees_rpt WHERE EXISTS ((SELECT 1 FROM UNNEST(trans_date_range)transdate where transdate = switch_tran_date))
	;
  
-- Populate data in SAP_FEE_POSTING table from 4 different tables
CREATE 
OR REPLACE TABLE `pdh_analytics_ds.sap_fee_posting` AS 
WITH result AS (
  --Processing & Interchange Fees are populated
  SELECT 
    H, 
    fee_type_description, 
    calender_date, 
	switch_tran_date,
    settlement_date, 
    merchant_org_id, 
    merchant_location_number, 
    caic, 
    sap_customer_number, 
    wpay_store_number, 
    wow_loc_number, 
    CAST(round(sum(fee_value), 2)* 100 as NUMERIC) as fee_value, 
    fee_frequency, 
    gst_flag, 
    direct_debit_flag, 
    currency, 
    pay_due_date, 
    record_end_indicator, 
    record_count, 
    company_code 
  FROM 
    (
        SELECT '1' AS H,
            'INTERCHANGE' AS fee_type_description,
            CAST(FORMAT_DATE("%Y%m%d",a.switch_tran_date) AS INT64) AS calender_date,
            a.switch_tran_date,
            e.fp_end_date,
            a.settlement_date AS settlement_date,
            b.merchant_organisation_id AS merchant_org_id,
            b.merchant_store_number AS merchant_location_number,
            a.card_acpt_id AS caic,
            b.billing_sap_customer_number as sap_customer_number,
            b.wpay_store_number,
            b.wpay_store_number AS wow_loc_number,
            d.frequency AS fee_frequency,
            'E' AS gst_flag,
            d.direct_debit_flag AS direct_debit_flag,
            b.currency_code AS currency,
            b.wpay_company_code company_code,
            CAST(FORMAT_DATE("%Y%m%d",(pdh_ref_ds.get_due_paydate2(d.direct_debit_flag,d.frequency, a.switch_tran_date, "FRI", e.fp_end_date))) AS INT64) AS         pay_due_date,
            '/' AS record_end_indicator,
            count(0) as record_count,
            sum(a.vcalc_interchange_fees_invoiced_ex_gst) AS fee_value
            FROM
				( SELECT 
				switch_tran_date AS switch_tran_date,
				settlement_date AS settlement_date,
				store_id AS store_id,
				approval_flag AS approval_flag,
				scheme AS scheme,
				card_type AS card_type,
				company AS company,
				tran_type_description AS tran_type_description,
				acquirer_institution_id AS acquirer_institution_id,
				card_acpt_id AS card_acpt_id,
				sap_filename AS sap_filename,
				sap_post_timestamp AS sap_post_timestamp,
				round(sum(vcalc_interchange_fees_invoiced_ex_gst),4) AS vcalc_interchange_fees_invoiced_ex_gst
				FROM
				tbl_tran_date
				group by 1,2,3,4,5,6,7,8,9,10,11,12
				) a
            INNER JOIN pdh_ref_ds.ref_str_to_sap_customermapping b
            ON  a.store_id =b.wpay_store_number 
            INNER JOIN pdh_ref_ds.ref_merchant_fee_config d
            ON lower(a.company) = lower(d.company) and UPPER(d.fee_code)='INTERCHANGE'
            INNER JOIN pdh_ref_ds.dim_date e
            ON a.switch_tran_date = e.clndr_date
            WHERE d.sap_fees_posting_flag = 'Y'
              AND a.sap_filename is null
              AND a.sap_post_timestamp is null
              and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> ''  
              and upper(trim(a.tran_type_description)) <> ''                     
            GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
            UNION ALL   
        SELECT '1' AS H,
            'PROCESSING' AS fee_type_description,
            CAST(FORMAT_DATE("%Y%m%d",a.switch_tran_date) AS INT64) AS calender_date,
            a.switch_tran_date,
            e.fp_end_date,
            a.settlement_date AS settlement_date,
            b.merchant_organisation_id AS merchant_org_id,
            b.merchant_store_number AS merchant_location_number,
            a.card_acpt_id AS caic,
            b.billing_sap_customer_number as sap_customer_number,
            b.wpay_store_number,
            b.wpay_store_number AS wow_loc_number,
            d.frequency AS fee_frequency,
            'E' AS gst_flag,
            d.direct_debit_flag AS direct_debit_flag,
            b.currency_code AS currency,
            b.wpay_company_code company_code,
            CAST(FORMAT_DATE("%Y%m%d",(pdh_ref_ds.get_due_paydate2(d.direct_debit_flag,d.frequency, a.switch_tran_date, "FRI", e.fp_end_date))) AS INT64) AS         pay_due_date,
            '/' AS record_end_indicator,
            count(0) as record_count,
            sum(a.vcalc_processing_fees_ex_gst) AS fee_value
            FROM
				( SELECT 
				switch_tran_date AS switch_tran_date,
				settlement_date AS settlement_date,
				store_id AS store_id,
				approval_flag AS approval_flag,
				scheme AS scheme,
				card_type AS card_type,
				company AS company,
				tran_type_description AS tran_type_description,
				acquirer_institution_id AS acquirer_institution_id,
				card_acpt_id AS card_acpt_id,
				sap_filename AS sap_filename,
				sap_post_timestamp AS sap_post_timestamp,
				round(sum(vcalc_processing_fees_ex_gst),4) AS vcalc_processing_fees_ex_gst
				FROM
				tbl_tran_date 
				group by 1,2,3,4,5,6,7,8,9,10,11,12
				) a
            INNER JOIN pdh_ref_ds.ref_str_to_sap_customermapping b
            ON  a.store_id =b.wpay_store_number 
            INNER JOIN pdh_ref_ds.ref_merchant_fee_config d
            ON lower(a.company) = lower(d.company) and UPPER(d.fee_code)='PROCESSING'
            INNER JOIN pdh_ref_ds.dim_date e
            ON a.switch_tran_date = e.clndr_date                     
            WHERE d.sap_fees_posting_flag = 'Y'
              AND a.sap_filename is null
              AND a.sap_post_timestamp is null
              and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> '' 
              and upper(trim(a.tran_type_description)) <> ''   
            GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
    )
    GROUP BY H,fee_type_description, calender_date,switch_tran_date,settlement_date,  merchant_org_id,
    merchant_location_number, caic,sap_customer_number, wpay_store_number, wow_loc_number,
    fee_frequency, gst_flag, direct_debit_flag, currency,
    pay_due_date, record_end_indicator,record_count,company_code
)
SELECT  * FROM result where fee_value != 0  ;

--Insert Header Record with country code
INSERT `pdh_analytics_ds.sap_fee_posting` (
  H, fee_type_description, calender_date, 
  --switch_tran_date,
  settlement_date, merchant_org_id, 
  merchant_location_number, caic, 
  sap_customer_number, wpay_store_number, 
  wow_loc_number, fee_value, fee_frequency, 
  gst_flag, direct_debit_flag, currency, 
  pay_due_date, record_end_indicator, 
  record_count, company_code
) WITH company_sequence as (
  select 
    companies[SAFE_OFFSET(offset) ] as company_code, 
    offset as company_seq 
  from 
    unnest(companies) with OFFSET
) 
SELECT 
  'H' as H, 
  'WPAYFEES' AS fee_type_description, 
  null AS calender_date, 
  --'' as switch_tran_date,
  null AS settlement_date, 
  company_code AS merchant_org_id, 
  CAST(formatted_curr_date AS STRING) AS merchant_location_number, 
  REGEXP_REPLACE(format_time("%H:%M:%S",TIME_ADD(current_run_time, interval company_seq second)),r':','') AS caic, 
  concat('WPAYFEES_', FORMAT_DATE("%Y%m%d%H%M%S", DATETIME_ADD(batch_start_time, interval company_seq second ) )) AS sap_customer_number, 
  cast(null as string) AS wpay_store_number, 
  cast(null as string) AS wow_loc_number, 
  null AS fee_value, 
  cast(null as string) AS fee_frequency, 
  cast(null as string) AS gst_flag, 
  cast(null as string) AS direct_debit_flag, 
  cast(null as string) AS currency, 
  null AS pay_due_date, 
  '/' AS record_end_indicator, 
  null as record_count, 
  company_code AS company_code 
from company_sequence;

--Insert Trailer Record
INSERT INTO `pdh_analytics_ds.sap_fee_posting` 
SELECT 
  'T', 
  null, 
  null,
  null, 
  null, 
  FORMAT("%010d", cast(ifnull(cast(count(0) - 1 as string),"0")as  int64))  as merchant_org_id,
  FORMAT("%016d",CAST(ifnull(cast(Sum(case H
                               when "H" then 0
                               else fee_value
                            end) as string),"0") as INT64)) AS merchant_location_number,
  null, 
  null, 
  null, 
  null, 
  null, 
  null, 
  null, 
  null, 
  null, 
  null, 
  '/', 
  null, 
  company_code 
FROM  `pdh_analytics_ds.sap_fee_posting` 
group by  company_code;

--Capture the missed store details
INSERT INTO pdh_analytics_ds.sap_missing_store_log 
SELECT 
  DISTINCT current_batch_no, 
  store_id, 
  switch_tran_date, 
  'Store that missed the Fee calculcation Process', 
  batch_start_time, 
  'SAP Fee Posting Process', 
  'sapfee', 
  '', 
  CURRENT_DATETIME 
FROM 
  (
    SELECT 
      DISTINCT a.wpay_store_number store_id, 
      a.switch_tran_date switch_tran_date   
    FROM 
	    pdh_analytics_ds.sap_fee_posting a
	
	Where a.wpay_store_number not in (
        select 
          b.wpay_store_number 
        from 
          pdh_ref_ds.ref_str_to_sap_customermapping b
      ) 
	  
	  
  );

--Get missing store count details
SET count_miss_store = (
    SELECT 
      COUNT(0) 
    FROM 
      pdh_analytics_ds.sap_missing_store_log 
    where 
      date(create_datetime) = current_run_date 
      and data_source = 'sapfee'
  );

-- Create entry in control table
IF count_miss_store = 0 THEN 

-- Copy data into historical data table
INSERT INTO `pdh_analytics_ds.sap_fee_posting_all` 
SELECT current_run_date, 
    H, 
    fee_type_description, 
    calender_date, 
    settlement_date, 
    merchant_org_id, 
    merchant_location_number, 
    caic, 
    sap_customer_number, 
    wpay_store_number, 
    wow_loc_number, 
    fee_value, 
    fee_frequency, 
    gst_flag, 
    direct_debit_flag, 
    currency, 
    pay_due_date, 
    record_end_indicator, 
    record_count, 
    company_code  
FROM 
  `pdh_analytics_ds.sap_fee_posting` 
WHERE 
  H NOT IN ('T', 'H');

-- Insert into Audit Table
INSERT INTO `pdh_analytics_ds.audit_sap_fee` 
SELECT 
  current_batch_no, 
  merchant_org_id, 
  wpay_store_number, 
  file_name, 
  fee_type_description, 
  sum(fee_value), 
  calender_date, 
  pay_due_date, 
  sum(record_count), 
  currency, 
  gst_flag, 
  batch_start_time, 
  batch_end_time, 
  concat(
    'Transactions Posted on ' || calender_date
  ), 
  CURRENT_DATETIME, 
  'SAP Fee Posting Process', 
  company_code 
from 
  `pdh_analytics_ds.sap_fee_posting` 
where 
  H not in ('H', 'T') 
group by 
  merchant_org_id, 
  wpay_store_number, 
  fee_type_description, 
  calender_date, 
  pay_due_date, 
  currency, 
  gst_flag, 
  company_code;

-- Create Temp table & Update Billing Engine tables
CREATE 
OR REPLACE TABLE `pdh_staging_ds.sap_temp_table` AS 
SELECT 
  distinct 
  store_id, 
  switch_tran_date 
FROM 
  tbl_tran_date a
  
  INNER JOIN pdh_ref_ds.ref_str_to_sap_customermapping b
            ON  a.store_id =b.wpay_store_number 
            INNER JOIN pdh_ref_ds.ref_merchant_fee_config d
            ON lower(a.company) = lower(d.company) and UPPER(d.fee_code)='INTERCHANGE'
            WHERE d.sap_fees_posting_flag = 'Y'
              AND a.sap_filename is null
              AND a.sap_post_timestamp is null
              and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> ''  
              and upper(trim(a.tran_type_description)) <> '' ;
  


UPDATE 
  `pdh_analytics_ds.tbl_edg_fees_rpt` a 
SET 
  sap_filename = file_name, 
  sap_post_timestamp = sap_post_time 
FROM 
  pdh_staging_ds.sap_temp_table b 
  --pdh_analytics_ds.sap_fee_posting 
WHERE 
  a.switch_tran_date = b.switch_tran_date  
  AND a.store_id = b.store_id
  AND a.sap_filename is null
  AND a.sap_post_timestamp is null
  and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> '' 
              and upper(trim(a.tran_type_description)) <> '';

UPDATE 
  `pdh_analytics_ds.tbl_sml_merchant_fees_rpt` a 
SET 
  sap_filename = file_name, 
  sap_post_timestamp = sap_post_time 
FROM 
  pdh_staging_ds.sap_temp_table b 
WHERE 
   a.switch_tran_date = b.switch_tran_date  
  AND a.store_id = b.store_id
  AND a.sap_filename is null
  AND a.sap_post_timestamp is null
  and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> '' 
              and upper(trim(a.tran_type_description)) <> '';


UPDATE 
  `pdh_analytics_ds.tbl_egfuel_fees_rpt` a 
SET 
  sap_filename = file_name, 
  sap_post_timestamp = sap_post_time 
FROM 
  pdh_staging_ds.sap_temp_table b 
WHERE 
   a.switch_tran_date = b.switch_tran_date  
  AND a.store_id = b.store_id
  AND a.sap_filename is null
  AND a.sap_post_timestamp is null
  and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> '' 
              and upper(trim(a.tran_type_description)) <> '';

  
  
UPDATE 
  `pdh_analytics_ds.tbl_wpaynz_fees_rpt` a 
SET 
  sap_filename = file_name, 
  sap_post_timestamp = sap_post_time 
FROM 
  pdh_staging_ds.sap_temp_table b 
WHERE 
   a.switch_tran_date = b.switch_tran_date  
  AND a.store_id = b.store_id
  AND a.sap_filename is null
  AND a.sap_post_timestamp is null
  and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> '' 
              and upper(trim(a.tran_type_description)) <> '';


UPDATE 
  `pdh_analytics_ds.tbl_super_fees_rpt` a 
SET 
  sap_filename = file_name, 
  sap_post_timestamp = sap_post_time 
FROM 
  pdh_staging_ds.sap_temp_table b 
WHERE 
   a.switch_tran_date = b.switch_tran_date  
  AND a.store_id = b.store_id
  AND a.sap_filename is null
  AND a.sap_post_timestamp is null
  and upper(trim(a.scheme)) <> ''
              and upper(trim(a.approval_flag)) <> '' 
              and upper(trim(a.tran_type_description)) <> '';


--Get batch end datetime based on AEST
SET 
  batch_end_time = DATETIME_TRUNC(
    CURRENT_DATETIME("Australia/Sydney"), 
    SECOND
  );

INSERT INTO `pdh_analytics_ds.file_gen_details` (
  batch_number, processing_date, merchant_name, 
  etl_complete, extract_wf_complete, 
  extract_start_datetime, extract_end_datetime, 
  file_date, remarks
) with company_sequence as (
  select 
    companies[SAFE_OFFSET(offset) ] as company_code, 
    offset as company_seq 
  from 
    unnest(companies) with OFFSET
) 
SELECT 
  current_batch_no as batch_number, 
  current_run_date as processing_date, 
  concat(
    "sapfee", case company_code when "1410" then "aus" when "2025" then "nzl" else "oth" end, 
    company_code
  ) as merchant_name, 
  true as etl_complete, 
  cast(null as boolean) as extract_wf_complete, 
  etl_start_date as extract_start_datetime, 
  etl_end_date as extract_end_datetime, 
  DATETIME_ADD(
    batch_start_time, interval company_seq second
  ) as file_date, 
  cast(null as string) as remarks 
from 
  company_sequence;

DROP 
  TABLE pdh_staging_ds.sap_temp_table;
  
END IF;