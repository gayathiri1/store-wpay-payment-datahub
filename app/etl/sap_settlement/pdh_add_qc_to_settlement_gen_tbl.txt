--
--Start of Script
--Add QC,QP,LK,DP data to generic settlement table Exit if Duplicate transactionc exist, Remove QC Partner
--Block if company is null
--2022-11-02 Include Amex transactions, exclude for excluded usuers
--2022-11-11 cater for cases when both scheme and exclude__issuer are blank
declare sys_date date default current_date("Australia/Sydney");
declare batch_end_datetime datetime;
declare batch_end_mm_dd_hh_mm_ss datetime;
declare min_transaction_timestamp datetime;
declare max_transaction_timestamp datetime;
DECLARE inp_lookup STRING DEFAULT "QC Settlement";
DECLARE batch string;

if (Select count(*) from `pdh_analytics_ds.sap_missing_store_log`
           Where create_by = "Settlement Process"
             and data_source in ("QC","LK","DP","ED","CY")) > 0  then
    return;
end if; 
--
--Get next Batch Number
CALL `pdh_ref_ds.get_nextbatch`(inp_lookup,batch);
if (ifnull(batch,"") in ("NOContRec","UpdFailed"))  then
    return;
end if; 
--
--Add QC data to Settlement Generic Table
insert into `pdh_analytics_ds.stlm_standard_settlement_table`
   (last_update_datetime,
    last_updated_by,
    posting_date,
    setlmnt_result_file,
    tran_uid,
    filename,
    transaction_timestamp,
    store_id,
    division,
    order_number,
    tran_settlement_amount,
    record_type,
    tlf_name,
    discount_amt)
    --
    With  QCTran as (
           Select concat("QC_",trim(ifnull(qct.approvalcode,"Null")),"_",
                               trim(ifnull(qct.ReferenceNumber,"Null")),"_",
                               cast(ifnull(qct.BatchNumber,0) as string),"_",
                               case 
                                  when qct.transactiondate is null then "19000101"
                                  else format_date("%Y%m%d",qct.transactiondate)
                               end,"T",
                               case 
                                  when qct.transactiontime is null then "000000"
                                  else format_time("%H%M%S",qct.transactiontime)
                               end) as tran_uid,
                  qct.file_name,
                  cast(concat(case 
                                  when qct.transactiondate is null then "1900-01-01"
                                  else format_date("%Y-%m-%d",qct.transactiondate)
                               end,"T",
                               case 
                                  when qct.transactiontime is null then "00:00:00"
                                  else format_time("%H:%M:%S",qct.transactiontime)
                               end) as datetime)  as transaction_timestamp,
                  qct.transactiontype,
                  "" as tran_qualifier,
                  case 
                     when ifnull(qct.outletcode,"") <>  "" then upper(trim(qct.outletcode))

                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA" 
                           and upper(trim(qct.outlet)) = "WOW GC ONLINE"
                           and upper(trim(qct.POSName)) in ("WOWSAPHYBRISXNP"))  then "W5975"
                    --
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "BIG W-SERVICES" 
                           and upper(trim(qct.POSName)) in ("QWIKJ-BIGW-POS-01",
                                                        "QWIKJ-BIGW-POS-02")) then "W6673"
                     --
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "BWS-SERVICES" 
                           and upper(trim(qct.POSName)) in ("QWIKJ-BWS-POS-01",
                                                        "QWIKJ-BWS-POS-02")) then "W6673"
                     --
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "DAN MURPHYS-SERVICES"
                           and upper(trim(qct.POSName)) in ("QWIKJ-DM-POS-01")) then "W6673"
                     --
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "EG GROUP-SERVICES"
                           and upper(trim(qct.POSName)) in ("QWIKJ-EGGRP-POS-01")) then "W6673"
                     --     
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "SUPERMARKETS-SERVICES"
                           and upper(trim(qct.POSName)) in ("QWIKJ-SMKT-POS-01",
                                                        "QWIKJ-SMKT-POS-02",
                                                        "QWIKPOS-SUPERMARKETS-01")) then "W6673"
                     --     
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "WOOLWORTHS GROUP LTD-SERVICES"
                           and upper(trim(qct.POSName)) in ("QWIKJ-WGL-POS-01",
                                                        "QWIKJ-WGL-POS-02",
                                                        "WOWAU-QWIKPOS2")) then "W6673"
                    --
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "WOOLWORTHS PLACARD WAREHOUSE"
                           and upper(trim(qct.POSName)) in ("QWIKJ-WGL-POS-01",
                                                        "QWIKJ-WGL-POS-02",
                                                        "WOWAU-QWIKPOS2")) then "W6673"
                    --
                     when (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA"     
                           and upper(trim(qct.outlet)) = "WOW GC ONLINE"
                           and upper(trim(qct.POSName)) in ("QWIKJ-WGL-POS-01",
                                                        "QWIKJ-WGL-POS-02",
                                                        "WOWAU-QWIKPOS2")) then "W6673"

                     when upper(trim(qct.outlet)) in ("COUNTDOWN QWIKSERV","COUNTDOWN-SERVICES") 
                          and upper(trim(qct.issuer)) = "WOOLWORTHS NEW ZEALAND LIMITED" 
                          then "N9999"
                     else cast(null as string)
                  end  store_id,
                 -- qct.invoicenumber,
                  case 
                     when (upper(trim(qct.outletcode )) = "W5975"
                           or (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA" 
                              and upper(trim(qct.outlet)) = "WOW GC ONLINE"
                              and upper(trim(qct.POSName)) in ("WOWSAPHYBRISXNP")))   
                          then substring(qct.notes,9,8)

                     else qct.invoicenumber
                  end as invoicenumber,
                  ifnull(qct.amount_transacting_merchants_currency_or_points,0) trans_amt,
                  0 as discount_amt,
                  "NONE" as excluded_usuer
         from `pdh_rd_quickcilver.qc_detail_transactions` qct
         left Join `pdh_ref_ds.ref_merchant_settlement_window` mw
              on mw.division_type = "PARTNER"
             and mw.division = upper(trim(qct.Merchant))
         where ifnull(mw.division,"") = ""
           and upper(trim(qct.transactionstatus)) =  "SUCCESS"
           and qct.amount_transacting_merchants_currency_or_points <> 0
        ),
    LKTran as (
         select concat("LK_",
                  trim(ifNull(ResRef,"NULL")),"_",
                  case 
                     when ReqDate is null then "19000101" 
                     else format_date("%Y%m%d",ReqDate)
                  end, "T",
                  case 
                     when ReqTime is null then "000000"
                     else format_time("%H%M%S",ReqTime)
                  end) as tran_uid,                  
                file_name,
                cast(concat(case 
                               when ReqDate is null then "1900-01-01"                
                               else format_date("%Y-%m-%d",ReqDate)
                            end,"T",
                            case 
                               when ReqTime is null then "00:00:00"
                               else format_time("%H:%M:%S",ReqTime)
                            end) as datetime)  as transaction_timestamp,
                Upper(ReqType) as transactiontype,
                "" as tran_qualifier,
                upper(trim(ReqStore)) store_id,
                "" as invoicenumber,
                ifnull(ReqAmt,0) tran_amt,
                0 as discount_amt,
                "NONE" as excluded_usuer
   from  `pdh_rd_apm.alipay_linkly` 
    where ifnull(ReqStore,"NULL") <> "NULL"
      and ReqAmt <> 0
      and ResRT =    "TRANSACTION APPROVED"
      and ReqMT in (200) --stop 400
      and upper(trim(ReqType)) in ("N","N-","P","R","30001000","30002000")
      and ReqDate is not NULL
      and OrigData = "Alipay"
        ),
    DPTran as (
      select concat("DP_",trim(txnRef)) as tran_uid,
             file_name,
             case
                when txnTime is null then cast("1900-01-01T00:00:00" as datetime)
                else datetime_trunc(datetime(txnTime),second)
             end as transaction_timestamp,
             upper(transactiontype) transactiontype,
             case
                when length(txnRef) = length(replace(txnRef,".",""))  then "WEX" 
                else "QC"  
             end as tran_qualifier,
             upper(left(trim(terminal_id),5)) as store_id,
             trim(orderNumber) as invoicenumber,
             ifnull(amount,0) as trans_amt,
             0 as discount_amt,
             "NONE" as excluded_usuer
    from `pdh_rd_data_navigator.digitalpay_gc_txns` 
    where ifnull(amount,0) <> 0
      and upper(trim(MerchantName)) = "EVERYDAY PAY"
      and upper(trim(transactiontype)) in ("PURCHASE","REFUND") 
      and ifnull(responseCodeContainer,"") = "00" 
      and ifnull(trim(txnRef),"") <> ""
      and (length(txnRef) - length(replace(txnRef,".",""))) in (0,2)
        ),
   EDTran as (
      select concat("ED_",ifnull(retrieval_ref_num,"NULL"),"_",
                    (case 
                       when pan is Null then "NULL"
                       when length(trim(pan)) < 10 then trim(pan)
                       else concat(left(trim(pan),6),
                                   repeat("*",length(trim(pan)) - 9),
                                   right(trim(pan),3)
                                  )
                     end),"_",
                    format_datetime("%Y%m%dT%H%M%S",datetime(local_timestamp))) as tran_uid,
             file_name,
             datetime_trunc(datetime(local_timestamp), second) as transaction_timestamp,
             Upper(cast(txn_type_indicator as string)) as transactiontype,
             "EDP" as tran_qualifier,
             upper(left(trim(card_acceptor_terminal_id),5)) as store_id,
             "" as invoicenumber,
             ifnull(amount_txn,0) * 0.01 as trans_amt,
             0 as discount_amt,
             "NONE" as excluded_usuer
    from `pdh_rd_data_navigator.edwp_txnact` 
    where txn_disposition = 1
      and local_timestamp is not NULL
      and ifnull(amount_txn,0)  <> 0
      and right(cast(txn_type_indicator as string),4) in ("1000","2000")
              ),
 CYTran as (
 Select concat("CY_",cast(t.tran_uid as string),"_",
               left(rpad(cast(t.transaction_timestamp as string),14,"0"),8),"T",
              right(rpad(cast(t.transaction_timestamp as string),14,"0"),6),"_",
               upper(trim(t.transaction_type)),"_",
               cast(abs(ifnull(t.transaction_amount,0) * 0.01) as string)
               ) as tran_uid,
        file_name,
        cast(Concat(left(rpad(cast(t.transaction_timestamp as string),14,"0"),4), "-",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),5,2), "-",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),7,2), "T",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),9,2),":",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),11,2),":",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),13,2)
              ) as datetime) as transaction_timestamp,
        upper(trim(t.transaction_type)) as transactiontype,
        "CY" as tran_qualifier,
        case
           when trim(ifnull(t.terminal_id,"")) <> ""   
                then upper(left(trim(t.terminal_id),5))
           else upper(left(trim(rk.value),5))
        end as store_id,
        cast(t.order_num as string) as invoicenumber,
        ifnull(t.transaction_amount,0) * 0.01 as trans_amt,
             0 as discount_amt,
        case --20221111
           when ifnull(t.scheme,"") = "" then "NONE"
           else upper(trim(t.scheme)) 
        end as  excluded_usuer
 --2022-11-02 Include Amex transactions start
 from `pdh_rd_data_navigator.isg_wpay_tran` t
 left join pdh_ref_ds.ref_key_value rk 
           on rk.attribute = "merchant-terminalid mapping"
          and upper(trim(rk.key)) = upper(trim(cast(t.merchant_id as string))) 
 where upper(trim(transaction_type)) in ("PURCHASE","REFUND")
   and ifnull(transaction_approval_status,0) = 0
   and ifnull(transaction_amount,0) <> 0
   and (t.terminal_id is not null or rk.value is not null)
   --2022-11-02 Include Amex transactions end
   ), 
   tran_combined as (         select * from QCTran where ifnull(store_id,"") <> ""
                    Union all Select * from DPTran where ifnull(store_id,"") <> ""
                    union all Select * from LKTran where ifnull(store_id,"") <> ""
                    union all Select * from EDTran where ifnull(store_id,"") <> ""
                    union all Select * from CYTran where ifnull(store_id,"") <> ""
                    ),
   trn_seq as (select *, row_number() over(partition by tran_uid) tran_uid_seq
             from tran_combined),
   --Eliminate duplicate tran_uid
   trn as (        
          Select * from trn_seq where tran_uid not in 
                   (select tran_uid from trn_seq
                    where tran_uid_seq = 2)   

          )
   select datetime_trunc(current_datetime("Australia/Sydney"),SECOND)  as last_update_datetime,
           "Settlement Process" as last_updated_by,
           cast(null as date) as posting_date,
           cast(null as string) as setlmnt_result_file,
           trn.tran_uid,
           trn.file_name as filename,
           trn.transaction_timestamp,
           trn.store_id,
           upper(trim(rsd.division)) as division, 
           case 
              when upper(rsd.is_online) = "ONLINE" then  trim(trn.invoicenumber)
              else ""
           end as order_number,
           abs(trn.trans_amt) * tt.settlement_factor as tran_settlement_amount,
           tt.record_type,
           cast(null as string) as tlf_name,
           abs(trn.discount_amt) * tt.settlement_factor * -1 as discount_amt
    from  trn 
    join `pdh_ref_ds.ref_store_details` rsd on upper(trim(rsd.store_id)) = trn.store_id
                                           and rsd.is_closed = False
    join `pdh_ref_ds.ref_merchant_settlement_window` msw
         on msw.is_active = "Y"
        and msw.division =  upper(trim(rsd.division))
    join `pdh_ref_ds.ref_str_to_sap_customermapping` scm
         on upper(trim(scm.wpay_store_number)) = upper(trim(rsd.store_id)) 
        and upper(ifnull(scm.active_flag,"N")) <> "N" 
        and ifnull(scm.wpay_company_code,"") <> ""    --Split By Company : Stop empty company
    join `pdh_ref_ds.ref_transaction_type_settlement_factor` tt
           on tt.settlement_factor <> 0
          and tt.transaction_type = upper(trim(trn.transactiontype))
          and tt.tran_qualifier = case left(trn.tran_uid,2)
                                     when "QC" then msw.division_type
                                     else trn.tran_qualifier
                                  end
    left join `pdh_ref_ds.ref_stlm_tlf_config` tlf on tlf.division = upper(trim(rsd.division))
                    
    left join `pdh_analytics_ds.stlm_standard_settlement_table` std
         on std.tran_uid = trn.tran_uid
    where std.tran_uid is null
      and strpos(upper(trim(ifnull(scm.exclude__issuers,""))),trn.excluded_usuer) = 0 --EXCLUDE 
      and ((left(trn.tran_uid,2) = "LK" and ifnull(tlf.alipay_flag,"N") = "Y")
           or (left(trn.tran_uid,2) = "CY" and ifnull(tlf.cybsy_flag,"N") = "Y")  
           or (left(trn.tran_uid,2) = "QC" and ifnull(tlf.qc_flag,"N") = "Y")      
           or (left(trn.tran_uid,2) = "ED" and ifnull(tlf.edp_flag,"N") = "Y")    
           or (left(trn.tran_uid,2) = "DP" and ifnull(tlf.dpay_flag,"N") = "Y") 
          )
      and trn.transaction_timestamp
           > (case 
                when msw.last_execution_time is null then cast("1900-01-01T00:00:00" as datetime)
                else cast(cast(msw.last_execution_time as date) + msw.days_lookback as datetime)
            end) 
      and trn.transaction_timestamp >= cast(msw.earliest_date as datetime) 
      and trn.transaction_timestamp <= 
                cast(concat(format_date("%Y-%m-%d",sys_date + msw.day_lag), "T",
                            left(lpad(cast(msw.settlement_cutoff as string),4,"0"),2), ":",
                           right(lpad(cast(msw.settlement_cutoff as string),4,"0"),2), ":00"
                  )  as datetime);

--add control rec to specify QC detail is added to generic settlement table
set batch_end_mm_dd_hh_mm_ss = datetime_trunc(current_datetime("Australia/Sydney"),SECOND);
set (min_transaction_timestamp, max_transaction_timestamp) = 
           (select AS STRUCT datetime_trunc(min(transaction_timestamp),SECOND),
                             datetime_trunc(max(transaction_timestamp),SECOND)
            from `pdh_analytics_ds.stlm_standard_settlement_table`
            where setlmnt_result_file is null);
--
insert into pdh_analytics_ds.file_gen_details 
  select batch batch_number,
         cast(batch_end_mm_dd_hh_mm_ss as date) processing_date, 
         "qcdsettlement" merchant_name,
         true etl_complete, 
         false extract_wf_complete, 
         ifnull(min_transaction_timestamp,batch_end_mm_dd_hh_mm_ss) extract_start_datetime,
         ifnull(max_transaction_timestamp,batch_end_mm_dd_hh_mm_ss) extract_end_datetime,
         batch_end_mm_dd_hh_mm_ss file_date,
         cast(null as string)    remarks;
--
--End of Script
