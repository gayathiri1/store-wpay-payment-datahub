--
--Start of Script Latest fix 2022-08-10T17:19
--Add QC,QP,LK,DP data to generic settlement table Exit if Duplicate transactionc exist, Remove QC Partner
--Block if company is null, Add minitaf Add settlement window by store
--2022-10-14 Add 7_day settlement
--2022-11-10 Add AMEX
--20221114 add Minitaf and EDW
--20221206 add function get_qc_store
--20230110 Remove column surcharge_amtpdhp
--20230111 use function trans_in_stlm_window
--20230119 Remove dependency on missing store
--20230123 use pdh_load_time to seq
--20230130 Use function get_trans_uid
--20230201 Replace minitaf(gfs_pdh_txn_interface) by NRT(lv_gfs_pdh_txn_interface)
--20230207 Use function pdh_ref_ds.get_calc_trans_type for EDW
--20230209 replace pdh_rd_data_navigator.lv_gfs_pdh_txn_interface 
--              by pdh_rd_data_navigator_views.vw_lv_gfs_pdh_txn_interface
declare sys_date date default current_date("Australia/Sydney");
declare str_sysdate string default format_date("%Y-%m-%d",sys_date);
--
declare batch_end_datetime datetime;
declare batch_end_mm_dd_hh_mm_ss datetime;
declare min_transaction_timestamp datetime;
declare max_transaction_timestamp datetime;
DECLARE inp_lookup STRING DEFAULT "QC Settlement";
DECLARE batch string;
declare nullstr string;
--
--Get next Batch Number
CALL `pdh_ref_ds.get_nextbatch`(inp_lookup,batch);
if (ifnull(batch,"") in ("NOContRec","UpdFailed"))  then
    return;
end if; 
--
--Add QC data to Settlement Generic Table
--
insert into `pdh_analytics_ds.stlm_standard_settlement_table`
   (last_update_datetime,
    last_updated_by,
    posting_date,
    setlmnt_result_file,
    tran_uid,
    filename,
    transaction_timestamp,
    store_id,
    division,
    order_number,
    tran_settlement_amount,
    record_type,
    tlf_name,
    discount_amt)  
--
    With  QCTran as (
           Select pdh_ref_ds.get_tran_uid(
                                    "QC",
                                     qct.approvalcode, 
                                     qct.ReferenceNumber, 
                                     qct.BatchNumber, 
                                     nullstr,
                                     concat(CASE 
                                             when qct.transactiondate is null then "19000101"
                                            else format_date("%Y%m%d",qct.transactiondate)
                                            End,"T",
                                            CASE 
                                             when qct.transactiontime is null then "000000"
                                             else format_time("%H%M%S",qct.transactiontime)
                                            end),
                                      nullstr,
                                      nullstr, 
                                      nullstr, 
                                      0) as tran_uid, --20230130 use function
                  cast(qct.pdh_load_time as datetime) as pdh_load_time,
                  qct.file_name,
                  cast(concat(case 
                                  when qct.transactiondate is null then "1900-01-01"
                                  else format_date("%Y-%m-%d",qct.transactiondate)
                               end,"T",
                               case 
                                  when qct.transactiontime is null then "00:00:00"
                                  else format_time("%H:%M:%S",qct.transactiontime)
                               end) as datetime)  as transaction_timestamp,
                  qct.transactiontype,
                  "" as tran_qualifier,
                  pdh_ref_ds.get_qc_store(qct.outletcode,
                                          qct.Issuer,
                                          qct.outlet,
                                          qct.POSName) store_id,
                  case 
                     when (upper(trim(qct.outletcode )) = "W5975"
                           or (upper(trim(qct.Issuer)) = "WOOLWORTHS GROUP LTD AUSTRALIA" 
                              and upper(trim(qct.outlet)) = "WOW GC ONLINE"
                              and upper(trim(qct.POSName)) in ("WOWSAPHYBRISXNP")))   
                          then substring(qct.notes,9,8)
                     else qct.invoicenumber
                  end as invoicenumber,
                  ifnull(qct.amount_transacting_merchants_currency_or_points,0) trans_amt,
                  0 as discount_amt,
                  "NONE" as excluded_issuer,
                  upper(trim(qct.Merchant)) Merchant,
                  upper(trim(qct.Issuer)) Issuer
         from `pdh_rd_quickcilver.qc_detail_transactions` qct
         left Join `pdh_ref_ds.ref_merchant_settlement_window` mw
              on mw.division_type = "PARTNER"
             and mw.division = upper(trim(qct.Merchant))
         where ifnull(mw.division,"") = ""
           and upper(trim(qct.transactionstatus)) =  "SUCCESS"
           and qct.amount_transacting_merchants_currency_or_points <> 0
        ),
    LKTran as (
         select pdh_ref_ds.get_tran_uid(  "LK",
                                     nullstr, 
                                     ResRef,
                                     0, 
                                     nullstr,
                                     concat(CASE 
                                             when ReqDate is null then "19000101"
                                            else format_date("%Y%m%d",ReqDate)
                                            End,"T",
                                            CASE 
                                             when ReqTime is null then "000000"
                                             else format_time("%H%M%S",ReqTime)
                                            end),
                                      nullstr,
                                      nullstr, 
                                      nullstr, 
                                      0) as tran_uid, --20230130 use function
                cast(pdh_load_time as datetime) as pdh_load_time,                 
                file_name,
                cast(concat(case 
                               when ReqDate is null then "1900-01-01"                
                               else format_date("%Y-%m-%d",ReqDate)
                            end,"T",
                            case 
                               when ReqTime is null then "00:00:00"
                               else format_time("%H:%M:%S",ReqTime)
                            end) as datetime)  as transaction_timestamp,
                Upper(ReqType) as transactiontype,
                "" as tran_qualifier,
                upper(trim(ReqStore)) store_id,
                "" as invoicenumber,
                ifnull(ReqAmt,0) tran_amt,
                0 as discount_amt,
                "NONE" as excluded_issuer,
                "" Merchant,
                "" Issuer  
   from  `pdh_rd_apm.alipay_linkly` 
    where ifnull(ReqStore,"NULL") <> "NULL"
      and ReqAmt <> 0
      and ResRT =    "TRANSACTION APPROVED"
      and ReqMT in (200) --stop 400
      and upper(trim(ReqType)) in ("N","N-","P","R","30001000","30002000")
      and ReqDate is not NULL
      and OrigData = "Alipay"
        ),
    DPTran as (
      select pdh_ref_ds.get_tran_uid(
                         "DP",
                         nullstr, 
                         trim(txnRef), 
                         0, 
                         nullstr,
                         nullstr,
                         nullstr,
                         nullstr, 
                         nullstr, 
                         0) as tran_uid, --20230130 use function
             cast(pdh_load_time as datetime) as pdh_load_time,
             file_name,
             case
                when txnTime is null then cast("1900-01-01T00:00:00" as datetime)
                else datetime_trunc(datetime(txnTime),second)
             end as transaction_timestamp,
             upper(transactiontype) transactiontype,
             case
                when length(txnRef) = length(replace(txnRef,".",""))  then "WEX" 
                else "QC"  
             end as tran_qualifier,
             upper(left(trim(terminal_id),5)) as store_id,
             trim(orderNumber) as invoicenumber,
             ifnull(amount,0) as trans_amt,
             0 as discount_amt,
             "NONE" as excluded_issuer,
             "" Merchant,
             "" Issuer       
    from `pdh_rd_data_navigator.digitalpay_gc_txns` 
    where ifnull(amount,0) <> 0
      and upper(trim(MerchantName)) = "EVERYDAY PAY"
      and upper(trim(transactiontype)) in ("PURCHASE","REFUND") 
      and ifnull(responseCodeContainer,"") = "00" 
      and ifnull(trim(txnRef),"") <> ""
      and (length(txnRef) - length(replace(txnRef,".",""))) in (0,2)
        ),
   EDTran as (
      select pdh_ref_ds.get_tran_uid(
                                "ED",
                                nullstr, 
                                dn.retrieval_ref_num,
                                0, 
                                dn.pan,
                                format_datetime("%Y%m%dT%H%M%S",datetime(dn.local_timestamp)),
                                nullstr,
                                nullstr, 
                                nullstr, 
                                0) as tran_uid,  --20230130 use function
             cast(dn.pdh_load_time as datetime) as pdh_load_time,
             file_name,
             datetime_trunc(datetime(dn.local_timestamp), second) as transaction_timestamp,
             pdh_ref_ds.get_calc_trans_type("", t.abbr ,safe_cast(dn.mti as string))
                   as transactiontype,  --20230207 use function
             "EDP" as tran_qualifier,
             upper(left(trim(dn.card_acceptor_terminal_id),5)) as store_id,
             "" as invoicenumber,
             abs(ifnull(dn.amount_txn,0)) *
                tt.settlement_amount_flag *
                   tt.spend_factor * 0.01 as trans_amt,
             0 as discount_amt,
             "NONE" as excluded_issuer,
             "" Merchant,
             "" Issuer      
   --20230207 change start 
    from `pdh_rd_data_navigator.edwp_txnact` dn
    Join `pdh_analytics_ds.ref_transaction_types` t 
          on safe_cast(dn.txn_type_indicator as int64) = safe_cast(t.dn_tran_code as int64)
    join `pdh_ref_ds.ref_response_code` r on safe_cast(dn.action_code  as int64)
                                             = safe_cast(r.action_code as int64)
    join `pdh_analytics_ds.ref_tran_type_codes` tt
                 on Upper(trim(tt.tran_type_desc)) = 
                    pdh_ref_ds.get_calc_trans_type("", t.abbr ,safe_cast(dn.mti as string))
                and tt.settlement_amount_flag <> 0
                and tt.spend_factor <> 0
   --20230207 change end
    where dn.txn_disposition = 1
      and dn.local_timestamp is not NULL
      and ifnull(dn.amount_txn,0)  <> 0
                ),
 CYTran as (
 Select -- 2022-09-09 cater for null values in tran_uid
        pdh_ref_ds.get_tran_uid(
                                "CY",
                                nullstr, 
                                nullstr,
                                0,
                                nullstr,
                                concat(
                                left(rpad(cast(t.transaction_timestamp as string),14,"0"),8),"T",
                               right(rpad(cast(t.transaction_timestamp as string),14,"0"),6)),
                                cast(t.tran_uid as string),
                                nullstr, 
                                t.transaction_type, 
                                t.transaction_amount) as tran_uid, --20230130 use function
        cast(t.pdh_load_time as datetime) as pdh_load_time,
        t.file_name,
        cast(Concat(left(rpad(cast(t.transaction_timestamp as string),14,"0"),4), "-",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),5,2), "-",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),7,2), "T",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),9,2),":",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),11,2),":",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),13,2)
              ) as datetime) as transaction_timestamp,
        upper(trim(t.transaction_type)) as transactiontype,
        "CY" as tran_qualifier,
        case
           when trim(ifnull(t.terminal_id,"")) <> ""   
                then upper(left(trim(t.terminal_id),5))
           else upper(left(trim(rk.value),5)) --2022-11-10 INclude Amex transactions
        end as store_id,
        cast(t.order_num as string) as invoicenumber,
        ifnull(t.transaction_amount,0) * 0.01 as trans_amt,
        0 as discount_amt,
        case
           when ifnull(t.scheme,"") = "" then "NONE"
           else upper(trim(t.scheme))
        end as excluded_issuer,
        "" Merchant,
        "" Issuer     
 from `pdh_rd_data_navigator.isg_wpay_tran` t
 left join pdh_ref_ds.ref_key_value rk 
           on rk.attribute = "merchant-terminalid mapping"
          and upper(trim(rk.key)) = upper(trim(t.merchant_id)) 
  where upper(trim(transaction_type)) in ("PURCHASE","REFUND")
   and ifnull(transaction_approval_status,0) = 0
   and ifnull(transaction_amount,0) <> 0
   and ifnull(t.transaction_timestamp,0) <> 0
   ), 
-- ========================================================================================
--1. Take tran_type_iSelect proc_id_iss_b from `pdh_rd_data_navigator.gfs_pdh_txn_interface` 
--  Limit 10d and join with pdh_analytics_ds.ref_transaction_types and get 'abbr' column 
--2. Check if proc_id_iss_b='RED' then  
--       if(Upper(abbr)='PURCHASE','REDEMPTION',
--         if(upper(abbr)='REFUND','ACTIVATION',
--           if(upper(abbr)='BALANCE INQUIRY - SAVINGS', 'BALANCE INQUIRY', UPPER(abbr)))) 
--3. Check mti='1440' and append " REVERSAL" to abbr 
--4. join with pdh_analytics_ds.ref_tran_type_codes(tran_type_desc) on abbr and 
--  use settlement_amount_flag * spend_factor * transaction_total 
--5. approval_flag ='Y' 
--6. 2022-08-10 Multi[ly values by 0.01 to convert to dollars
-- ========================================================================================
   TCTran as (
      select 
        pdh_ref_ds.get_tran_uid(
                                "TC",
                                nullstr, 
                                nullstr,
                                0,
                                nullstr, 
                                nullstr,
                                dn.tran_uid,
                                nullstr,
                                nullstr, 
                                0) as tran_uid, --20230130 use function
        dn.dn_insert_tstamp as pdh_load_time,
        concat("NRT-",str_sysdate) file_name,
        DATETIME_TRUNC(CAST(dn.tstamp_trans AS DATETIME),second)  as transaction_timestamp,
        upper(trim(ifnull(ds.description,t.abbr))) as transactiontype,
        "TC" as tran_qualifier,
        Upper(left(trim(dn.net_term_id),5)) as store_id,
        dn.order_number as invoicenumber,
        abs(ifnull(dn.transaction_total,0)) * 
        tt.settlement_amount_flag * 
        tt.spend_factor * 0.01 as trans_amt,
        0 as discount_amt,
        case
           when ifnull(pdh_ref_ds.get_scheme(dn.proc_id_iss_b,
                                 dn.inst_id_recon_iss),"") = "" then "NONE"
           else upper(trim(pdh_ref_ds.get_scheme(dn.proc_id_iss_b,
                                 dn.inst_id_recon_iss)))
         end as excluded_issuer,
        "" Merchant,
        "" Issuer    
    from pdh_rd_data_navigator_views.vw_lv_gfs_pdh_txn_interface dn --20230209 minitaf->NTR view
    Join `pdh_analytics_ds.ref_transaction_types` t 
          on safe_cast(dn.tran_type_id as int64) = cast(t.dn_tran_code as int64)
    join `pdh_ref_ds.ref_response_code` r on dn.act_code = r.action_code
    join `pdh_analytics_ds.ref_tran_type_codes` tt
                 on Upper(trim(tt.tran_type_desc)) = 
                    pdh_ref_ds.get_calc_trans_type(dn.proc_id_iss_b, t.abbr ,dn.mti)
                and tt.settlement_amount_flag <> 0
                and tt.spend_factor <> 0
    left join pdh_ref_ds.ref_transaction_type_codes ds 
                      on trim(ds.code) = trim(dn.tran_type_id)
    WHERE upper(trim(r.approval_flag)) = 'Y'
     and ifnull(dn.transaction_total,0) <> 0 
                   ), 
tran_combined as (         select * from QCTran where ifnull(store_id,"") <> ""
                    Union all Select * from DPTran where ifnull(store_id,"") <> ""
                    union all Select * from LKTran where ifnull(store_id,"") <> ""
                    union all Select * from EDTran where ifnull(store_id,"") <> ""
                    union all Select * from CYTran where ifnull(store_id,"") <> ""
                    union all Select * from TCTran where ifnull(store_id,"") <> ""
                    ),
trn_seq as (select *, row_number() over(partition by tran_uid
                                        order by tran_uid, pdh_load_time) tran_uid_seq
               from tran_combined 
               where ifnull(tran_uid,"") <> ""
                ), -- 2022-09-09 eliminate null tran_uid-
-- duplicate tran_uid
trn as (
      select distinct * except(tran_uid_seq) 
      from trn_seq where tran_uid_seq = 1)
--
select datetime_trunc(current_datetime("Australia/Sydney"),SECOND) 
               as last_update_datetime,
       "Settlement Process" as last_updated_by,
       cast(null as date) as posting_date,
       cast(null as string) as setlmnt_result_file,
       trn.tran_uid,
       trn.file_name as filename,
       trn.transaction_timestamp,
       trn.store_id,
       upper(trim(rsd.division)) as division, 
       case 
          when upper(rsd.is_online) = "ONLINE" 
                  then  trim(trn.invoicenumber)
          else ""
       end as order_number,
       case left(trn.tran_uid,2)
          when "TC" then trn.trans_amt 
          when "ED" then trn.trans_amt
          else abs(trn.trans_amt) * tt.settlement_factor
       end as tran_settlement_amount,
       case left(trn.tran_uid,2)
          when "TC" then "1"
          when "ED" then "5"
          else tt.record_type
       end  as record_type,
       cast(null as string) as tlf_name,
       case left(trn.tran_uid,2)
          when "TC" then trn.discount_amt
          else abs(trn.discount_amt) * tt.settlement_factor * -1
       end as discount_amt
from  trn 
join `pdh_ref_ds.ref_store_details` rsd on upper(trim(rsd.store_id)) = trn.store_id
                                       and rsd.is_closed = False
join `pdh_ref_ds.ref_merchant_settlement_window` msw
      on msw.is_active = "Y"
     and msw.division =  upper(trim(rsd.division))
join `pdh_ref_ds.ref_str_to_sap_customermapping` scm
      on upper(trim(scm.wpay_store_number)) = upper(trim(rsd.store_id)) 
     and upper(ifnull(scm.active_flag,"N")) <> "N" 
     and ifnull(scm.wpay_company_code,"") <> "" --Split By Company : Stop empty company
join `pdh_ref_ds.ref_stlm_tlf_config` tlf 
        on upper(trim(tlf.division)) = msw.division
left join `pdh_ref_ds.ref_merchant_settlement_window_by_store` wbs --settle by store
        on wbs.division = msw.division 
       and wbs.store_id = trn.store_id
       and wbs.is_active = "Y"
left join `pdh_ref_ds.ref_transaction_type_settlement_factor` tt
           on tt.transaction_type = upper(trim(trn.transactiontype))
          and tt.tran_qualifier = case left(trn.tran_uid,2)
                                     when "QC" then
                                       concat( 
                                        case 
                                           when wbs.store_id is null or 
                                                msw.settle_by_store = "N" then msw.division_type
                                           else wbs.division_type
                                        end,
                                        case   --20230313
                                           when ifnull(scm.wpay_company_code,"") = "2025"
                                                and trn.Merchant = "COUNTDOWN"
                                                and trn.Issuer = "WPAY NEW ZEALAND LIMITED" then "WPAYNZ"
                                           else ""
                                        end)
                                     else trn.tran_qualifier
                                  end
left join `pdh_analytics_ds.stlm_standard_settlement_table` std
         on std.tran_uid = trn.tran_uid
where  std.tran_uid is null
  and  strpos(upper(trim(ifnull(scm.exclude__issuers,""))),trn.excluded_issuer) = 0
  and Case left(trn.tran_uid,2)
         when "LK" then ifnull(tlf.alipay_flag,"N")
         when "CY" then ifnull(tlf.cybsy_flag,"N") 
         when "QC" then ifnull(tlf.qc_flag,"N")    
         when "ED" then ifnull(tlf.edp_flag,"N")  
         when "DP" then ifnull(tlf.dpay_flag,"N")
         when "TC" then ifnull(tlf.minitaf_flag,"N")
         else "N"
      end = "Y"  
  and  ((left(trn.tran_uid,2) in ("ED","TC")) or tt.settlement_factor <> 0)
--7day settlement exclude settle_by_store = "Y" and not in windows by store 
--if not in window_by_store or settle_by_store = "N" then use window_by_div else use 
  and `pdh_ref_ds.trans_in_stlm_window`(msw.settle_by_store,
                                        wbs.store_id,
                                        trn.transaction_timestamp, 
                                        msw.last_execution_time,       
                                        wbs.last_execution_time, 
                                        msw.days_lookback,
                                        wbs.days_lookback,
                                        msw.earliest_date,
                                        wbs.earliest_date,
                                        msw.day_lag,
                                        wbs.day_lag,
                                        msw.settlement_cutoff,
                                        wbs.settlement_cutoff) = "Y";
                                    
--add control rec to specify QC detail is added to generic settlement table
set batch_end_mm_dd_hh_mm_ss = datetime_trunc(current_datetime("Australia/Sydney"),SECOND);
set (min_transaction_timestamp, max_transaction_timestamp) = 
           (select AS STRUCT datetime_trunc(min(transaction_timestamp),SECOND),
                             datetime_trunc(max(transaction_timestamp),SECOND)
            from `pdh_analytics_ds.stlm_standard_settlement_table`
            where setlmnt_result_file is null);
--
insert into pdh_analytics_ds.file_gen_details 
  select batch batch_number,
         cast(batch_end_mm_dd_hh_mm_ss as date) processing_date, 
         "qcdsettlement" merchant_name,
         true etl_complete, 
         false extract_wf_complete, 
         ifnull(min_transaction_timestamp,batch_end_mm_dd_hh_mm_ss) extract_start_datetime,
         ifnull(max_transaction_timestamp,batch_end_mm_dd_hh_mm_ss) extract_end_datetime,
         batch_end_mm_dd_hh_mm_ss file_date,
         cast(null as string)    remarks;
--
--End of Script
