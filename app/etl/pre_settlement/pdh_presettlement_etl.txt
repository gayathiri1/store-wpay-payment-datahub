--
--Start of Script
--load data to pre settlement table , Alipay,Digipay, QcPartner
--2022-10-17 Add 7day Settlement
--20221130 Use key_valu to fet missing store from ISG
--20221206 add function get_qc_store
--20220130 Use function get_trans_uid
--20230201 Replace minitaf(gfs_pdh_txn_interface) by NRT(lv_gfs_pdh_txn_interface)
--20230207 Use function pdh_ref_ds.get_calc_trans_type for EDW
--20230209 replace pdh_rd_data_navigator.lv_gfs_pdh_txn_interface 
--              by pdh_rd_data_navigator_views.vw_lv_gfs_pdh_txn_interface
--20230607 create empty file if no data
declare sys_date date default current_date("Australia/Sydney");
declare str_sysdate string default format_date("%Y-%m-%d",sys_date);
declare sys_date_1 string default format_date("%Y%m%d",sys_date  - 1);
declare batch_start_yyyy_mm_dd_hh_mm_ss datetime default 
            datetime_trunc(current_datetime("Australia/Sydney"),second);
declare syd_hour INT64 default (select extract(hour from current_time("Australia/Sydney")));
declare batch_end_yyyy_mm_dd_hh_mm_ss datetime;
declare nullstr string;
--
DECLARE inp_lookup STRING DEFAULT "PRE Settlement";
--declare interfaceidentifier string DEFAULT "OST_Deposit";
DECLARE batch string;
--
if (select count(msw.division)
    from `pdh_ref_ds.ref_merchant_settlement_window` msw
    join `pdh_ref_ds.ref_stlm_tlf_config` tlf
            on upper(trim(tlf.division)) = msw.division
           and  ifnull(tlf.prestlm_prefix,"") <> ""
    where msw.is_active = "Y"
      and msw.settlement_cycle = syd_hour
      and msw.division_type <> "PARTNER"
      ) = 0 then
    return;
end if;
--Get next Batch Number

CALL `pdh_ref_ds.get_nextbatch`(inp_lookup,batch);
if (ifnull(batch,"") in ("","NOContRec","UpdFailed"))  then
   return;
end if; 
--
--Replace old data
truncate table `pdh_analytics_ds.stlm_pre_settlement_table`;
truncate table `pdh_analytics_ds.stlm_pre_settlement_csv`;
insert into `pdh_analytics_ds.stlm_pre_settlement_table`
 with trqc as (
     Select
           pdh_ref_ds.get_tran_uid(
                                    "QC",
                                     qct.approvalcode, 
                                     qct.ReferenceNumber, 
                                     qct.BatchNumber, 
                                     nullstr,
                                     concat(CASE 
                                             when qct.transactiondate is null then "19000101"
                                            else format_date("%Y%m%d",qct.transactiondate)
                                            End,"T",
                                            CASE 
                                             when qct.transactiontime is null then "000000"
                                             else format_time("%H%M%S",qct.transactiontime)
                                            end),
                                      nullstr,
                                      nullstr, 
                                      nullstr, 
                                      0) as tran_uid,
           cast(concat(case 
                           when qct.transactiondate is null then "1900-01-01"
                           else format_date("%Y-%m-%d",qct.transactiondate)
                       end, "T",
                       case 
                           when qct.transactiontime is null then "00:00:00"
                           else format_time("%H:%M:%S",qct.transactiontime)
                       end) as datetime) as Trans_datetime,
           qct.file_name,
           pdh_ref_ds.get_qc_store(qct.outletcode,qct.Issuer,qct.outlet,qct.POSName) store_id,
           upper(trim(qct.transactiontype)) as transactiontype,
           "" as tran_qualifier,
           ifnull(qct.amount_transacting_merchants_currency_or_points,0) tran_amount,
           0 as discount_amt,
           "NONE" as excluded_issuer     
      from `pdh_rd_quickcilver.qc_detail_transactions` qct
      left Join `pdh_ref_ds.ref_merchant_settlement_window` mw
         on mw.division_type = "PARTNER"
        and mw.division = upper(trim(qct.Merchant))
      where ifnull(mw.division,"") = ""
        and upper(trim(qct.transactionstatus)) =  "SUCCESS"  
        ),
--
trdp as (
       Select pdh_ref_ds.get_tran_uid(
                         "DP",
                         nullstr, 
                         trim(txnRef), 
                         0, 
                         nullstr,
                         nullstr,
                         nullstr,
                         nullstr, 
                         nullstr, 
                         0) as tran_uid,
              case 
                 when txnTime is null then cast("1900-01-01T00:00:00" as datetime)
                 else datetime_trunc(datetime(txnTime), second)
              end as Trans_datetime,
              file_name,
              upper(left(trim(terminal_id),5)) store_id,
              upper(trim(transactiontype)) as transactiontype,
              case (length(txnRef) - length(replace(txnRef,".","")))
                when 0 then "WEX"
                when 2 then "QC"
                else "NAP"
             end as tran_qualifier, 
             ifnull(amount,0) tran_amount,
             0 as discount_amt,
             "NONE" as excluded_issuer 
    from `pdh_rd_data_navigator.digitalpay_gc_txns`
    where transactiontype = "PURCHASE" 
      and MerchantName = "Everyday Pay"
      and ifnull(responseCodeContainer,"") = "00"
      and ifnull(trim(txnRef),"") <> ""
      and (length(txnRef) - length(replace(txnRef,".",""))) in (0,2)
  ),
  trlk as (
      Select pdh_ref_ds.get_tran_uid(  "LK",
                                     nullstr, 
                                     ResRef,
                                     0, 
                                     nullstr,
                                     concat(CASE 
                                             when ReqDate is null then "19000101"
                                            else format_date("%Y%m%d",ReqDate)
                                            End,"T",
                                            CASE 
                                             when ReqTime is null then "000000"
                                             else format_time("%H%M%S",ReqTime)
                                            end),
                                      nullstr,
                                      nullstr, 
                                      nullstr, 
                                      0)  as tran_uid,
                    
             cast(Concat(case 
                            when ReqDate is null then "1900-01-01"
                            else format_date("%Y-%m-%d",ReqDate)
                         end,"T",
                         case 
                            when ReqTime is null then "00:00:00"
                            else format_time("%H:%M:%S",ReqTime)
                         end) as datetime)  as Trans_datetime,
             file_name,
             upper(trim(ReqStore)) as store_id,
             upper(trim(ReqType)) as transactiontype,
             "" as tran_qualifier,
             ifnull(ReqAmt,0) tran_amount,
             0 as discount_amt,
             "NONE" as excluded_issuer  
      from `pdh_rd_apm.alipay_linkly`
      where ifnull(ReqStore,"NULL") <> "NULL"
      and ifnull(ReqAmt,0) <> 0
      and ResRT =    "TRANSACTION APPROVED"
      and ReqMT in (200) 
      and upper(trim(ReqType)) in ("N","N-","P","R","30001000","30002000") 
      and ReqDate is not NULL
      and OrigData = "Alipay"),
   tred as (
       Select pdh_ref_ds.get_tran_uid(
                                "ED",
                                nullstr, 
                                dn.retrieval_ref_num,
                                0, 
                                dn.pan,
                                format_datetime("%Y%m%dT%H%M%S",datetime(dn.local_timestamp)),
                                nullstr,
                                nullstr, 
                                nullstr, 
                                0) as tran_uid,
              datetime_trunc(datetime(dn.local_timestamp), second) as Trans_datetime,
              dn.file_name,
              upper(left(trim(card_acceptor_terminal_id),5)) store_id,
              pdh_ref_ds.get_calc_trans_type("", t.abbr ,safe_cast(dn.mti as string))
                      as transactiontype,  --20230207 use function
              "EDP" as tran_qualifier, 
              abs(ifnull(dn.amount_txn,0)) *
                 tt.settlement_amount_flag *
                 tt.spend_factor * 0.01 as  tran_amount,
              0 as discount_amt,
              "NONE" as excluded_issuer 
    from `pdh_rd_data_navigator.edwp_txnact` dn
    Join `pdh_analytics_ds.ref_transaction_types` t 
          on safe_cast(dn.txn_type_indicator as int64) = safe_cast(t.dn_tran_code as int64)
    join `pdh_ref_ds.ref_response_code` r on safe_cast(dn.action_code  as int64)
                                             = safe_cast(r.action_code as int64)
    join `pdh_analytics_ds.ref_tran_type_codes` tt
                 on Upper(trim(tt.tran_type_desc)) = 
                    pdh_ref_ds.get_calc_trans_type("", t.abbr ,safe_cast(dn.mti as string))
                and tt.settlement_amount_flag <> 0
                and tt.spend_factor <> 0
    where dn.txn_disposition = 1
      and dn.local_timestamp is not NULL
      and ifnull(dn.amount_txn,0)  <> 0
   --   and right(cast(txn_type_indicator as string),4) in ("1000","2000")
  ),
  trcy as (
       Select pdh_ref_ds.get_tran_uid(
                                "CY",
                                nullstr, 
                                nullstr,
                                0,
                                nullstr,
                                concat(
                                left(rpad(cast(t.transaction_timestamp as string),14,"0"),8),"T",
                               right(rpad(cast(t.transaction_timestamp as string),14,"0"),6)),
                                cast(t.tran_uid as string),
                                nullstr, 
                                t.transaction_type, 
                                t.transaction_amount) as tran_uid,
             cast(Concat(left(rpad(cast(t.transaction_timestamp as string),14,"0"),4), "-",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),5,2), "-",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),7,2), "T",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),9,2),":",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),11,2),":",
               substring(rpad(cast(t.transaction_timestamp as string),14,"0"),13,2)
              ) as datetime) as Trans_datetime, 
              t.file_name,
              case ifnull(t.terminal_id,"")
                 when "" then upper(left(trim(rk.value),5))
                 else upper(left(trim(t.terminal_id),5))
              end  as store_id,
              upper(trim(t.transaction_type)) as transactiontype,
              "CY" as tran_qualifier, 
              ifnull(t.transaction_amount,0) * 0.01 as  tran_amount,
              0 as discount_amt,
              case 
                 when ifnull(t.scheme,"") = "" then "NONE"
                 else upper(trim(t.scheme))
              end excluded_issuer
      from `pdh_rd_data_navigator.isg_wpay_tran` t
      left join pdh_ref_ds.ref_key_value rk 
           on rk.attribute = "merchant-terminalid mapping"
          and upper(trim(rk.key)) = upper(trim(t.merchant_id))
      where upper(trim(t.transaction_type)) in ("PURCHASE","REFUND")
      and ifnull(t.transaction_approval_status,0) = 0
      and ifnull(t.transaction_amount,0) <> 0
      and ifnull(t.transaction_timestamp,0) <> 0
   ),  
  trtc as (
       Select pdh_ref_ds.get_tran_uid(
                                "TC",
                                nullstr, 
                                nullstr,
                                0,
                                nullstr, 
                                nullstr,
                                dn.tran_uid,
                                nullstr,
                                nullstr, 
                                0) as tran_uid,
              DATETIME_TRUNC(CAST(dn.tstamp_trans AS DATETIME),second) as Trans_datetime, 
              concat("NRT-",str_sysdate) file_name,
              Upper(left(trim(dn.net_term_id),5)) as store_id,
              upper(trim(ifnull(ds.description,t.abbr))) as transactiontype,
              "TC" as tran_qualifier, 
              abs(ifnull(dn.transaction_total,0)) * 
                 tt.settlement_amount_flag * 
                 tt.spend_factor * 0.01 as  tran_amount,
              0 as discount_amt,
              case
                 when ifnull(pdh_ref_ds.get_scheme(dn.proc_id_iss_b,
                                 dn.inst_id_recon_iss),"") = "" then "NONE"
                 else upper(trim(pdh_ref_ds.get_scheme(dn.proc_id_iss_b,
                                 dn.inst_id_recon_iss)))
         end as excluded_issuer
    from pdh_rd_data_navigator_views.vw_lv_gfs_pdh_txn_interface dn  
    Join `pdh_analytics_ds.ref_transaction_types` t 
          on safe_cast(dn.tran_type_id as int64) = cast(t.dn_tran_code as int64)
    join `pdh_ref_ds.ref_response_code` r on dn.act_code = r.action_code
    join `pdh_analytics_ds.ref_tran_type_codes` tt
                 on Upper(trim(tt.tran_type_desc)) = 
                    pdh_ref_ds.get_calc_trans_type(dn.proc_id_iss_b, t.abbr ,dn.mti)
                and tt.settlement_amount_flag <> 0
                and tt.spend_factor <> 0
   left join pdh_ref_ds.ref_transaction_type_codes ds 
                      on trim(ds.code) = trim(dn.tran_type_id)    
   WHERE upper(trim(r.approval_flag)) = 'Y'
     and (ifnull(dn.transaction_total,0) <> 0 or 
          ifnull(dn.surcharge_amount,0) <> 0)
       ),                 
  tran_combined as (          select * from trqc where ifnull(store_id,"") <> ""
                    Union all Select * from trdp where ifnull(store_id,"") <> ""
                    union all Select * from trlk where ifnull(store_id,"") <> ""
                    union all Select * from tred where ifnull(store_id,"") <> ""
                    union all Select * from trcy where ifnull(store_id,"") <> ""
                    union all Select * from trtc where ifnull(store_id,"") <> ""
                    ),
  trn_seq as (select *, row_number() over(partition by tran_uid) tran_uid_seq
             from tran_combined)
  select trn.tran_uid,
           upper(trim(ifNull(rsd.state,""))) state,
           concat(upper(trim(ifNull(rsd.site_name,""))),
                   case
                     when ifNull(rsd.site_name,"") = "" or
                          ifNull(rsd.suburb,"") = "" then ""
                     else ","
                   end,
                   upper(trim(ifNull(rsd.suburb,"")))) as business_area,
           upper(trim(rsd.division)) as division, 
           trn.store_id,
           tt.record_type as record_type,
           trn.file_name filename,
           trn.Trans_datetime as transaction_time,
           case upper(rsd.is_online)
              when "ONLINE" then "Y"
              Else "N"
           end as eft_flag,
           case left(trn.tran_uid,2)
             when "TC" then trn.tran_amount
             else abs(trn.tran_amount)  * tt.settlement_factor
           end  as amount,
           case left(trn.tran_uid,2)
             when "TC" then trn.discount_amt 
             else abs(trn.discount_amt) * tt.settlement_factor * -1
           end as discount_amt,
           batch_start_yyyy_mm_dd_hh_mm_ss as last_update_datetime,	
           "Pre Settlement" as last_updated_by
    from (Select * from trn_seq 
           where tran_uid not in (select tran_uid from trn_seq 
                                  where tran_uid_seq = 2)  
         ) trn
    join `pdh_ref_ds.ref_store_details` rsd 
         on upper(trim(rsd.store_id)) = trn.store_id
          and rsd.is_closed = False
    join `pdh_ref_ds.ref_merchant_settlement_window` msw
         on msw.is_active = "Y"
        and msw.division = upper(trim(rsd.division))
    join `pdh_ref_ds.ref_stlm_tlf_config` tlf 
         on upper(trim(tlf.division)) = upper(trim(rsd.division))
        and ifnull(tlf.prestlm_prefix,"") <> ""
    left join `pdh_ref_ds.ref_transaction_type_settlement_factor` tt
           on tt.settlement_factor <> 0
          and tt.transaction_type = trn.transactiontype
          and tt.tran_qualifier = case left(trn.tran_uid,2)
                                     when "QC" then msw.division_type
                                     else trn.tran_qualifier
                                  end
    join `pdh_ref_ds.ref_str_to_sap_customermapping` scm
      on upper(trim(scm.wpay_store_number)) = upper(trim(rsd.store_id)) 
      and upper(ifnull(scm.active_flag,"")) <>  "N" 
      and ifnull(scm.wpay_company_code,"") <> ""
    left join `pdh_analytics_ds.stlm_standard_settlement_table` std
         on std.tran_uid = trn.tran_uid
    left join `pdh_ref_ds.ref_merchant_settlement_window_by_store` wbs
         on wbs.is_active = "Y"
        and wbs.division = upper(trim(rsd.division))
        and wbs.store_id = trn.store_id
    where  (left(trn.tran_uid,2) = "TC" or ifnull(tt.settlement_factor,0) <> 0)
      and strpos(upper(trim(ifnull(scm.exclude__issuers,""))),trn.excluded_issuer) = 0
      and  std.tran_uid is null
      and  (case left(trn.tran_uid,2)
              when "LK" then ifnull(tlf.alipay_flag,"N")
              when "CY" then ifnull(tlf.cybsy_flag,"N") 
              when "QC" then ifnull(tlf.qc_flag,"N") 
              when "ED" then ifnull(tlf.edp_flag,"N")
              when "DP" then ifnull(tlf.dpay_flag,"N")
              when "TC" then ifnull(tlf.minitaf_flag,"N")
              else "N"
           end) = "Y"
      and msw.settle_by_store in ("Y","P","N") 
      and case msw.settle_by_store
             when "Y" then ifnull(wbs.store_id,"")
             else msw.settle_by_store
          end  <> ""
      and  trn.Trans_datetime >
                (case
                  when wbs.store_id is null or msw.settle_by_store = "N" then
                    case 
                      when msw.last_execution_time is null 
                            then cast("1900-01-01T00:00:00" as datetime)
                     else cast(cast(msw.last_execution_time as date) + 
                               msw.days_lookback as datetime)
                    end
                 else
                   case 
                      when wbs.last_execution_time is null 
                             then cast("1900-01-01T00:00:00" as datetime)
                      else cast(cast(wbs.last_execution_time as date) + 
                                wbs.days_lookback as datetime)
                   end
                 end
                 ) 
          and  trn.Trans_datetime >= 
                   (case
                      when wbs.store_id is null or msw.settle_by_store = "N" then
                                 cast(msw.earliest_date as datetime)
                      else cast(wbs.earliest_date as datetime)
                   end)
      and   trn.Trans_datetime
            < cast(concat(format_date("%Y-%m-%d",sys_date), "T00:00:00") as datetime);
--
set batch_end_yyyy_mm_dd_hh_mm_ss = datetime_trunc(current_datetime("Australia/Sydney"),second);
--Allways Create CSV Input Header
Insert into `pdh_analytics_ds.stlm_pre_settlement_csv`
   select distinct 
          concat(prestlm_prefix,"_Presettlement_APM_",sys_date_1) as file_name,
          prestlm_prefix as merchant,
          "H" record_type,
          "store_id"	store_id,
          "amount_in_dollar" amount_in_dollar
   FROM `pdh_ref_ds.ref_stlm_tlf_config` 
   where ifnull(prestlm_prefix,"") <> "";
--
--Create CSV Input Details if exists
Insert into `pdh_analytics_ds.stlm_pre_settlement_csv`
   with DET as (
            select 
                 concat(tlf.prestlm_prefix,"_Presettlement_APM_",sys_date_1) as file_name,
                 tlf.prestlm_prefix as merchant,
                 pst.store_id,
                 pst.amount + pst.discount_amt as amount
            from `pdh_analytics_ds.stlm_pre_settlement_table` pst
            join `pdh_ref_ds.ref_stlm_tlf_config` tlf
                 on upper(trim(tlf.division)) = pst.division
            where ifnull(tlf.prestlm_prefix,"") <> ""
               ),
     Summary as (select file_name,merchant,store_id,round(sum(amount),2)  as amount
                 from DET group by file_name,merchant,store_id)
     select file_name,
            merchant,
            "D" as record_type,
            store_id,
            case 
               when mod(amount * 100,100) = 0  then concat(cast(amount as string) , ".00")
               when mod(amount * 100,10)  = 0  then concat(cast(amount as string) , "0")
               else cast(amount as string)
            end  amount_in_dollar
     from Summary
     order by file_name,merchant,store_id;
          --
     --Alwys Create CSV Input Trailor
     Insert into pdh_analytics_ds.stlm_pre_settlement_csv
          (file_name,merchant,record_type,store_id)
          select file_name,merchant,"T" record_type , cast(count(*) - 1 as string)
          from `pdh_analytics_ds.stlm_pre_settlement_csv`
          group  by file_name,merchant;
      --
      --Add CSV Control
      insert into pdh_analytics_ds.file_gen_details 
         select  batch,
                 cast(batch_end_yyyy_mm_dd_hh_mm_ss as date), 
                 lower(concat(tlf.prestlm_prefix,"presettle")),
                 true,
                 null, 
                 ifnull(min(pst.transaction_time),datetime_add(batch_end_yyyy_mm_dd_hh_mm_ss,INTERVAL 0 second)),
                 ifnull(max(pst.transaction_time),datetime_add(batch_end_yyyy_mm_dd_hh_mm_ss,INTERVAL 0 second)), 
                 ifnull(max(pst.transaction_time),datetime_add(batch_end_yyyy_mm_dd_hh_mm_ss,INTERVAL -1 day)),
                 null
        from `pdh_ref_ds.ref_stlm_tlf_config` tlf
        left join `pdh_analytics_ds.stlm_pre_settlement_table` pst
               on upper(trim(tlf.division)) = pst.division
        where ifnull(tlf.prestlm_prefix,"") <> ""
        group by tlf.prestlm_prefix;
--End of Script
--