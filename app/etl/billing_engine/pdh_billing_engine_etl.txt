DECLARE start_date DATE;
DECLARE end_date DATE DEFAULT Date_sub(current_date('+10:00'),Interval 3 day);
DECLARE data_req_date DATE DEFAULT Date_sub(current_date('+10:00'),Interval 2 day);

DECLARE gfs_last DATE;
DECLARE dp_last DATE;
DECLARE tfl6_last DATE;
DECLARE t1g0_last DATE;
DECLARE visa_last DATE;
DECLARE eftpos_last DATE;

SET gfs_last = (SELECT MAX(CAST(tstamp_trans AS DATE)) FROM `pdh_rd_data_navigator.gfs_pdh_txn_interface`);
SET dp_last = (SELECT MAX(CAST(txnTime AS DATE)) FROM `pdh_rd_data_navigator.digitalpay_gc_txns`);
SET tfl6_last = (SELECT MAX(file_date) FROM `pdh_rd_data_navigator.mastercard_TFL6`);
SET t1g0_last = (SELECT MAX(file_date) FROM `pdh_rd_data_navigator.mastercard_T1G0`);
SET visa_last = (SELECT MAX(file_date) FROM `pdh_rd_data_navigator.gfs_aux_visa`);
SET eftpos_last = (SELECT MAX(file_date) FROM `pdh_rd_data_navigator.gfs_aux_eftpos`);

IF LEAST(gfs_last, dp_last, tfl6_last, t1g0_last, visa_last, eftpos_last) < data_req_date THEN
    SELECT ERROR("Raw billing data is not up to date");
END IF;

SET start_date = (SELECT MAX(switch_tran_date) + 1 FROM `pdh_analytics_ds.tbl_fees_all`);

IF start_date > end_date THEN
    SELECT ERROR("Start date is greater than end date");
END IF;

-- MASTERCARD JOIN QUERY
create or replace table `pdh_staging_ds.gfs_aux_mastercard` as
with clr as
(
    Select concat(substr(pan,1,6),"~~~~~~~",substr(pan,14,3)) pan,
    cast(amount_txn as int64)/100 amount_txn,
    trim(card_acceptor_terminal_id) card_acceptor_terminal_id,
    cast(extended_interchange_amount_fee as int64)/1000000 extended_interchange_amount_fee,
    cast(amount_txn_fee as int64)/100 amount_txn_fee,
    datetime_local_txn,
    cast(substr(datetime_local_txn,3,4) as int64) local_transaction_date,
    cast(substr(datetime_local_txn,7,6) as int64) local_time,
    approval_code,
    file_name,
    file_date t1g0_file_date,
    mssg_reversal_indicator
     from `pdh_rd_data_navigator.mastercard_T1G0`
     where trim(card_acceptor_terminal_id)<>''
    and file_date > "2021-07-04"
),
tlf as 
(
    Select 
        pan,
        cast(transaction_amount as int64)/100 transaction_amount,
        trim(card_acceptor_terminal_id) card_acceptor_terminal_id,
        cast(local_transaction_date as int64 )local_transaction_date,
        cast(time_local as int64) local_time,
        trim(auth_id_response) auth_id_response,
        system_trace_audit system_trace_audit_num,
        retrieval_reference_number,
        file_date tfl6_file_date,
    from `pdh_rd_data_navigator.mastercard_TFL6` where
        trim(clearing_indicator)='Y'
          and file_date > "2021-07-04"
    GROUP BY 1,2,3,4,5,6,7,8,9
    
),
firstlvl AS (
    Select 
    c.t1g0_file_date,
    t.tfl6_file_date,
    c.pan,
	c.amount_txn,
	c.card_acceptor_terminal_id,
	c.extended_interchange_amount_fee,
    c.amount_txn_fee,
    c.datetime_local_txn,
	c.approval_code,
	t.system_trace_audit_num,
	t.retrieval_reference_number,
	c.mssg_reversal_indicator
    from clr c LEFT join tlf t on c.pan = t.pan and c.amount_txn=t.transaction_amount and c.card_acceptor_terminal_id =t.card_acceptor_terminal_id 
    and c.local_transaction_date=t.local_transaction_date and c.local_time = t.local_time-- and t.auth_id_response = c.approval_code
),
secondlvl AS (

    Select 
    firstlvl.t1g0_file_date,
    firstlvl.tfl6_file_date,
    firstlvl.pan,
	firstlvl.amount_txn,
	firstlvl.card_acceptor_terminal_id,
	firstlvl.extended_interchange_amount_fee,
    firstlvl.amount_txn_fee,
    firstlvl.datetime_local_txn,
	firstlvl.approval_code,
	t.system_trace_audit_num,
	t.retrieval_reference_number,
	firstlvl.mssg_reversal_indicator
    from firstlvl LEFT join tlf t on firstlvl.pan = t.pan and firstlvl.amount_txn=t.transaction_amount and firstlvl.card_acceptor_terminal_id =t.card_acceptor_terminal_id 
    and cast(substr(firstlvl.datetime_local_txn,3,4) as int64)=t.local_transaction_date and substr(firstlvl.datetime_local_txn,7,4) = LEFT(FORMAT('%06d', CAST(t.local_time AS int64)), 4)
    WHERE firstlvl.system_trace_audit_num IS NULL
)
SELECT * FROM firstlvl WHERE system_trace_audit_num IS NOT NULL
UNION ALL 
SELECT * FROM secondlvl WHERE system_trace_audit_num IS NOT NULL;

IF (SELECT MAX(t1g0_file_date) FROM `pdh_staging_ds.gfs_aux_mastercard`) < data_req_date THEN
    SELECT ERROR("Mastercard scheme data not up to date");
END IF;

-- BILLING ACTUAL
create or replace table `pdh_staging_ds.tbl_temp_billing_all` as
select 
CAST(dn.tstamp_trans AS DATE) switch_tran_date,
dn.tran_uid,
dn.tstamp_trans,
dn.tstamp_local,
dn.masked_pan,
dn.date_recon_acq,
dn.net_term_id,
dn.rpt_lvl_id_b,
dn.mti,
dn.tran_type_id,
dn.amt_recon_net,
dn.act_code,
dn.response_code,
dn.account_type,
dn.transaction_total,
dn.purchase_total,
dn.cashout_total,
dn.retrieval_ref_no,
dn.stan,
dn.original_stan,
dn.proc_id_acq_b,
dn.inst_id_recn_acq_b,
dn.card_acpt_name_loc,
dn.proc_id_iss_b,
dn.issuer_institution_id,
dn.inst_id_recon_iss_name,
dn.card_owner,
dn.pos_crd_dat_in_mod,
dn.pos_crdhldr_presnt,
dn.order_number,
dn.approval_code,
dn.adtnl_response_data,
dn.card_acpt_id,
dn.merchant_store_id,
dn.dom_int_ind,
dn.card_type,
dn.card_subtype,
dn.bin_product_code,
dn.scheme,
trim(t.tran_type) tran_type_desc,
trim(t.abbr) tran_type_abbr,
IFNULL(trim(r.approval_flag), "N") approval_flag,
case trim(proc_id_iss_b) 
when 'AMEX' then 'AMEX'
when 'EHB' then 'EFTPOS'
when 'FDF' then 'FUEL CARDS'
when 'FDI' then
	if(trim(dn.issuer_institution_id) in ('060092425', '060092426', '060092427', '060092428'), 'UPI', 'DINERS')
when 'RED' then 'GIFT CARDS'
when 'ANZ' then
	if(trim(dn.issuer_institution_id) ='056025433' or trim(dn.issuer_institution_id) = '056025434'or trim(dn.issuer_institution_id) =  '056025435'
		or trim(dn.issuer_institution_id) = '056025436'or trim(dn.issuer_institution_id) =  '056025437'
		or trim(dn.issuer_institution_id) = '056025438'or trim(dn.issuer_institution_id) =  '056025439' 
		or trim(dn.issuer_institution_id) = '056025440'or trim(dn.issuer_institution_id) =  '83990554161'
		or trim(dn.issuer_institution_id) = '83990554162'or trim(dn.issuer_institution_id) =  '83990554163'
		or trim(dn.issuer_institution_id) = '83990554164',  'UPI' ,
	if(t.account='CRD' ,'CRD', if(t.account='SAV' or t.account='CHQ','EFTPOS','DBT')) )
when 'FIS' then 'CRD'
when 'VDCS' then if(t.account='CRD' ,'VISA', if(t.account='SAV' or t.account='CHQ','EFTPOS','DBT'))
when 'MC' then if(t.account='CRD' ,'MASTERCARD', if(t.account='SAV' or t.account='CHQ','EFTPOS','DBT'))
else proc_id_iss_b
end link_route,
i.merchant_group,
s.ratecard_group rate_group,
c.cur_symbol currency_code
from `pdh_rd_data_navigator.gfs_pdh_txn_interface` dn  
Left Join `pdh_ref_ds.ref_transaction_types` t on safe_cast(dn.tran_type_id as int64) = cast(t.dn_tran_code as int64)
left join `pdh_ref_ds.ref_response_code` r on dn.act_code = r.action_code
JOIN `pdh_ref_ds.ref_inst_id_config` i on dn.inst_id_recn_acq_b = i.merchant_institution_id AND i.active = 'TRUE'
LEFT JOIN `pdh_ref_ds.ref_store_details` s ON LEFT(dn.net_term_id, 5) = s.store_id 
LEFT JOIN `pdh_ref_ds.ref_currency_code` c ON dn.currency_code = c.currency_code
WHERE (i.merchant_group IN ("ENDEAVOUR", "EG FUEL", "EG FUEL APAC")
OR i.merchant_type = 'SMALL')
AND cast(dn.tstamp_trans as date) >= start_date AND cast(dn.tstamp_trans as date) <= end_date
AND s.is_closed = FALSE
;

-------------------------------------------------------------------------------------------
-- DIGITAL PAY

insert into `pdh_staging_ds.tbl_temp_billing_all`
	Select 
	CAST(txnTime AS DATE) switch_tran_date,
    'DP' tran_uid,
	txnTime tstamp_trans,
	null tstamp_local,
	CAST(bin AS STRING) masked_pan,
    CAST(txnTime AS DATE) date_recon_acq,
    CONCAT(CASE WHEN MerchantName = 'WowOnline' then 'W8843'
        WHEN MerchantName = 'BWSOnline' then 'W6802'
        WHEN MerchantName = 'DanMurphysOnline' then 'W8305'
        WHEN MerchantName = 'ScanGoSuper' then 'W6134'
        WHEN MerchantName = 'Langtons' then 'WC500'
        ELSE null
    END, "000") net_term_id,
    Concat('01',CASE WHEN MerchantName = 'WowOnline' then 'W8843'
        WHEN MerchantName = 'BWSOnline' then 'W6802'
        WHEN MerchantName = 'DanMurphysOnline' then 'W8305'
        WHEN MerchantName = 'ScanGoSuper' then 'W6134'
        WHEN MerchantName = 'Langtons' then 'WC500'
        ELSE null
    END) rpt_lvl_id_b,
    null as mti,
    null tran_type_id,
    CAST(amount*100 AS NUMERIC) amt_recon_net,
    null act_code,
    null response_code,
    null account_type,
    CAST(amount*100 AS NUMERIC) transaction_total,
    CAST(amount*100 AS NUMERIC) purchase_total,
    0 cashout_total,
    null retrieval_ref_no,
    null stan,
    null original_stan,
    null proc_id_acq_b,
    null inst_id_recn_acq_b,
    MerchantName card_acpt_name_loc,
    null proc_id_iss_b,
    null issuer_institution_id,
	null inst_id_recon_iss_name,
    null card_owner,
    null pos_crd_dat_in_mod,
    '0' pos_crdhldr_presnt,
    null order_number,
    null approval_code,
    null adtnl_response_data,
    null card_acpt_id,
    null merchant_store_id,
    null as dom_int_ind,
    'D' as card_type,
    null card_subtype,
    null bin_product_code,
    schemeName scheme, 
    trim(transactionType) as tran_type_desc,
    trim(transactionType) as abbr,
    case responseCode
		when '00' then 'Y'
		else 'N'
	end as approval_flag,
    case schemeName 
        WHEN 'GIFT_CARD' THEN 'GIFT CARDS' 
        WHEN 'PAYPAL' THEN 'PAYPAL' 
    end link_route,
    i.merchant_group,
    s.ratecard_group rate_group,
	NULL currency_code
    FROM `pdh_rd_data_navigator.digitalpay_gc_txns` d
JOIN (SELECT DISTINCT dpay_gc_group, merchant_group, rate_group FROM `pdh_ref_ds.ref_inst_id_config` WHERE (merchant_group IN ("ENDEAVOUR", "EG FUEL", "EG FUEL APAC") OR merchant_type = 'SMALL') AND active = 'TRUE') i
    ON TRIM(d.MerchantName) = i.dpay_gc_group
	LEFT JOIN `pdh_ref_ds.ref_store_details` s ON 
    (CASE WHEN MerchantName = 'WowOnline' then 'W8843'
        WHEN MerchantName = 'BWSOnline' then 'W6802'
        WHEN MerchantName = 'DanMurphysOnline' then 'W8305'
        WHEN MerchantName = 'ScanGoSuper' then 'W6134'
        WHEN MerchantName = 'Langtons' then 'WC500'
        ELSE null
    END) = s.store_id 
    where schemeName IN ('GIFT_CARD', 'PAYPAL')
	and CAST(txnTime AS DATE) >= start_date and CAST(txnTime AS DATE) <= end_date
    AND d.responseCode = '00'
    AND trim(transactionType) <> "TOKENISE"
	AND (LENGTH(txnRef)-LENGTH(REPLACE(txnRef,".",""))) <> 2
	AND s.is_closed = FALSE;

-------------------------------------------------------------------------------------------
-- QUIKCILVER

insert into `pdh_staging_ds.tbl_temp_billing_all`
Select 
	CAST(TransactionDate AS DATE) switch_tran_date,
    'QC' tran_uid,
	cast(concat(TransactionDate,' ',TransactionTime) as TIMESTAMP) tstamp_trans,
	null tstamp_local,
	CAST(CardNumber AS STRING) masked_pan,  -- MASK PAN
    CAST(TransactionDate AS DATE) date_recon_acq,
    POSName net_term_id,  -- Add conditions where POSNAME Is not Store number
    Concat('01',OutletCode) rpt_lvl_id_b, -- Add conditions where POSNAME Is not Store number
    null as mti,
    null tran_type_id,
    CAST(Amount_Transacting_Merchants_Currency_Or_Points*100 AS NUMERIC) amt_recon_net,
    null act_code,
    null response_code,
    null account_type,
    CAST(Amount_Transacting_Merchants_Currency_Or_Points*100 AS NUMERIC) transaction_total,
    CAST(Amount_Transacting_Merchants_Currency_Or_Points*100 AS NUMERIC) purchase_total,
    0 cashout_total,
    null retrieval_ref_no,
    null stan,
    null original_stan,
    null proc_id_acq_b,
    null inst_id_recn_acq_b,
    null card_acpt_name_loc,
    null proc_id_iss_b,
    null issuer_institution_id,
	null inst_id_recon_iss_name,
    null card_owner,
    case trim(CardEntryMode)
		When 'Swiped' Then '2'
		When 'Manual' Then '6' 
		Else ''
    End as pos_crd_dat_in_mod, --CARD ENTRY MODE CODES
    null pos_crdhldr_presnt,
    InvoiceNumber order_number,
    null approval_code,
    null adtnl_response_data,
    null card_acpt_id,
    null merchant_store_id,
    null as dom_int_ind,
    'DEBIT' as card_type,
    null card_subtype,
    null bin_product_code,
    'GIFT_CARD' scheme, 
    trim(transactionType) as tran_type_desc,
    Case trim(transactionType)
		WHEN 'GIFT CARD REDEEM' THEN 'REDEMPTION'
		WHEN 'GIFT CARD CANCEL REDEEM' THEN 'REDEMPTION REVERSAL'
		WHEN 'GIFT CARD DEACTIVATE' THEN 'DEACTIVATION'
		WHEN 'GIFT CARD ACTIVATE' THEN 'ACTIVATION'
		WHEN 'REACTIVATE' THEN 'REACTIVATION'
		WHEN 'GIFT CARD CANCEL ACTIVATE' THEN 'ACTIVATION REVERSAL'
		WHEN 'GIFT CARD REISSUE' THEN 'ACTIVATION'
		WHEN 'RESET CARD PIN' THEN 'RESET CARD PIN'
		WHEN 'GIFT CARD RELOAD' THEN 'ACTIVATION'
		else ''
	End
	as abbr,
    case TransactionStatus
		when 'SUCCESS' then 'Y'
		when 'CANCELLED' then 'N'
		else 'N'
	end as approval_flag,
	'GIFT CARDS' link_route,
	case trim(upper(Company))
		when 'EG FUEL' THEN 'EG FUEL'
		when 'EG APAC VENTURE 1' THEN 'EG FUEL APAC'
		When 'ENDEAVOUR' THEN 'ENDEAVOUR'
		Else ''
	end	merchant_group, -- NEED TO CHECK WHAT THIS IS USED FOR
    s.ratecard_group rate_group,
	NULL currency_code
    FROM `pdh_rd_quickcilver.qc_detail_transactions` d
	LEFT JOIN `pdh_ref_ds.ref_store_details` s ON 
    (
        case
            when ifnull(d.outletcode,"") <>  "" then upper(trim(d.outletcode))
            when (upper(trim(d.descriptive_outlet_name)) = "SAP HYBRIS" and
                upper(left(trim(d.issuer),20))  = "WOOLWORTHS GROUP LTD") then "W5975"
            else null 
        end
    ) = s.store_id 
	join `pdh_ref_ds.ref_merchant_settlement_window` msw
    on msw.is_active = "Y"
    and msw.division = upper(trim(s.division))
    where cast(TransactionDate as Date) >= start_date 
	and cast(TransactionDate as Date) <= end_date
    AND trim(transactionType) <> "RESET CARD PIN"
	AND s.brand <> "COUNTDOWN"
	AND s.is_closed = FALSE;

-------------------------------------------------------------------------------------------

IF (SELECT COUNT(*) FROM `pdh_staging_ds.tbl_temp_billing_all` WHERE rate_group IS NULL) > 0 Then
    SELECT ERROR("Store ID(s) missing from store details table");
END IF;

-------------------------------------------------------------------------------------------


CREATE TEMP TABLE `temp_billing_all` AS
SELECT 
    dn.*,
    case upper(link_route)
        when 'GIFT CARDS' then if(Upper(tran_type_abbr)='PURCHASE','REDEMPTION',if(upper(tran_type_abbr)='REFUND','ACTIVATION',if(upper(tran_type_abbr) IN ('BALANCE INQUIRY - SAVINGS', 'BALANCE_INQUIRY'), 'BALANCE INQUIRY', UPPER(tran_type_abbr))))
        else CASE UPPER(tran_type_abbr)
            WHEN 'PREAUTHORISATION (CREDIT)' THEN 'PRE-AUTH'
            WHEN 'PURCHASE WITH CASH OUT' THEN 'PURCHASE WITH CASHOUT'
            WHEN 'CASH OUT' THEN 'CASHOUT'
            ELSE UPPER(tran_type_abbr) END
    end calc_tran_type_abbr,
    case trim(approval_flag)
        when 'Y' then 'A'
        when 'N' then 'D'
        else trim(approval_flag)
    end calc_approval_flag,
    case link_route
        when 'AMEX' THEN 'AMEX'
        when 'DINERS' then 'DINERS'
        when 'FUEL CARDS' then 'FUEL CARDS'
        when 'GIFT CARDS' then 'GIFT CARDS'
        when 'UPI' then 'UPI'
        when 'VISA' then 'VISA'
        when 'MASTERCARD' then 'MASTERCARD'
        when 'EFTPOS' then 'EFTPOS'
        when 'PAYPAL' then 'PAYPAL'
        else ''
    end calc_scheme,
    case link_route
        when 'AMEX' THEN 'CREDIT'
        when 'DINERS' then 'CREDIT'
        when 'VISA' Then if (trim(card_type)='C' or trim(card_type)='R' or trim(card_type)='H' ,'CREDIT',if(trim(card_type)='P'or trim(card_type)='D' , 'DEBIT',''))
        when 'MASTERCARD' Then if (trim(card_type)='C' or trim(card_type)='R' or trim(card_type)='H' ,'CREDIT',if(trim(card_type)='P'or trim(card_type)='D' , 'DEBIT',''))
        when 'FUEL CARDS' then 'DEBIT'
        when 'GIFT CARDS' then 'DEBIT'
        when 'EFTPOS' then IF(TRIM(bin_product_code) <> '', bin_product_code, 'MULTI-NETWORK')
        when 'UPI' then 'CREDIT'
        when 'CRD' then 'CREDIT'
        when 'DBT' then 'DEBIT'
        when 'PAYPAL' then 'OTHER'
        else card_type
    end calc_card_type,
    from `pdh_staging_ds.tbl_temp_billing_all` dn;

-- MISSING CARD TYPE CHECKS
-- Note: the first two checks have been commented out while we discuss with GFS if they can replicate this logic in the TLF
/*
UPDATE `temp_billing_all` i SET i.calc_card_type = CASE WHEN v.acct_funding_source IN ('D', 'P') THEN 'DEBIT'
WHEN v.acct_funding_source IN ('C', 'H', 'R') THEN 'CREDIT'
ELSE ''
END
FROM (Select mti,tstamp_local,tstamp_trans,card_acpt_term_id,rrn,stan,tran_amt,pan,acct_funding_source,
    from  `pdh_rd_data_navigator.gfs_aux_visa`
    GROUP BY 1,2,3,4,5,6,7,8,9) v
WHERE i.tstamp_local = v.tstamp_local
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acpt_term_id), 5)
and i.stan = v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE v.mti WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND (TRIM(i.calc_card_type) = '' OR i.calc_card_type IS NULL)
AND CAST(i.tstamp_trans AS DATE) BETWEEN start_date AND end_date;

UPDATE `temp_billing_all` i
SET i.calc_card_type = c.card_type
FROM (
    SELECT masked_pan, tstamp_trans, tstamp_local, net_term_id, stan, retrieval_ref_no, mti, CASE 
        WHEN card_type IN ('D', 'P') THEN 'DEBIT'
        WHEN card_type IN ('C', 'H', 'R') THEN 'CREDIT'
        ELSE ''
    END AS card_type FROM (
        SELECT r.masked_pan, r.tstamp_trans, r.tstamp_local, r.net_term_id, r.stan, r.retrieval_ref_no, r.mti, b.card_type, RANK() OVER (PARTITION BY r.masked_pan ORDER BY b.bin_low_range) join_rank FROM `temp_billing_all` r
        JOIN `pdh_ref_ds.ref_bin_list` b ON LEFT(r.masked_pan, 6) >= LEFT(FORMAT('%09d', b.bin_low_range), 6) AND LEFT(r.masked_pan, 6) <= LEFT(FORMAT('%09d', b.bin_high_range), 6)
        WHERE TRIM(r.card_type) = '' OR r.card_type IS NULL
    ) WHERE join_rank = 1) c
WHERE i.masked_pan = c.masked_pan
AND i.tstamp_trans = c.tstamp_trans
AND i.tstamp_local = c.tstamp_local
AND i.net_term_id = c.net_term_id
AND i.stan = c.stan
AND i.retrieval_ref_no = c.retrieval_ref_no
AND i.mti = c.mti
AND (TRIM(i.calc_card_type) = '' OR i.calc_card_type IS NULL)
AND CAST(i.tstamp_trans AS DATE) BETWEEN start_date AND end_date;
*/

UPDATE `temp_billing_all`
SET calc_card_type = 'DEBIT'
WHERE (TRIM(calc_card_type) = '' OR calc_card_type IS NULL)
AND TRIM(proc_id_iss_b) IN ('VDCS', 'MC')
AND switch_tran_date BETWEEN start_date AND end_date;

-------------------------------------------------------------------------------------------

INSERT INTO `pdh_analytics_ds.tbl_fees_all`
select
d.*,
case act_code
    when '400' then if(mti='1440' ,concat(calc_tran_type_abbr , " REVERSAL"),calc_tran_type_abbr)
    else calc_tran_type_abbr 
end calc_tran_type_description,
if(calc_approval_flag='A',
    if(intchg_fee_code ='ALL', ((d.transaction_total * int_fee_percent/100) + int_fee_fixed*100),
    if(intchg_fee_code ='FIXED', int_fee_fixed*100, if(intchg_fee_code ='PERCENT',(d.transaction_total * int_fee_percent/100),0)))
, 0) as interchange_fees_calc,
0.0 interchange_fees_actual, -- should be null
0.0 interchange_fees_invoiced, -- should be null
0.0 interchange_fees_rebate,
'' fee_indicator,
if(proc_fee_code ='ALL', ((d.transaction_total * proc_fee_percent/100) + proc_fee_fixed*100),
    if(proc_fee_code ='FIXED', proc_fee_fixed*100,
    if(proc_fee_code ='PERCENT',(d.transaction_total * proc_fee_percent/100),0))) 
as processing_fees,
IF(LEFT(net_term_id,5) IN ('W0800', 'W8305', 'W6802', 'W8843', 'Q0001'), IFNULL(fraud_fee_fixed * 100, 0), 0) fraud_fees,
000000 as settled_datetime,
000000 as fncl_posted_datetime
from `temp_billing_all` d
left join `pdh_ref_ds.ref_rate_card` r on upper(d.calc_scheme)=upper(r.scheme) 
and Upper(d.calc_card_type)=upper(r.card_type)
AND upper(d.rate_group) = upper(r.merchant)
AND d.switch_tran_date BETWEEN r.from_date AND IFNULL(r.to_date, '2999-12-31');

---------------------------------------------------------------------------------------------------------------------------------

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_all`) < end_date THEN
    SELECT ERROR("Billing table not fully updated");
END IF;

IF (SELECT COUNT(*) FROM `pdh_staging_ds.tbl_temp_billing_all`) <> (SELECT COUNT(*) FROM `pdh_analytics_ds.tbl_fees_all` WHERE switch_tran_date BETWEEN start_date AND end_date) THEN
    SELECT ERROR("Mismatched row count between temp table and final table");
END IF;

---------------------------------------------------------------------------------------------------------------------------------

--Mastercard Update

Update `pdh_analytics_ds.tbl_fees_all` i
set i.interchange_fees_actual = int_fees*100,
i.fee_indicator='A'
 from (select pan, 
   amount_txn,
   card_acceptor_terminal_id,  
   datetime_local_txn,
   system_trace_audit_num,
   retrieval_reference_number,
   min(int_fees) int_fees
   from
   (SELECT 
   pan,    
   amount_txn,
   card_acceptor_terminal_id,  
   datetime_local_txn,
   system_trace_audit_num,
   retrieval_reference_number,
   if(extended_interchange_amount_fee > 0, extended_interchange_amount_fee/1.1,amount_txn_fee) int_fees,
   count(1)
   from `pdh_staging_ds.gfs_aux_mastercard`  where t1g0_file_date > '2021-07-02' 
   group by 1,2,3,4,5,6,7
  ) c group by 1,2,3,4,5,6 ) v 
where i.tstamp_local = parse_timestamp('%y%m%d%H%M%S', trim(v.datetime_local_txn))
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acceptor_terminal_id), 5)
and i.retrieval_ref_no = v.retrieval_reference_number
and i.stan = v.system_trace_audit_num
and i.transaction_total = CAST(v.amount_txn*100 AS int64)
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND cast(i.tstamp_trans as date) >= start_date AND cast(i.tstamp_trans as date) <= end_date
and TRIM(proc_id_iss_b)='MC';

-------------------------------------------------------------------------------------------------------------------------------------------
--VISA UPDATE

Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual= v.interchange_fee/10000/1.1,
i.fee_indicator='A'
from (Select mti,tstamp_local,card_acpt_term_id,rrn,stan,tran_amt,pan,
SUM(ABS(interchange_fee)) interchange_fee from  `pdh_rd_data_navigator.gfs_aux_visa`
GROUP BY 1,2,3,4,5,6,7) v
--from invoice_gfs_taf.aux_visa_apr2021 v
where i.tstamp_local = v.tstamp_local
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acpt_term_id), 5)
--and cast(i.retrieval_ref_no as Int64) = v.rrn
and i.stan = v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE v.mti WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND cast(i.tstamp_trans as date) >= start_date AND cast(i.tstamp_trans as date) <= end_date
and trim(i.proc_id_iss_b) = 'VDCS'
;

-------------------------------------------------------------------------------------------------------------------------------------------
--EFTPOS UPDATE

Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual= v.issuer_interchange_amt + v.acquirer_interchange_amt,
i.fee_indicator='A'
from (Select distinct tstamp_local,tstamp_trans,card_acpt_term_id,rrn,stan,
tran_amt,pan,mti, acquirer_interchange_amt, issuer_interchange_amt from `pdh_rd_data_navigator.gfs_aux_eftpos`) v
where i.tstamp_local = v.tstamp_local
and  i.net_term_id = v.card_acpt_term_id
and i.retrieval_ref_no = v.rrn
and i.stan=v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE CAST(v.mti AS STRING) WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND cast(i.tstamp_trans as date) >= start_date AND cast(i.tstamp_trans as date) <= end_date
and link_route = 'EFTPOS'
;

update `pdh_analytics_ds.tbl_fees_all` set interchange_fees_invoiced=interchange_fees_actual
where fee_indicator='A'
and cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date;

update `pdh_analytics_ds.tbl_fees_all` set interchange_fees_invoiced=interchange_fees_calc,fee_indicator='C'
where fee_indicator<>'A'
and cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date;

-- For EDG, Cash out only transactions have no interchange fee
update `pdh_analytics_ds.tbl_fees_edg` set interchange_fees_calc=0 where fee_indicator = 'C' AND calc_scheme = 'EFTPOS'
AND merchant_group = 'ENDEAVOUR'
AND UPPER(calc_tran_type_description) = 'CASHOUT'
AND switch_tran_date BETWEEN start_date AND end_date;

-- For EDG, Cash out and Purchase with Cash out have a rebate applicable
update `pdh_analytics_ds.tbl_fees_edg` set interchange_fees_invoiced=interchange_fees_calc-16.5 where fee_indicator = 'C' AND calc_scheme = 'EFTPOS'
AND merchant_group = 'ENDEAVOUR'
AND UPPER(calc_tran_type_description) IN ('PURCHASE WITH CASHOUT', 'CASHOUT')
AND switch_tran_date BETWEEN start_date AND end_date;

------------------------------------------------------------------------------------------------------------------------------------------
-- EDG SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_edg`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group = 'ENDEAVOUR';

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_edg`) < end_date THEN
    SELECT ERROR("EDG billing table not fully updated");
END IF;

-- This table is used in Tableau Report
INSERT INTO `pdh_analytics_ds.tbl_edg_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   LEFT(i.net_term_id,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type AS card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,
	m.merchant_group,
	m.division, 
	m.brand,    
	m.store_id ined_store_id,   
	m.site_name,    
	m.suburb,   
	m.state,    
	m.postcode,
	m.country,
	null sap_filename,
	null sap_post_timestamp,
	fy_start_date,
	currency_code
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id = LEFT(i.net_term_id,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group = 'ENDEAVOUR';

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_edg_fees_rpt`) < end_date THEN
    SELECT ERROR("EDG reporting table not fully updated");
END IF;

-- EG FUEL SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_egfuel`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group IN ('EG FUEL', 'EG FUEL APAC');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_egfuel`) < end_date THEN
    SELECT ERROR("EG Fuel billing table not fully updated");
END IF;

INSERT INTO `pdh_analytics_ds.tbl_egfuel_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   --2021030219355774
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   substr(i.rpt_lvl_id_b,3,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type as card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,    
    m.merchant_group,
    m.division, 
    m.brand,    
    m.store_id ined_store_id,   
    m.site_name,    
    m.suburb,   
    m.state,    
    m.postcode,
    m.country,
	null sap_filename,
	null sap_post_timestamp,
	fy_start_date,
	currency_code
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id=substr(i.rpt_lvl_id_b,3,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group IN ('EG FUEL', 'EG FUEL APAC');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_egfuel_fees_rpt`) < end_date THEN
    SELECT ERROR("EG Fuel reporting table not fully updated");
END IF;

-- SMALL MERCHANT SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_sml_merchant`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group NOT IN ('ENDEAVOUR', 'EG FUEL', 'EG FUEL APAC');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_sml_merchant`) < end_date THEN
    SELECT ERROR("Small Merchant billing table not fully updated");
END IF;

INSERT INTO `pdh_analytics_ds.tbl_sml_merchant_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   --2021030219355774
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   LEFT(i.net_term_id,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type as card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,
	m.merchant_group,
	m.division, 
	m.brand,    
	m.store_id ined_store_id,   
	m.site_name,    
	m.suburb,   
	m.state,    
	m.postcode,
	m.country,
    null sap_filename,
    null sap_post_timestamp,
    fy_start_date,
	currency_code
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id = LEFT(i.net_term_id,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group NOT IN ('ENDEAVOUR', 'EG FUEL', 'EG FUEL APAC');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_sml_merchant_fees_rpt`) < end_date THEN
    SELECT ERROR("Small Merchant reporting table not fully updated");
END IF;
