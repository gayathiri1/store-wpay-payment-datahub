DECLARE start_date DATE;  -- Fee calculation start date
DECLARE txn_start_date DATE;  -- Transaction inclusion start date
DECLARE end_date DATE DEFAULT Date_sub(current_date('+10:00'),Interval 3 day);  -- Fee calculation end date
DECLARE data_req_date DATE DEFAULT Date_sub(current_date('+10:00'),Interval 2 day);
DECLARE txn_end_date DATE DEFAULT Date_sub(current_date('+10:00'),Interval 1 day);  -- Transaction inclusion end date
DECLARE processing_dt DATETIME DEFAULT CURRENT_DATETIME('+10:00');

DECLARE missing_data ARRAY<STRING>;
DECLARE missing_intermediate_data ARRAY<DATE>;
DECLARE error_rows ARRAY<STRING>;

DECLARE settle_array ARRAY<STRUCT<settle_date DATE, cost_factor INT64, legacy_cost_factor INT64>>;
DECLARE forex_array ARRAY<STRUCT<txn_date DATE, local_currency STRING, exchange_rate NUMERIC>>;
DECLARE local_currencies ARRAY<STRING>;
DECLARE nullstr STRING;

SET missing_data = (SELECT ARRAY((
	SELECT "gfs_pdh_txn_interface" name FROM `pdh_rd_data_navigator.gfs_pdh_txn_interface`
	GROUP BY 1 HAVING MAX(CAST(tstamp_trans AS DATE)) < txn_end_date
	UNION ALL
	SELECT "gfs_pdh_txn_interface_super" name FROM `pdh_rd_data_navigator.gfs_pdh_txn_interface_super`
	GROUP BY 1 HAVING MAX(CAST(tstamp_trans AS DATE)) < txn_end_date
	UNION ALL
	SELECT "digitalpay_gc_txns" name FROM `pdh_rd_data_navigator.digitalpay_gc_txns`
	GROUP BY 1 HAVING MAX(CAST(txnTime AS DATE)) < txn_end_date
	UNION ALL
	SELECT "qc_detail_transactions" name FROM `pdh_rd_quickcilver.qc_detail_transactions`
	GROUP BY 1 HAVING MAX(file_date) < txn_end_date
	UNION ALL
	SELECT "alipay_linkly" name FROM `pdh_rd_apm.alipay_linkly`
	GROUP BY 1 HAVING MAX(file_date) < txn_end_date
	UNION ALL
	SELECT "isg_wpay_tran" name FROM `pdh_rd_data_navigator.isg_wpay_tran`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
	UNION ALL
	SELECT "mastercard_TFL6" name FROM `pdh_rd_data_navigator.mastercard_TFL6`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
	UNION ALL
	SELECT "mastercard_T1G0" name FROM `pdh_rd_data_navigator.mastercard_T1G0`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
	UNION ALL
	SELECT "gfs_aux_visa" name FROM `pdh_rd_data_navigator.gfs_aux_visa`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
	UNION ALL
	SELECT "eftpos_tx_100_01" name FROM `pdh_rd_data_navigator.eftpos_tx_100_01`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
	UNION ALL
	-- NOTE: alipay_stlm has been left out due to inconsistent delivery of files
	-- SELECT "alipay_stlm" name FROM `pdh_rd_apm.alipay_stlm`
	-- GROUP BY 1 HAVING MAX(file_date) < data_req_date
	-- UNION ALL
	SELECT "tc33_visa" name FROM `pdh_rd_data_navigator.tc33_visa`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
	UNION ALL
	SELECT "tn70_mc" name FROM `pdh_rd_data_navigator.tn70_mc`
	GROUP BY 1 HAVING MAX(file_date) < data_req_date
)));

SET missing_intermediate_data = (SELECT ARRAY((

	select distinct clndr_date from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.gfs_pdh_txn_interface` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(txn_end_date, INTERVAL 7 DAY) and txn_end_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select distinct clndr_date from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.gfs_pdh_txn_interface_super` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(txn_end_date, INTERVAL 7 DAY) and txn_end_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 

	UNION ALL
	
	select distinct clndr_date from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.digitalpay_gc_txns` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(txn_end_date, INTERVAL 7 DAY) and txn_end_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_quickcilver.qc_detail_transactions` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(txn_end_date, INTERVAL 7 DAY) and txn_end_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_apm.alipay_linkly` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(txn_end_date, INTERVAL 7 DAY) and txn_end_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.isg_wpay_tran` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.mastercard_TFL6` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL

	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.mastercard_T1G0` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.gfs_aux_visa` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.eftpos_tx_100_01` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL

	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.tc33_visa` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
	UNION ALL
	
	select  distinct clndr_date  from (
	SELECT d.clndr_date,count(s.file_date) name FROM 
	`pdh_ref_ds.dim_date` d 
	left join `pdh_rd_data_navigator.tn70_mc` s on d.clndr_date=s.file_date
	where  d.clndr_date between DATE_SUB(data_req_date, INTERVAL 7 DAY) and data_req_date
	GROUP BY 1 HAVING count(s.file_date) = 0 ) a 
	
)));

IF ARRAY_LENGTH(missing_data) > 0 THEN
	SELECT ERROR(CONCAT("Raw billing data is not up to date in tables: ", ARRAY_TO_STRING(missing_data, ", ")));
END IF;

IF ARRAY_LENGTH(missing_intermediate_data) > 0 THEN
	SELECT ERROR(CONCAT("Raw billing data is not up to date in tables for last 1 week: ", ARRAY_TO_STRING(missing_intermediate_data, ", ")));
END IF;

SET txn_start_date = (SELECT MAX(switch_tran_date) + 1 FROM `pdh_analytics_ds.tbl_fees_all`);
SET start_date = (SELECT MAX(switch_tran_date) + 1 FROM `pdh_analytics_ds.tbl_fees_all` WHERE fee_indicator = 'A');

IF start_date > txn_end_date OR txn_start_date > txn_end_date THEN
    SELECT ERROR("Start date is greater than end date");
END IF;

-- EARLY SETTLEMENT DATE ARRAY
CALL pdh_staging_ds.CalculateCostFactor(start_date, end_date, settle_array);

CREATE OR REPLACE TABLE `pdh_staging_ds.temp_early_settlement_fee` AS
	SELECT * FROM UNNEST(settle_array);

-- FOREX RATE ARRAY
SET local_currencies = (
	SELECT ARRAY_AGG(DISTINCT kv.value) from `pdh_ref_ds.ref_store_details` s
	LEFT JOIN `pdh_ref_ds.ref_key_value` kv
	ON kv.attribute = 'scheme-fee-forex'
	AND s.country = kv.key
);

IF (SELECT COUNT(*) FROM UNNEST(local_currencies) lc WHERE lc IS NULL) > 0 THEN
	SELECT ERROR("Missing key-value config for country in ref_store_details");
END IF;

CALL pdh_staging_ds.CalculateForexRates(start_date, end_date, local_currencies, forex_array);

SET error_rows = (SELECT ARRAY_AGG(DISTINCT local_currency) FROM UNNEST(forex_array) WHERE exchange_rate IS NULL);

IF ARRAY_LENGTH(error_rows) > 0 THEN
	SELECT ERROR(CONCAT("Missing exchange rates for ", ARRAY_TO_STRING(error_rows, ', ')));
END IF;

INSERT INTO `pdh_staging_ds.billing_forex_hist`
SELECT current_date('+10:00'), fx.txn_date, fx.local_currency, fx.exchange_rate
FROM UNNEST(forex_array) fx;

-- MASTERCARD JOIN QUERY
-- The Mastercard scheme data is received as two files (TFL6 for transactions and T1G0 for settlements),
-- so we join them into one table to simplify processing
create or replace table `pdh_staging_ds.gfs_aux_mastercard` as
with clr as
(
    Select concat(substr(pan,1,6),"~~~~~~~",substr(pan,14,3)) pan,
    cast(amount_txn as int64)/100 amount_txn,
    trim(card_acceptor_terminal_id) card_acceptor_terminal_id,
    cast(extended_interchange_amount_fee as int64)/1000000 extended_interchange_amount_fee,
    cast(amount_txn_fee as int64)/100 amount_txn_fee,
    datetime_local_txn,
    cast(substr(datetime_local_txn,3,4) as int64) local_transaction_date,
    cast(substr(datetime_local_txn,7,6) as int64) local_time,
    approval_code,
    file_name,
    file_date t1g0_file_date,
    mssg_reversal_indicator
     from `pdh_rd_data_navigator.mastercard_T1G0`
     where trim(card_acceptor_terminal_id)<>''
    and file_date > DATE_SUB(start_date, INTERVAL 30 DAY)
),
tlf as 
(
    Select 
        pan,
        cast(transaction_amount as int64)/100 transaction_amount,
        trim(card_acceptor_terminal_id) card_acceptor_terminal_id,
        cast(local_transaction_date as int64 )local_transaction_date,
        cast(time_local as int64) local_time,
        trim(auth_id_response) auth_id_response,
        system_trace_audit system_trace_audit_num,
        CAST(retrieval_reference_number AS STRING) retrieval_reference_number,
        file_date tfl6_file_date,
    from `pdh_rd_data_navigator.mastercard_TFL6` where
        trim(clearing_indicator)='Y'
          and file_date > DATE_SUB(start_date, INTERVAL 30 DAY)
    GROUP BY 1,2,3,4,5,6,7,8,9
    
),
firstlvl AS (
    Select 
    c.t1g0_file_date,
    t.tfl6_file_date,
    c.pan,
	c.amount_txn,
	c.card_acceptor_terminal_id,
	c.extended_interchange_amount_fee,
    c.amount_txn_fee,
    c.datetime_local_txn,
	c.approval_code,
	t.system_trace_audit_num,
	t.retrieval_reference_number,
	c.mssg_reversal_indicator
    from clr c LEFT join tlf t on c.pan = t.pan and c.amount_txn=t.transaction_amount and c.card_acceptor_terminal_id =t.card_acceptor_terminal_id 
    and c.local_transaction_date=t.local_transaction_date and c.local_time = t.local_time-- and t.auth_id_response = c.approval_code
),
secondlvl AS (
    Select 
    firstlvl.t1g0_file_date,
    firstlvl.tfl6_file_date,
    firstlvl.pan,
	firstlvl.amount_txn,
	firstlvl.card_acceptor_terminal_id,
	firstlvl.extended_interchange_amount_fee,
    firstlvl.amount_txn_fee,
    firstlvl.datetime_local_txn,
	firstlvl.approval_code,
	t.system_trace_audit_num,
	t.retrieval_reference_number,
	firstlvl.mssg_reversal_indicator
    from firstlvl LEFT join tlf t on firstlvl.pan = t.pan and firstlvl.amount_txn=t.transaction_amount and firstlvl.card_acceptor_terminal_id =t.card_acceptor_terminal_id 
    and cast(substr(firstlvl.datetime_local_txn,3,4) as int64)=t.local_transaction_date and substr(firstlvl.datetime_local_txn,7,4) = LEFT(FORMAT('%06d', CAST(t.local_time AS int64)), 4)
    WHERE firstlvl.system_trace_audit_num IS NULL
)
SELECT * FROM firstlvl WHERE system_trace_audit_num IS NOT NULL
UNION ALL 
SELECT * FROM secondlvl WHERE system_trace_audit_num IS NOT NULL;

IF (SELECT MAX(t1g0_file_date) FROM `pdh_staging_ds.gfs_aux_mastercard`) < data_req_date THEN
    SELECT ERROR("Mastercard scheme data not up to date");
END IF;

--------------------------------------------------------------------------------

DELETE FROM `pdh_analytics_ds.tbl_fees_all`
WHERE switch_tran_date >= start_date
AND source_application IN ('DataNav', 'DataNavSuper', 'ISG');

DELETE FROM `wpay_analytics.wpay_billing_engine_tran_dtl`
WHERE switch_tran_date >= start_date
AND source_application IN ('DataNav', 'DataNavSuper', 'ISG');

--------------------------------------------------------------------------------

-- BILLING ACTUAL
create or replace table `pdh_staging_ds.tbl_temp_billing_all` as
select 
CAST(dn.tstamp_trans AS DATE) switch_tran_date,
pdh_ref_ds.get_tran_uid(
						"TC",
						nullstr, 
						nullstr,
						0,
						nullstr, 
						nullstr,
						dn.tran_uid,
						nullstr,
						nullstr, 
						0) as tran_uid,
dn.tstamp_trans,
dn.tstamp_local,
dn.masked_pan,
dn.date_recon_acq,
dn.net_term_id,
dn.rpt_lvl_id_b,
dn.mti,
dn.tran_type_id,
dn.amt_recon_net,
dn.act_code,
dn.response_code,
dn.account_type,
dn.transaction_total,
dn.purchase_total,
dn.cashout_total,
dn.retrieval_ref_no,
dn.stan,
dn.original_stan,
dn.proc_id_acq_b,
dn.inst_id_recn_acq_b,
dn.card_acpt_name_loc,
dn.proc_id_iss_b,
dn.issuer_institution_id,
dn.inst_id_recon_iss_name,
dn.card_owner,
dn.pos_crd_dat_in_mod,
dn.pos_crdhldr_presnt,
dn.order_number,
dn.approval_code,
dn.adtnl_response_data,
dn.card_acpt_id,
dn.merchant_store_id,
CASE
    WHEN TRIM(dn.proc_id_iss_b) = 'EHB' AND dn.currency_code = 36 THEN 'D'  -- AU EFTPOS transaction are always considered Domestic
    WHEN dn.dom_int_ind IS NULL THEN 'D'
    ELSE dn.dom_int_ind
END AS dom_int_ind,
dn.card_type,
dn.card_subtype,
dn.bin_product_code,
dn.scheme,
trim(t.tran_type) tran_type_desc,
trim(t.abbr) tran_type_abbr,
IFNULL(trim(r.approval_flag), "N") approval_flag,
`pdh_ref_ds.get_scheme_v2`(dn.proc_id_iss_b, dn.issuer_institution_id, t.account) link_route,
msw.reporting_group merchant_group,
s.ratecard_group rate_group,
c.cur_symbol currency_code,
dn.pymt_acct_ref,
dn.scdr_token,
-- WPAY ANALYTICS FIELDS
'DataNav' source_application,
CAST(null AS STRING) customerRef,
CAST(null AS STRING) userId,
CAST(null AS STRING) username,
CAST(null AS STRING) userStatus,
CAST(null AS STRING) containerId,
CAST(null AS STRING) containerRef,
CAST(null AS STRING) itemId,
CAST(null AS STRING) itemtype,
CAST(null AS STRING) item_token,
CAST(null AS STRING) schemeName,
CAST(null AS STRING) qc_CardNumber,
-- SETTLEMENT DATE FIELDS
CAST(null AS STRING) AS dp_txnRef,
CAST(null AS STRING) AS qc_ReferenceNumber,
CAST(null AS NUMERIC) AS qc_BatchNumber,
CAST(null AS STRING) AS lk_ResRef,
CAST(null AS STRING) AS cy_tran_uid,
wallet_id
from `pdh_rd_data_navigator.gfs_pdh_txn_interface` dn  
Left Join `pdh_ref_ds.ref_transaction_types` t on safe_cast(dn.tran_type_id as int64) = cast(t.dn_tran_code as int64)
left join `pdh_ref_ds.ref_response_code` r on dn.act_code = r.action_code
LEFT JOIN `pdh_ref_ds.ref_store_details` s ON LEFT(dn.net_term_id, 5) = s.store_id
LEFT JOIN `pdh_ref_ds.ref_merchant_settlement_window` msw ON upper(s.division) = upper(msw.division)
LEFT JOIN `pdh_ref_ds.ref_currency_code` c ON dn.currency_code = c.currency_code
WHERE cast(dn.tstamp_trans as date) >= start_date AND cast(dn.tstamp_trans as date) <= txn_end_date
AND s.is_closed = FALSE
;

-- DATA NAVIGATOR (SUPERMARKETS)
insert into `pdh_staging_ds.tbl_temp_billing_all`
select 
CAST(dn.tstamp_trans AS DATE) switch_tran_date,
pdh_ref_ds.get_tran_uid(
                        "TC",
                        nullstr, 
                        nullstr,
                        0,
                        nullstr, 
                        nullstr,
                        dn.tran_uid,
                        nullstr,
                        nullstr, 
                        0) as tran_uid,
dn.tstamp_trans,
dn.tstamp_local,
dn.masked_pan,
dn.date_recon_acq,
dn.net_term_id,
dn.rpt_lvl_id_b,
dn.mti,
dn.tran_type_id,
dn.amt_recon_net,
dn.act_code,
dn.response_code,
dn.account_type,
dn.transaction_total,
dn.purchase_total,
dn.cashout_total,
dn.retrieval_ref_no,
dn.stan,
dn.original_stan,
dn.proc_id_acq_b,
dn.inst_id_recn_acq_b,
dn.card_acpt_name_loc,
dn.proc_id_iss_b,
dn.issuer_institution_id,
dn.inst_id_recon_iss_name,
dn.card_owner,
dn.pos_crd_dat_in_mod,
dn.pos_crdhldr_presnt,
dn.order_number,
dn.approval_code,
dn.adtnl_response_data,
dn.card_acpt_id,
dn.merchant_store_id,
CASE
    WHEN TRIM(dn.proc_id_iss_b) = 'EHB' AND dn.currency_code = 36 THEN 'D'  -- AU EFTPOS transaction are always considered Domestic
    WHEN dn.dom_int_ind IS NULL THEN 'D'
    ELSE dn.dom_int_ind
END AS dom_int_ind,
dn.card_type,
dn.card_subtype,
dn.bin_product_code,
dn.scheme,
trim(t.tran_type) tran_type_desc,
trim(t.abbr) tran_type_abbr,
IFNULL(trim(r.approval_flag), "N") approval_flag,
pdh_ref_ds.get_scheme_v2(dn.proc_id_iss_b, dn.issuer_institution_id, t.account) link_route,
msw.reporting_group merchant_group,
s.ratecard_group rate_group,
c.cur_symbol currency_code,
dn.pymt_acct_ref,
dn.scdr_token,
-- WPAY ANALYTICS FIELDS
'DataNavSuper' source_application,
null customerRef,
null userId,
null username,
null userStatus,
null containerId,
null containerRef,
null itemId,
null itemtype,
null item_token,
null schemeName,
null qc_CardNumber,
-- SETTLEMENT DATE FIELDS
null AS dp_txnRef,
null AS qc_ReferenceNumber,
null AS qc_BatchNumber,
null AS lk_ResRef,
null AS cy_tran_uid,
wallet_id
from `pdh_rd_data_navigator.gfs_pdh_txn_interface_super` dn  
Left Join `pdh_ref_ds.ref_transaction_types` t on safe_cast(dn.tran_type_id as int64) = cast(t.dn_tran_code as int64)
left join `pdh_ref_ds.ref_response_code` r on dn.act_code = r.action_code
LEFT JOIN `pdh_ref_ds.ref_store_details` s ON LEFT(dn.net_term_id, 5) = s.store_id
LEFT JOIN `pdh_ref_ds.ref_merchant_settlement_window` msw ON upper(s.division) = upper(msw.division)
LEFT JOIN `pdh_ref_ds.ref_currency_code` c ON dn.currency_code = c.currency_code
WHERE cast(dn.tstamp_trans as date) >= start_date AND cast(dn.tstamp_trans as date) <= txn_end_date
AND s.is_closed = FALSE
;

-------------------------------------------------------------------------------------------
-- DIGITAL PAY

insert into `pdh_staging_ds.tbl_temp_billing_all`
	Select 
	CAST(txnTime AS DATE) switch_tran_date,
    pdh_ref_ds.get_tran_uid(
                         "DP",
                         nullstr, 
                         trim(txnRef), 
                         0, 
                         nullstr,
                         nullstr,
                         nullstr,
                         nullstr, 
                         nullstr, 
                         0) AS tran_uid,
	txnTime tstamp_trans,
	null tstamp_local,
	CAST(bin AS STRING) masked_pan,
    CAST(txnTime AS DATE) date_recon_acq,
	IF (MerchantName = 'Everyday Pay' AND terminal_id IS NOT NULL, terminal_id,
		CONCAT(CASE WHEN MerchantName = 'WowOnline' then 'W8843'
			WHEN MerchantName = 'BWSOnline' then 'W6802'
			WHEN MerchantName = 'DanMurphysOnline' then 'W8305'
			WHEN MerchantName = 'ScanGoSuper' then 'W6134'
			WHEN MerchantName = 'Langtons' then 'WC500'
			WHEN MerchantName = 'JimmyBrings' then 'Z0004'
			WHEN MerchantName = 'Everyday Pay' then 'W5972'
			ELSE null
		END, "000")
	) net_term_id,
    Concat('01',CASE WHEN MerchantName = 'WowOnline' then 'W8843'
        WHEN MerchantName = 'BWSOnline' then 'W6802'
        WHEN MerchantName = 'DanMurphysOnline' then 'W8305'
        WHEN MerchantName = 'ScanGoSuper' then 'W6134'
        WHEN MerchantName = 'Langtons' then 'WC500'
		WHEN MerchantName = 'JimmyBrings' then 'Z0004'
		WHEN MerchantName = 'Everyday Pay' then IF(terminal_id IS NOT NULL, LEFT(terminal_id, 5), 'W5972')
        ELSE null
    END) rpt_lvl_id_b,
    null as mti,
    null tran_type_id,
    CAST(amount*100 AS NUMERIC) amt_recon_net,
    null act_code,
    null response_code,
    null account_type,
    CAST(amount*100 AS NUMERIC) transaction_total,
    CAST(amount*100 AS NUMERIC) purchase_total,
    0 cashout_total,
    null retrieval_ref_no,
    null stan,
    null original_stan,
    null proc_id_acq_b,
    null inst_id_recn_acq_b,
    MerchantName card_acpt_name_loc,
    null proc_id_iss_b,
    null issuer_institution_id,
	null inst_id_recon_iss_name,
    null card_owner,
    null pos_crd_dat_in_mod,
    '0' pos_crdhldr_presnt,
    orderNumber order_number,
    null approval_code,
    null adtnl_response_data,
    null card_acpt_id,
    null merchant_store_id,
    null as dom_int_ind,
    'D' as card_type,
    null card_subtype,
    null bin_product_code,
    schemeName scheme, 
    trim(transactionType) as tran_type_desc,
    trim(transactionType) as abbr,
    case responseCode
		when '00' then 'Y'
		else 'N'
	end as approval_flag,
    case schemeName 
        WHEN 'GIFT_CARD' THEN 'GIFT CARDS' 
        WHEN 'PAYPAL' THEN 'PAYPAL' 
    end link_route,
    IF(MerchantName = "Everyday Pay" AND terminal_id IS NULL, "EVERYDAY PAY", msw.reporting_group) merchant_group,
    s.ratecard_group rate_group,
	NULL currency_code,
	NULL pymt_acct_ref,
	NULL scdr_token,
	-- WPAY ANALYTICS FIELDS
	'DigitalPay' source_application,
	d.customerRef as customerRef,
	CAST(d.userId AS STRING) as userId,
	d.username as username,
	d.userStatus as userStatus,
	CAST(containerId AS STRING) containerId,
	CAST(d.containerRef AS STRING) as containerRef,
	CAST(d.itemId AS STRING) itemId,
	d.itemType as itemtype,
	d.item_token as item_token,
	d.schemeName as schemeName,
	null qc_CardNumber,
	-- SETTLEMENT DATE FIELDS
	TRIM(txnRef) AS dp_txnRef,
	null AS qc_ReferenceNumber,
	null AS qc_BatchNumber,
	null AS lk_ResRef,
	null AS cy_tran_uid,
    null AS wallet_id
    FROM `pdh_rd_data_navigator.digitalpay_gc_txns` d
	LEFT JOIN `pdh_ref_ds.ref_store_details` s ON 
    (CASE WHEN MerchantName = 'WowOnline' then 'W8843'
        WHEN MerchantName = 'BWSOnline' then 'W6802'
        WHEN MerchantName = 'DanMurphysOnline' then 'W8305'
        WHEN MerchantName = 'ScanGoSuper' then 'W6134'
        WHEN MerchantName = 'Langtons' then 'WC500'
		WHEN MerchantName = 'JimmyBrings' then 'Z0004'
		WHEN MerchantName = 'Everyday Pay' then IF(terminal_id IS NOT NULL, LEFT(terminal_id, 5), 'W5972')
        ELSE null
    END) = s.store_id
	LEFT JOIN `pdh_ref_ds.ref_merchant_settlement_window` msw
    ON upper(s.division) = upper(msw.division)
    where (schemeName = 'PAYPAL' OR schemeName = 'GIFT_CARD' AND MerchantName = 'Everyday Pay')
	and CAST(txnTime AS DATE) >= txn_start_date and CAST(txnTime AS DATE) <= txn_end_date
    AND d.responseCode = '00'
    AND trim(transactionType) <> "TOKENISE"
	AND (LENGTH(txnRef)-LENGTH(REPLACE(txnRef,".",""))) <> 2
	AND s.is_closed = FALSE;

-------------------------------------------------------------------------------------------
-- QUIKCILVER

insert into `pdh_staging_ds.tbl_temp_billing_all`
Select 
	CAST(TransactionDate AS DATE) switch_tran_date,
    pdh_ref_ds.get_tran_uid(
                            "QC",
                             d.approvalcode, 
                             d.ReferenceNumber, 
                             d.BatchNumber, 
                             nullstr,
                             concat(CASE 
                                     when d.transactiondate is null then "19000101"
                                    else format_date("%Y%m%d",d.transactiondate)
                                    End,"T",
                                    CASE 
                                     when d.transactiontime is null then "000000"
                                     else format_time("%H%M%S",d.transactiontime)
                                    end),
                              nullstr,
                              nullstr, 
                              nullstr, 
                              0) as tran_uid,
    cast(concat(TransactionDate,' ',TransactionTime) as TIMESTAMP) tstamp_trans,
	null tstamp_local,
	CAST(CardNumber AS STRING) masked_pan,  -- MASK PAN
    CAST(TransactionDate AS DATE) date_recon_acq,
    CONCAT(pdh_ref_ds.get_qc_store(d.outletcode,d.Issuer,d.outlet,d.POSName), "000") AS net_term_id,
    Concat('01',OutletCode) rpt_lvl_id_b, -- Add conditions where POSNAME Is not Store number
    null as mti,
    null tran_type_id,
    ABS(CAST(Amount_Transacting_Merchants_Currency_Or_Points*100 AS NUMERIC)) amt_recon_net,
    null act_code,
    null response_code,
    null account_type,
    ABS(CAST(Amount_Transacting_Merchants_Currency_Or_Points*100 AS NUMERIC)) transaction_total,
    ABS(CAST(Amount_Transacting_Merchants_Currency_Or_Points*100 AS NUMERIC)) purchase_total,
    0 cashout_total,
    null retrieval_ref_no,
    null stan,
    null original_stan,
    null proc_id_acq_b,
    null inst_id_recn_acq_b,
    null card_acpt_name_loc,
    null proc_id_iss_b,
    null issuer_institution_id,
	null inst_id_recon_iss_name,
    null card_owner,
    case trim(CardEntryMode)
		When 'Swiped' Then '2'
		When 'Manual' Then '6' 
		Else ''
    End as pos_crd_dat_in_mod, --CARD ENTRY MODE CODES
    null pos_crdhldr_presnt,
    InvoiceNumber order_number,
    ApprovalCode approval_code,
    null adtnl_response_data,
    null card_acpt_id,
    null merchant_store_id,
    null as dom_int_ind,
    'DEBIT' as card_type,
    null card_subtype,
    null bin_product_code,
    'GIFT_CARD' scheme, 
    trim(transactionType) as tran_type_desc,
    Case trim(transactionType)
		WHEN 'GIFT CARD REDEEM' THEN 'REDEMPTION'
		WHEN 'GIFT CARD CANCEL REDEEM' THEN 'REDEMPTION REVERSAL'
		WHEN 'GIFT CARD DEACTIVATE' THEN 'DEACTIVATION'
		WHEN 'GIFT CARD ACTIVATE' THEN 'ACTIVATION'
		WHEN 'REACTIVATE' THEN 'REACTIVATION'
		WHEN 'GIFT CARD CANCEL ACTIVATE' THEN 'ACTIVATION REVERSAL'
		WHEN 'GIFT CARD REISSUE' THEN 'ACTIVATION'
		WHEN 'RESET CARD PIN' THEN 'RESET CARD PIN'
		WHEN 'GIFT CARD RELOAD' THEN 'ACTIVATION'
		else ''
	End
	as abbr,
    case TransactionStatus
		when 'SUCCESS' then 'Y'
		when 'CANCELLED' then 'N'
		else 'N'
	end as approval_flag,
	'GIFT CARDS' link_route,
	msw.reporting_group,
    s.ratecard_group rate_group,
	NULL currency_code,
	NULL pymt_acct_ref,
	NULL scdr_token,
	-- WPAY ANALYTICS FIELDS
	'QuikCilver' source_application,
	null customerRef,
	null userId,
	null username,
	null userStatus,
	null containerId,
	null containerRef,
	null itemId,
	null itemtype,
	null item_token,
	null schemeName,
	CAST(CardNumber AS STRING) as qc_CardNumber,
	-- SETTLEMENT DATE FIELDS
	null AS dp_txnRef,
	ReferenceNumber AS qc_ReferenceNumber,
	BatchNumber AS qc_BatchNumber,
	null AS lk_ResRef,
	null AS cy_tran_uid,
    null AS wallet_id
    FROM `pdh_rd_quickcilver.qc_detail_transactions` d
	LEFT JOIN `pdh_ref_ds.ref_store_details` s ON 
    (
        case
            when ifnull(d.outletcode,"") <>  "" then upper(trim(d.outletcode))
            when (upper(trim(d.descriptive_outlet_name)) = "SAP HYBRIS" and
                upper(left(trim(d.issuer),20))  = "WOOLWORTHS GROUP LTD") then "W5975"
            else null 
        end
    ) = s.store_id 
	join `pdh_ref_ds.ref_merchant_settlement_window` msw
    on msw.is_active = "Y"
    and msw.division = upper(trim(s.division))
    where cast(TransactionDate as Date) >= txn_start_date 
	and cast(TransactionDate as Date) <= txn_end_date
    AND trim(transactionType) <> "RESET CARD PIN"
	AND s.brand <> "COUNTDOWN"
	AND OutletCode IS NOT NULL AND TRIM(OutletCode) <> ""
	AND s.is_closed = FALSE;

-------------------------------------------------------------------------------------------
-- LINKLY

insert into `pdh_staging_ds.tbl_temp_billing_all`
Select 
    ReqDate switch_tran_date,
    pdh_ref_ds.get_tran_uid("LK",
                             nullstr, 
                             ResRef,
                             0, 
                             nullstr,
                             concat(CASE 
                                     when ReqDate is null then "19000101"
                                    else format_date("%Y%m%d",ReqDate)
                                    End,"T",
                                    CASE 
                                     when ReqTime is null then "000000"
                                     else format_time("%H%M%S",ReqTime)
                                    end),
                              nullstr,
                              nullstr, 
                              nullstr, 
                              0) as tran_uid,
	PARSE_TIMESTAMP("%Y%m%d%H%M%S", CONCAT(FORMAT_DATE("%Y%m%d", ReqDate), FORMAT_TIME("%H%M%S", ReqTime))) tstamp_trans,
	PARSE_TIMESTAMP("%Y%m%d%H%M%S", CONCAT(FORMAT_DATE("%Y%m%d", ReqDate), FORMAT_TIME("%H%M%S", ReqTime))) tstamp_local,
	CAST(ReqPAN AS STRING) masked_pan,
    ReqDate date_recon_acq,
    CONCAT(ReqStore, "000") net_term_id,
    Concat('01', ReqStore) rpt_lvl_id_b,
    null as mti,
    null tran_type_id,
    ABS(CAST(ReqAmt*100 AS NUMERIC)) amt_recon_net,
    null act_code,
    ResRC response_code,
    null account_type,
    ABS(CAST(ReqAmt*100 AS NUMERIC)) transaction_total,
    ABS(CAST(ReqAmt*100 AS NUMERIC)) purchase_total,
    0 cashout_total,
    null retrieval_ref_no,
    null stan,
    null original_stan,
    null proc_id_acq_b,
    null inst_id_recn_acq_b,
    null card_acpt_name_loc,
    null proc_id_iss_b,
    null issuer_institution_id,
	null inst_id_recon_iss_name,
    null card_owner,
    null pos_crd_dat_in_mod,
    null pos_crdhldr_presnt,
    null order_number,
    null approval_code,
    ReqTxRef adtnl_response_data,
    null card_acpt_id,
    null merchant_store_id,
    null as dom_int_ind,
    'APM' as card_type,
    null card_subtype,
    null bin_product_code,
    OrigData scheme,
    CASE WHEN ReqMT = 200 AND TRIM(ReqType) = 'N' THEN "PURCHASE"
    WHEN ReqMT = 200 AND TRIM(ReqType) = 'R' THEN "REFUND"
    WHEN ReqMT = 400 AND TRIM(ReqType) = 'N-' THEN "PURCHASE"
    ELSE "" END tran_type_desc,
    CASE WHEN ReqMT = 200 AND TRIM(ReqType) = 'N' THEN "PURCHASE"
    WHEN ReqMT = 200 AND TRIM(ReqType) = 'R' THEN "REFUND"
    WHEN ReqMT = 400 AND TRIM(ReqType) = 'N-' THEN "PURCHASE"
    ELSE "" END abbr,
    case when ReqMT = 200 AND ResRC = '00' then 'Y'
		else 'N'
	end as approval_flag,
    'ALIPAY' link_route,
    msw.reporting_group merchant_group,
    s.ratecard_group rate_group,
	NULL currency_code,
	NULL pymt_acct_ref,
	NULL scdr_token,
	-- WPAY ANALYTICS FIELDS
	'Linkly' source_application,
	null customerRef,
	null userId,
	null username,
	null userStatus,
	null containerId,
	null containerRef,
	null itemId,
	null itemtype,
	null item_token,
	null schemeName,
	null qc_CardNumber,
	-- SETTLEMENT DATE FIELDS
	null AS dp_txnRef,
	null AS qc_ReferenceNumber,
	null AS qc_BatchNumber,
	ResRef AS lk_ResRef,
	null AS cy_tran_uid,
    null AS wallet_id
    FROM `pdh_rd_apm.alipay_linkly` d
	LEFT JOIN `pdh_ref_ds.ref_store_details` s ON 
    d.ReqStore = s.store_id
	LEFT join `pdh_ref_ds.ref_merchant_settlement_window` msw
    ON UPPER(TRIM(s.division)) = msw.division
    where TRIM(d.OrigData) = 'Alipay'
	and ReqDate >= txn_start_date and ReqDate <= txn_end_date
    AND ReqMT IN (200, 400)
	AND s.is_closed = FALSE;

-------------------------------------------------------------------------------------------
-- ISG

insert into `pdh_staging_ds.tbl_temp_billing_all`
select 
    PARSE_DATE("%Y%m%d", LEFT(CAST(transaction_timestamp AS STRING), 8)) switch_tran_date,
    pdh_ref_ds.get_tran_uid(
                            "CY",
                            nullstr, 
                            nullstr,
                            0,
                            nullstr,
                            concat(
                            left(rpad(cast(transaction_timestamp as string),14,"0"),8),"T",
                            right(rpad(cast(transaction_timestamp as string),14,"0"),6)),
                            cast(tran_uid as string),
                            nullstr, 
                            transaction_type, 
                            transaction_amount) as tran_uid,
	CASE
		WHEN LENGTH(CAST(transaction_timestamp AS STRING)) = 14 THEN CAST(CONCAT(PARSE_DATE('%Y%m%d', LEFT(CAST(transaction_timestamp AS STRING), 8)),' ', parse_time('%H%M%S',RIGHT(CAST(transaction_timestamp AS STRING), 6))) as timestamp)
		ELSE CAST(PARSE_DATE('%Y%m%d', LEFT(CAST(transaction_timestamp AS STRING), 8)) as timestamp)
	END tstamp_trans,
	CASE
		WHEN LENGTH(CAST(transaction_local_timestamp AS STRING)) = 14 THEN CAST(CONCAT(PARSE_DATE('%Y%m%d', LEFT(CAST(transaction_local_timestamp AS STRING), 8)),' ', parse_time('%H%M%S',RIGHT(CAST(transaction_local_timestamp AS STRING), 6))) as timestamp)
		ELSE CAST(PARSE_DATE('%Y%m%d', LEFT(CAST(transaction_local_timestamp AS STRING), 8)) as timestamp)
	END tstamp_local,
	pan masked_pan,  -- MASK PAN
    PARSE_DATE("%Y%m%d", LEFT(CAST(transaction_timestamp AS STRING), 8)) date_recon_acq,
    --terminal_id net_term_id,  -- Add conditions where POSNAME Is not Store number
    case
        when trim(ifnull(d.terminal_id,"")) <> ""
            then upper(trim(d.terminal_id))
        else upper(trim(rk.value)) -- Include Amex transactions
    end net_term_id,
	null as rpt_lvl_id_b, -- Add conditions where POSNAME Is not Store number
	null as mti,
    null tran_type_id,
    transaction_amount amt_recon_net,
	cast(action_code as string) act_code,
	null response_code,    
	null account_type,	
    transaction_amount transaction_total,
    transaction_amount purchase_total,
    0 cashout_total,	
    retrieval_reference_number retrieval_ref_no,
    null stan,
    null original_stan,
    null proc_id_acq_b,
    null inst_id_recn_acq_b,
    null card_acpt_name_loc,
	case upper(trim(scheme))
        WHEN 'VISA' THEN 'VDCS' 
        WHEN 'MASTERCARD' THEN 'MC' 
        WHEN 'AMERICAN EXPRESS' THEN 'AMEX'
        WHEN 'AMEX' THEN 'AMEX'
        ELSE null
    end proc_id_iss_b,
    null issuer_institution_id,
	null inst_id_recon_iss_name,
    null card_owner,
    null pos_crd_dat_in_mod,
    null pos_crdhldr_presnt,
    cast(order_num as string) order_number,
    approval_code approval_code,
    case
		when upper(trim(scheme)) ='VISA' then cast(tran_uid as string)
		when upper(trim(scheme)) = 'MASTERCARD' then trace_id
		else  cast(tran_uid as string)
	end as adtnl_response_data,  -- Fix for tran_uid join issue
    null card_acpt_id,
    null merchant_store_id,
    domesitic_international_ind as dom_int_ind,
    case card_type
      when 'CREDIT' then 'C'
      when 'DEBIT' then 'D'
      when 'PREPAID' then 'P'
      when 'credit card' then 'C'
	  else ''
	end as card_type,
    null card_subtype,
    null bin_product_code,
    case upper(trim(scheme))
        WHEN 'VISA' THEN 'VISA' 
        WHEN 'MASTERCARD' THEN 'MASTERCARD' 
        WHEN 'AMERICAN EXPRESS' THEN 'AMEX'
        WHEN 'AMEX' THEN 'AMEX'
        ELSE null
    end scheme, 
    trim(transaction_type) as tran_type_desc,
	trim(transaction_type) as abbr,
    case 
      when transaction_approval_status is null then 'Y'
	  when transaction_approval_status = 0 then 'Y'
      when transaction_approval_status = 1 then 'N'
	  else 'N'
	end as approval_flag,
    case upper(trim(scheme))
        WHEN 'VISA' THEN 'VISA' 
        WHEN 'MASTERCARD' THEN 'MASTERCARD' 
        WHEN 'AMERICAN EXPRESS' THEN 'AMEX'
        WHEN 'AMEX' THEN 'AMEX'
        ELSE null
    end link_route,
	msw.reporting_group merchant_group,
    s.ratecard_group rate_group,
	cast(source_currency_code as string) currency_code,
	NULL pymt_acct_ref,
	NULL scdr_token,
	-- WPAY ANALYTICS FIELDS
	'ISG' source_application,
	null customerRef,
	null userId,
	null username,
	null userStatus,
	null containerId,
	null containerRef,
	null itemId,
	null itemtype,
	null item_token,
	null schemeName,
	null qc_CardNumber,
	-- SETTLEMENT DATE FIELDS
	null AS dp_txnRef,
	null AS qc_ReferenceNumber,
	null AS qc_BatchNumber,
	null AS lk_ResRef,
	CAST(tran_uid AS STRING) AS cy_tran_uid,
    null AS wallet_id
    FROM `pdh_rd_data_navigator.isg_wpay_tran` d
    left join pdh_ref_ds.ref_key_value rk 
        on rk.attribute = "merchant-terminalid mapping"
        and upper(trim(rk.key)) = upper(trim(d.merchant_id))
    left JOIN `pdh_ref_ds.ref_store_details` s ON 
        (case
            when trim(ifnull(d.terminal_id,"")) <> ""   
                then upper(left(trim(d.terminal_id),5))
            else upper(left(trim(rk.value),5)) -- Include Amex transactions
        end) = s.store_id
	LEFT join `pdh_ref_ds.ref_merchant_settlement_window` msw
    ON UPPER(TRIM(s.division)) = msw.division
    where PARSE_DATE("%Y%m%d", LEFT(CAST(transaction_timestamp AS STRING), 8)) >= start_date and PARSE_DATE("%Y%m%d", LEFT(CAST (transaction_timestamp AS STRING), 8)) <= txn_end_date
     AND s.is_closed = FALSE
	 AND Upper(trim(transaction_type)) NOT LIKE '%ICS%'
     AND (upper(trim(scheme)) not in ('AMERICAN EXPRESS','AMEX') OR upper(trim(scheme)) in ('AMERICAN EXPRESS','AMEX') AND Upper(trim(transaction_type)) IN ('PURCHASE', 'REFUND') AND 
     case 
      when transaction_approval_status is null then 'Y'
	  when transaction_approval_status = 0 then 'Y'
      when transaction_approval_status = 1 then 'N'
	  else 'N'
	end = 'Y');

-------------------------------------------------------------------------------------------
-- Gr4vy

insert into `pdh_staging_ds.tbl_temp_billing_all`
select 
CAST(dn.transaction_timestamp AS DATE) switch_tran_date,
dn.tran_uid,
CAST(dn.transaction_timestamp AS TIMESTAMP) AS tstamp_trans,
CAST(dn.transaction_timestamp AS TIMESTAMP) AS tstamp_local,
dn.pan AS masked_pan,
null AS date_recon_acq,
CONCAT(kv1.value, '001') AS net_term_id,
CONCAT('01', kv1.value) rpt_lvl_id_b,
null as mti,
null as tran_type_id,
null as amt_recon_net,
null as act_code,
null as response_code,
null as account_type,
CAST(dn.transaction_amt AS NUMERIC) AS transaction_total,
CAST(dn.transaction_amt AS NUMERIC) AS purchase_total,
0 AS cashout_total,
cr.retrieval_reference_number AS retrieval_ref_no,
null as stan,
null as original_stan,
null as proc_id_acq_b,
null as inst_id_recn_acq_b,
merchant_name as card_acpt_name_loc,
null as proc_id_iss_b,
null as issuer_institution_id,
null as inst_id_recon_iss_name,
null as card_owner,
null as pos_crd_dat_in_mod,
null as pos_crdhldr_presnt,
dn.external_identifier as order_number,
cr.auth_code as approval_code,
null as adtnl_response_data,
null as card_acpt_id,
null as merchant_store_id,
null AS dom_int_ind,
CASE WHEN LOWER(TRIM(dn.card_type)) = 'debit' THEN 'D'
    WHEN LOWER(TRIM(dn.card_type)) = 'credit' THEN 'C'
    ELSE null
END card_type,
null as card_subtype,
null as bin_product_code,
dn.scheme,
CASE
  WHEN transaction_status IN ('Authenticating', 'Declined', 'Voided', 'Authorised', 'Failed') THEN 'PRE-AUTH'
  WHEN transaction_status IN ('Capturing', 'Captured') THEN 'PURCHASE'
  WHEN transaction_status IN ('PartialRefund', 'Refunded') THEN 'REFUND'
  ELSE null
END as tran_type_desc,
CASE
  WHEN transaction_status IN ('Authenticating', 'Declined', 'Voided', 'Authorised', 'Failed') THEN 'PRE-AUTH'
  WHEN transaction_status IN ('Capturing', 'Captured') THEN 'PURCHASE'
  WHEN transaction_status IN ('PartialRefund', 'Refunded') THEN 'REFUND'
  ELSE null
END as tran_type_abbr,
CASE
    WHEN transaction_status IN ('Authorised', 'Captured', 'PartialRefund', 'Refunded') THEN 'Y'
    WHEN transaction_status IN ('Declined', 'Failed', 'Voided') THEN 'N'
    ELSE NULL
END approval_flag,
case lower(trim(scheme)) 
when 'amex' then 'AMEX'
when 'eftpos' then 'EFTPOS'
when 'discover' then 'DISCOVER'
when 'jcb' then 'JCB'
when 'visa' then 'VISA'
when 'mastercard' then 'MASTERCARD'
when 'diners-club' then 'DINERS'
else scheme
end link_route,
msw.reporting_group merchant_group,
s.ratecard_group rate_group,
cr.currency currency_code,
dn.PAR pymt_acct_ref,
null scdr_token,
-- WPAY ANALYTICS FIELDS
'Gr4vy' source_application,
null customerRef,
null userId,
null username,
null userStatus,
null containerId,
null containerRef,
null itemId,
null itemtype,
null item_token,
null schemeName,
null qc_CardNumber,
-- SETTLEMENT DATE FIELDS
null AS dp_txnRef,
null AS qc_ReferenceNumber,
null AS qc_BatchNumber,
null AS lk_ResRef,
null AS cy_tran_uid,
CASE WHEN payment_method NOT IN ('CardDebit', 'CardCredit') THEN payment_method
    ELSE NULL
END AS wallet_id
from `pdh_rd_gr4vy_views.vw_rd_tran_gr4vy` dn
LEFT JOIN `pdh_rd_external.cyb_online_txns_rpt` cr
ON dn.connector_transaction_id = cr.request_id
LEFT JOIN `pdh_ref_ds.ref_key_value` kv1
ON dn.merchant_name = kv1.key
AND kv1.attribute = 'gr4vy-merchant-store-id'
JOIN `pdh_ref_ds.ref_key_value` kv2
ON dn.merchant_name = kv2.key
AND upper(coalesce(dn.scheme,dn.payment_method)) = upper(kv2.value)
AND kv2.attribute = 'gr4vy-merchant-scheme-config'
LEFT JOIN `pdh_ref_ds.ref_store_details` s ON kv1.value = s.store_id
LEFT JOIN `pdh_ref_ds.ref_merchant_settlement_window` msw ON upper(s.division) = upper(msw.division)
WHERE cast(dn.transaction_timestamp as date) BETWEEN txn_start_date AND txn_end_date
;

SET error_rows = ARRAY((SELECT DISTINCT card_acpt_name_loc FROM `pdh_staging_ds.tbl_temp_billing_all` WHERE net_term_id IS NULL AND source_application = 'Gr4vy'));

IF ARRAY_LENGTH(error_rows) > 0 THEN
  SELECT ERROR(CONCAT(ARRAY_LENGTH(error_rows), " store ID(s) missing from key-value table for the following merchant(s) (", ARRAY_TO_STRING(error_rows, ", "), ")"));
END IF;

-------------------------------------------------------------------------------------------

SET error_rows = ARRAY((SELECT DISTINCT LEFT(net_term_id, 5) FROM `pdh_staging_ds.tbl_temp_billing_all` WHERE rate_group IS NULL));

IF ARRAY_LENGTH(error_rows) > 0 Then
    SELECT ERROR(CONCAT(ARRAY_LENGTH(error_rows), " store ID(s) missing data from store details table for the following ID(s) (", ARRAY_TO_STRING(error_rows, ", "), ")"));
END IF;

SET error_rows = ARRAY((SELECT DISTINCT LEFT(net_term_id, 5) FROM `pdh_staging_ds.tbl_temp_billing_all` WHERE merchant_group IS NULL));

IF ARRAY_LENGTH(error_rows) > 0 Then
    SELECT ERROR(CONCAT("Reporting group(s) missing from merchant settlement window table for the following ID(s) (", ARRAY_TO_STRING(error_rows, ", "), ")"));
END IF;

-------------------------------------------------------------------------------------------

-- We use a blank string in the merchant settlement window as the reporting group
-- if the reporting group should not be included in billing
DELETE FROM `pdh_staging_ds.tbl_temp_billing_all`
WHERE merchant_group = "";

-- We consider all AU EFTPOS routed transactions as domestic
UPDATE `pdh_staging_ds.tbl_temp_billing_all`
SET dom_int_ind = 'D'
WHERE link_route = 'EFTPOS'
AND currency_code = 'AUD';

CREATE TEMP TABLE `temp_billing_all` AS
SELECT 
    dn.*,
    case upper(link_route)
        when 'GIFT CARDS' then if(Upper(tran_type_abbr)='PURCHASE','REDEMPTION',if(upper(tran_type_abbr)='REFUND','ACTIVATION',if(upper(tran_type_abbr) IN ('BALANCE INQUIRY - SAVINGS', 'BALANCE_INQUIRY'), 'BALANCE INQUIRY', UPPER(tran_type_abbr))))
        else CASE UPPER(tran_type_abbr)
            WHEN 'PREAUTHORISATION (CREDIT)' THEN 'PRE-AUTH'
            WHEN 'PURCHASE WITH CASH OUT' THEN 'PURCHASE WITH CASHOUT'
            WHEN 'CASH OUT' THEN 'CASHOUT'
            ELSE UPPER(tran_type_abbr) END
    end calc_tran_type_abbr,
    case trim(approval_flag)
        when 'Y' then 'A'
        when 'N' then 'D'
        else trim(approval_flag)
    end calc_approval_flag,
    case link_route
        when 'AMEX' THEN 'AMEX'
        when 'DINERS' then 'DINERS'
        when 'FUEL CARDS' then 'FUEL CARDS'
        when 'GIFT CARDS' then 'GIFT CARDS'
        when 'UPI' then 'UPI'
        when 'VISA' then 'VISA'
        when 'MASTERCARD' then 'MASTERCARD'
        when 'EFTPOS' then 'EFTPOS'
		when 'VERIFONE' then 'VERIFONE'
        when 'PAYPAL' then 'PAYPAL'
        when 'ALIPAY' then 'ALIPAY'
        else ''
    end calc_scheme,
	`pdh_ref_ds.get_card_type`(link_route, card_type, bin_product_code) calc_card_type,
    from `pdh_staging_ds.tbl_temp_billing_all` dn;

-- MISSING CARD TYPE CHECKS
-- Note: the first two checks have been commented out while we discuss with GFS if they can replicate this logic in the TLF
/*
UPDATE `temp_billing_all` i SET i.calc_card_type = CASE WHEN v.acct_funding_source IN ('D', 'P') THEN 'DEBIT'
WHEN v.acct_funding_source IN ('C', 'H', 'R') THEN 'CREDIT'
ELSE ''
END
FROM (Select mti,tstamp_local,tstamp_trans,card_acpt_term_id,rrn,stan,tran_amt,pan,acct_funding_source,
    from  `pdh_rd_data_navigator.gfs_aux_visa`
    GROUP BY 1,2,3,4,5,6,7,8,9) v
WHERE i.tstamp_local = v.tstamp_local
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acpt_term_id), 5)
and i.stan = v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE v.mti WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND (TRIM(i.calc_card_type) = '' OR i.calc_card_type IS NULL)
AND CAST(i.tstamp_trans AS DATE) BETWEEN start_date AND end_date;

UPDATE `temp_billing_all` i
SET i.calc_card_type = c.card_type
FROM (
    SELECT masked_pan, tstamp_trans, tstamp_local, net_term_id, stan, retrieval_ref_no, mti, CASE 
        WHEN card_type IN ('D', 'P') THEN 'DEBIT'
        WHEN card_type IN ('C', 'H', 'R') THEN 'CREDIT'
        ELSE ''
    END AS card_type FROM (
        SELECT r.masked_pan, r.tstamp_trans, r.tstamp_local, r.net_term_id, r.stan, r.retrieval_ref_no, r.mti, b.card_type, RANK() OVER (PARTITION BY r.masked_pan ORDER BY b.bin_low_range) join_rank FROM `temp_billing_all` r
        JOIN `pdh_ref_ds.ref_bin_list` b ON LEFT(r.masked_pan, 6) >= LEFT(FORMAT('%09d', b.bin_low_range), 6) AND LEFT(r.masked_pan, 6) <= LEFT(FORMAT('%09d', b.bin_high_range), 6)
        WHERE TRIM(r.card_type) = '' OR r.card_type IS NULL
    ) WHERE join_rank = 1) c
WHERE i.masked_pan = c.masked_pan
AND i.tstamp_trans = c.tstamp_trans
AND i.tstamp_local = c.tstamp_local
AND i.net_term_id = c.net_term_id
AND i.stan = c.stan
AND i.retrieval_ref_no = c.retrieval_ref_no
AND i.mti = c.mti
AND (TRIM(i.calc_card_type) = '' OR i.calc_card_type IS NULL)
AND CAST(i.tstamp_trans AS DATE) BETWEEN start_date AND end_date;
*/

UPDATE `temp_billing_all`
SET calc_card_type = 'DEBIT'
WHERE (TRIM(calc_card_type) = '' OR calc_card_type IS NULL)
AND TRIM(proc_id_iss_b) IN ('VDCS', 'MC', 'VER');

-------------------------------------------------------------------------------------------
-- Check for Rate Card Entry

if 
	(select count(*) from temp_billing_all d 
	left join pdh_ref_ds_s.ref_rate_card r
		on trim(upper(d.calc_scheme))=trim(upper(r.scheme)) 
		and trim(Upper(d.calc_card_type))=trim(upper(r.card_type))
		and trim(upper(d.rate_group)) = trim(upper(r.merchant))
		and d.switch_tran_date BETWEEN r.from_date AND IFNULL(r.to_date, '2999-12-31')
	where 
		d.approval_flag = 'Y' 
		and TRIM(d.proc_id_iss_b) not in ('PMK','ENZ','FIS','ANZ','VER') 
		and d.rate_group <> 'NA'
		and (r.scheme is NULL or r.card_type is null or r.merchant is null)) > 0 
Then
    SELECT ERROR("Rate card missing entry");
END IF;

-- MISSING SCHEME FEE RATES CHECK
-- UNCOMMENT ONCE ALL RATES HAVE BEEN FINALISED
/*
if 
	(select count(*) from temp_billing_all d 
    left join pdh_ref_ds.ref_store_details s
        ON LEFT(d.net_term_id, 5) = s.store_id
	left join pdh_ref_ds_s.ref_scheme_fee_rate_card sr
		ON trim(upper(s.scheme_ratecard_group)) = trim(upper(sr.scheme_fee_group))
		AND trim(upper(d.calc_scheme)) = trim(upper(sr.scheme))
		AND CASE WHEN d.calc_card_type IN ('MULTI-NETWORK', 'DIGITAL', 'PROPRIETARY') THEN 'DEBIT' ELSE trim(Upper(d.calc_card_type)) END = trim(upper(sr.card_type))
		AND CASE WHEN d.dom_int_ind IN ('D', 'I') THEN d.dom_int_ind ELSE 'D' END = sr.dom_vs_int
		AND d.switch_tran_date BETWEEN sr.from_date AND IFNULL(sr.to_date, '2999-12-31')
    LEFT JOIN `pdh_ref_ds.ref_company_config` cc
        ON UPPER(TRIM(s.company)) = UPPER(TRIM(cc.company))
        AND d.switch_tran_date BETWEEN cc.from_date AND IFNULL(cc.to_date, '2999-12-31')
	where 
		d.approval_flag = 'Y'
        and cc.pricing_model = 'IC++'
		and TRIM(d.proc_id_iss_b) not in ('PMK','ENZ','FIS','ANZ','VER') 
		and (sr.scheme_fee_group IS NULL OR sr.scheme is NULL or sr.card_type is null or sr.transaction_type is null)) > 0 
Then
    SELECT ERROR("Scheme card missing entry");
END IF;
*/

-- Check that all store IDs have an entry in the store to SAP mapping table

SET error_rows = ARRAY((SELECT DISTINCT LEFT(d.net_term_id, 5) FROM `temp_billing_all` d
	LEFT JOIN `pdh_ref_ds.ref_str_to_sap_customermapping` c ON LEFT(d.net_term_id, 5) = c.wpay_store_number
	WHERE c.wpay_store_number IS NULL
	AND d.calc_scheme in ('VISA','MASTERCARD','EFTPOS')
    AND d.approval_flag = 'Y'
    AND c.npp_flag = 'Y'));

IF ARRAY_LENGTH(error_rows) > 0 Then
    SELECT ERROR(CONCAT(ARRAY_LENGTH(error_rows), " store ID(s) missing data from pdh_ref_ds.ref_str_to_sap_customermapping for the following ID(s) (", ARRAY_TO_STRING(error_rows, ", "), ")"));
END IF;

-------------------------------------------------------------------------------------------

CREATE TEMP TABLE `temp_fee_calc` AS
SELECT
	d.switch_tran_date,
	d.tran_uid,
	d.tstamp_trans,
	d.tstamp_local,
	d.masked_pan,
	COALESCE(std.posting_date, d.date_recon_acq) date_recon_acq,
	d.date_recon_acq orig_date_recon_acq,
	CASE WHEN std.posting_date IS NOT NULL THEN 'Y' ELSE 'N' END settlement_date_indicator,
	d.net_term_id,
	d.rpt_lvl_id_b,
	d.mti,
	d.tran_type_id,
	d.amt_recon_net,
	d.act_code,
	d.response_code,
	d.account_type,
	d.transaction_total,
	d.purchase_total,
	d.cashout_total,
	d.retrieval_ref_no,
	d.stan,
	d.original_stan,
	d.proc_id_acq_b,
	d.inst_id_recn_acq_b,
	d.card_acpt_name_loc,
	d.proc_id_iss_b,
	d.issuer_institution_id,
	d.inst_id_recon_iss_name,
	d.card_owner,
	d.pos_crd_dat_in_mod,
	d.pos_crdhldr_presnt,
	d.order_number,
	d.approval_code,
	d.adtnl_response_data,
	d.card_acpt_id,
	d.merchant_store_id,
	d.dom_int_ind,
	d.card_type,
	d.card_subtype,
	d.bin_product_code,
	d.scheme,
	d.tran_type_desc,
	d.tran_type_abbr,
	d.approval_flag,
	d.link_route,
	d.merchant_group,
	d.rate_group,
	d.currency_code,
	d.calc_tran_type_abbr,
	d.calc_approval_flag,
	d.calc_scheme,
	d.calc_card_type,
	case act_code
		when '400' then if(mti='1440' ,concat(calc_tran_type_abbr , " REVERSAL"),calc_tran_type_abbr)
		else calc_tran_type_abbr 
	end calc_tran_type_description,
	case
		when cc.pricing_model = 'Blended' then
			0
		when cc.pricing_model IN ('IC+', 'IC++') then
			if(calc_approval_flag='A',
				if(intchg_fee_code ='ALL', ((d.transaction_total * int_fee_percent/100) + int_fee_fixed*100),
				if(intchg_fee_code ='FIXED', int_fee_fixed*100, if(intchg_fee_code ='PERCENT',(d.transaction_total * int_fee_percent/100),0)))
			, 0)
		else 0
	end as interchange_fees_calc,
	0.0 interchange_fees_actual, -- should be null
	0.0 interchange_fees_invoiced, -- should be null
	0.0 interchange_fees_rebate,
	'' fee_indicator,
    ifnull(if(proc_fee_code ='ALL', ((d.transaction_total * proc_fee_percent/100) + proc_fee_fixed*100),
		if(proc_fee_code ='FIXED', proc_fee_fixed*100,
		if(proc_fee_code ='PERCENT',(d.transaction_total * proc_fee_percent/100),0))) 
	, 0) as processing_fees,
	IF((d.calc_scheme <> 'GIFT CARDS' AND calc_tran_type_abbr = 'PURCHASE' OR d.calc_scheme = 'GIFT CARDS' AND calc_tran_type_abbr = 'REDEMPTION') AND NOT (IFNULL(act_code, '200') = '400' AND IFNULL(mti, '1210') = '1440') AND s.is_online = 'Online', fraud_fee_fixed * 100, 0.0) fraud_fees,
	000000 as settled_datetime,
	000000 as fncl_posted_datetime,
	case
		when d.calc_scheme in ('VISA','MASTERCARD','EFTPOS') and d.approval_flag = 'Y' and c.npp_flag = 'Y' 
		then d.amt_recon_net * (r.early_settle_fee_percent / 100) * IF(cc.stlm_schedule = "Legacy", f.legacy_cost_factor, f.cost_factor)
		else 0
	end as early_settlement_fees, -- cost to be passed on to the merchant for early settlement
	case
		when d.calc_scheme in ('VISA','MASTERCARD','EFTPOS') and d.approval_flag = 'Y' and c.npp_flag = 'Y'
		then d.amt_recon_net * (r.cost_of_credit_percent / 100) * COALESCE(IF(cc.stlm_schedule = "Legacy", f.legacy_cost_factor, f.cost_factor),0)
		else 0
	end as cost_of_credit, -- cost incurred by WPAY for early settlement to merchants (internal only)
	d.pymt_acct_ref,
	d.scdr_token,
	-- WPAY ANALYTICS FIELDS
	d.source_application,
	d.customerRef,
	d.userId,
	d.username,
	d.userStatus,
	d.containerId,
	d.containerRef,
	d.itemId,
	d.itemtype,
	d.item_token,
	d.schemeName,
	d.qc_CardNumber,
	COALESCE('PAR'||NULLIF(TRIM(d.pymt_acct_ref),''),'SCDR'||d.scdr_token) card_id,
	-- ADDITIONAL PRICING MODEL FIELDS
	cc.pricing_model,
	case
		when d.calc_approval_flag = 'A' and cc.pricing_model = 'IC++' and (act_code <> '400' or mti <> '1440') then
            case when calc_scheme IN ('VISA', 'MASTERCARD', 'UPI', 'AMEX') then
                case when calc_tran_type_abbr = 'PURCHASE WITH CASHOUT' then
                    ifnull(d.purchase_total * sr.extern_scheme_fee_ad_vol + (sr.extern_scheme_fee_fixed_usd * 100 / fx.exchange_rate), 0)
                when calc_tran_type_abbr = 'REFUND' then
                    ifnull(d.transaction_total * sr.extern_scheme_fee_ad_vol * -1 + (sr.extern_scheme_fee_fixed_usd * 100 / fx.exchange_rate), 0)
                when calc_tran_type_abbr NOT IN ('PRE-AUTH', 'CASHOUT') then
                    ifnull(d.transaction_total * sr.extern_scheme_fee_ad_vol + (sr.extern_scheme_fee_fixed_usd * 100 / fx.exchange_rate), 0)
                else 0
                end
            when calc_scheme = 'EFTPOS' then
                case when calc_tran_type_abbr IN ('PURCHASE', 'PURCHASE WITH CASHOUT') then
                    ifnull(d.purchase_total * sr.extern_scheme_fee_ad_vol + (sr.extern_scheme_fee_fixed_local * 100), 0)
                when calc_tran_type_abbr IN ('CASHOUT', 'REFUND') then
                    ifnull(sr.extern_scheme_fee_fixed_local * 100, 0)
                else 0
                end
            else 0
            end
		else 0
	end as extern_scheme_fees,
    case when d.calc_approval_flag = 'A' and (act_code <> '400' or mti <> '1440') then
        case when calc_scheme IN ('VISA', 'MASTERCARD', 'UPI', 'AMEX') then
            case when calc_tran_type_abbr = 'PURCHASE WITH CASHOUT' then
                ifnull(d.purchase_total * sr.intern_scheme_fee_ad_vol + (sr.intern_scheme_fee_fixed_usd * 100 / fx.exchange_rate), 0)
            when calc_tran_type_abbr = 'REFUND' then
                ifnull(d.transaction_total * sr.intern_scheme_fee_ad_vol * -1 + (sr.intern_scheme_fee_fixed_usd * 100 / fx.exchange_rate), 0)
            when calc_tran_type_abbr NOT IN ('PRE-AUTH', 'CASHOUT') then
                ifnull(d.transaction_total * sr.intern_scheme_fee_ad_vol + (sr.intern_scheme_fee_fixed_usd * 100 / fx.exchange_rate), 0)
            else 0   
            end
        when calc_scheme = 'EFTPOS' then
            case when calc_tran_type_abbr IN ('PURCHASE', 'PURCHASE WITH CASHOUT') then
                ifnull(d.purchase_total * sr.intern_scheme_fee_ad_vol + (sr.intern_scheme_fee_fixed_local * 100), 0)
            when calc_tran_type_abbr IN ('CASHOUT', 'REFUND') then
                ifnull(sr.intern_scheme_fee_fixed_local * 100, 0)
            else 0
            end
        else 0
        end
    else 0
    end as intern_scheme_fees,
	case when d.calc_approval_flag = 'A' and (act_code <> '400' or mti <> '1440') then
        case when calc_scheme IN ('VISA', 'MASTERCARD', 'UPI', 'AMEX') then
            case when calc_tran_type_abbr = 'PURCHASE WITH CASHOUT' then
                ifnull(d.purchase_total * sr.scheme_fee_ad_vol_rebate + (sr.scheme_fee_rebate_fixed_usd * 100 / fx.exchange_rate), 0)
            when calc_tran_type_abbr = 'REFUND' then
                ifnull(d.transaction_total * sr.scheme_fee_ad_vol_rebate * -1 + (sr.scheme_fee_rebate_fixed_usd * 100 / fx.exchange_rate), 0)
            when calc_tran_type_abbr NOT IN ('PRE-AUTH', 'CASHOUT') then
                ifnull(d.transaction_total * sr.scheme_fee_ad_vol_rebate + (sr.scheme_fee_rebate_fixed_usd * 100 / fx.exchange_rate), 0)
            else 0   
            end
        when calc_scheme = 'EFTPOS' then
            case when calc_tran_type_abbr IN ('PURCHASE', 'PURCHASE WITH CASHOUT') then
                ifnull(d.purchase_total * sr.scheme_fee_ad_vol_rebate + (sr.scheme_fee_rebate_fixed_local * 100), 0)
            when calc_tran_type_abbr IN ('CASHOUT', 'REFUND') then
                ifnull(sr.scheme_fee_rebate_fixed_local * 100, 0)
            else 0
            end
        else 0
        end
    else 0
    end as scheme_fees_rebate,
	CAST(null AS STRING) fraud_fee_indicator,
	CAST(null AS STRING) c3ds_fee_indicator,
	0 c3ds_fees,
    d.wallet_id
from `temp_billing_all` d
LEFT JOIN `pdh_ref_ds_s.ref_rate_card` r
	ON trim(upper(d.calc_scheme)) = trim(upper(r.scheme)) 
	AND trim(Upper(d.calc_card_type))=trim(upper(r.card_type))
	AND trim(upper(d.rate_group)) = trim(upper(r.merchant))
	AND d.switch_tran_date BETWEEN r.from_date AND IFNULL(r.to_date, '2999-12-31')
LEFT JOIN `pdh_ref_ds.ref_str_to_sap_customermapping` c
	ON LEFT(d.net_term_id, 5) = c.wpay_store_number
LEFT JOIN `pdh_staging_ds.temp_early_settlement_fee` f
	ON f.settle_date = d.date_recon_acq
LEFT JOIN `pdh_ref_ds.ref_store_details` s
	ON LEFT(d.net_term_id, 5) = s.store_id
LEFT JOIN `pdh_ref_ds.ref_company_config` cc
	ON UPPER(TRIM(s.company)) = UPPER(TRIM(cc.company))
	AND d.switch_tran_date BETWEEN cc.from_date AND IFNULL(cc.to_date, '2999-12-31')
LEFT JOIN `pdh_ref_ds_s.ref_scheme_fee_rate_card` sr
	ON IF(trim(ifnull(s.scheme_ratecard_group, '')) = '', concat('WPAY', s.country, IF(s.is_online = 'Online', 'CNP', 'CP')), trim(upper(s.scheme_ratecard_group))) = trim(upper(sr.scheme_fee_group))
	AND trim(upper(d.calc_scheme)) = trim(upper(sr.scheme)) 
    AND CASE WHEN d.calc_card_type IN ('MULTI-NETWORK', 'DIGITAL', 'PROPRIETARY') THEN 'DEBIT' ELSE trim(Upper(d.calc_card_type)) END = trim(upper(sr.card_type))
    AND CASE WHEN d.dom_int_ind IN ('D', 'I') THEN d.dom_int_ind ELSE 'D' END = sr.dom_vs_int
    AND (d.calc_tran_type_abbr = sr.transaction_type OR sr.transaction_type = 'ALL')
    AND d.switch_tran_date BETWEEN sr.from_date AND IFNULL(sr.to_date, '2999-12-31')
LEFT JOIN `pdh_ref_ds.ref_key_value` kv
	ON kv.attribute = 'scheme-fee-forex'
	AND s.country = kv.key
LEFT JOIN UNNEST(forex_array) fx
	ON d.switch_tran_date = fx.txn_date
	AND kv.value = fx.local_currency
LEFT JOIN `pdh_analytics_ds.stlm_standard_settlement_table` std
	ON pdh_ref_ds.get_tran_uid(
		-- source
		CASE source_application
			WHEN 'DataNav' THEN 'TC'
			WHEN 'DataNavSuper' THEN 'TC'
			WHEN 'DigitalPay' THEN 'DP'
			WHEN 'QuikCilver' THEN 'QC'
			WHEN 'Linkly' THEN 'LK'
			WHEN 'ISG' THEN 'CY'
			ELSE source_application
		END,
		-- approvalcode
		approval_code,
		-- ReferenceNumber
		CASE source_application
			WHEN 'DigitalPay' THEN dp_txnRef
			WHEN 'QuikCilver' THEN qc_ReferenceNumber
			WHEN 'Linkly' THEN lk_ResRef
			ELSE null
		END,
		-- BatchNumber
		qc_BatchNumber,
		-- pan
		masked_pan,
		-- yyyymmddThhmmss
		FORMAT_TIMESTAMP('%Y%m%dT%H%M%S', tstamp_trans),
		-- tran_uid
		CASE
			WHEN source_application IN ('DataNav', 'DataNavSuper') THEN d.tran_uid
			WHEN source_application = 'ISG' THEN cy_tran_uid
			ELSE null
		END,
		-- InvoiceNumber
		null,
		-- transaction_type
		tran_type_desc,
		-- trans_amount_in_cents
		transaction_total
	) = std.tran_uid;

---------------------------------------------------------------------------------------------------------------------------------

IF (SELECT MAX(switch_tran_date) FROM `temp_fee_calc`) < txn_end_date THEN
    SELECT ERROR("Billing table not fully updated");
END IF;

IF (SELECT COUNT(*) FROM `pdh_staging_ds.tbl_temp_billing_all`) <> (SELECT COUNT(*) FROM `temp_fee_calc`) THEN
    SELECT ERROR("Mismatched row count between temp table and final table");
END IF;

---------------------------------------------------------------------------------------------------------------------------------

INSERT INTO `pdh_analytics_ds.tbl_fees_all`
SELECT 
d.switch_tran_date,
d.tran_uid,
d.tstamp_trans,
d.tstamp_local,
d.masked_pan,
d.date_recon_acq,
d.net_term_id,
d.rpt_lvl_id_b,
d.mti,
d.tran_type_id,
d.amt_recon_net,
d.act_code,
d.response_code,
d.account_type,
d.transaction_total,
d.purchase_total,
d.cashout_total,
d.retrieval_ref_no,
d.stan,
d.original_stan,
d.proc_id_acq_b,
d.inst_id_recn_acq_b,
d.card_acpt_name_loc,
d.proc_id_iss_b,
d.issuer_institution_id,
d.inst_id_recon_iss_name,
d.card_owner,
d.pos_crd_dat_in_mod,
d.pos_crdhldr_presnt,
d.order_number,
d.approval_code,
d.adtnl_response_data,
d.card_acpt_id,
d.merchant_store_id,
d.dom_int_ind,
d.card_type,
d.card_subtype,
d.bin_product_code,
d.scheme,
d.tran_type_desc,
d.tran_type_abbr,
d.approval_flag,
d.link_route,
d.merchant_group,
d.rate_group,
d.currency_code,
d.calc_tran_type_abbr,
d.calc_approval_flag,
d.calc_scheme,
d.calc_card_type,
d.calc_tran_type_description,
d.interchange_fees_calc,
d.interchange_fees_actual,
d.interchange_fees_invoiced,
d.interchange_fees_rebate,
d.fee_indicator,
d.processing_fees,
d.fraud_fees,
d.settled_datetime,
d.fncl_posted_datetime,
d.early_settlement_fees,
d.cost_of_credit,
d.pymt_acct_ref,
d.scdr_token,
-- SETTLEMENT DATE FIELDS
d.orig_date_recon_acq,
d.settlement_date_indicator,
-- ADDITIONAL PRICING MODEL FIELDS
d.pricing_model,
d.extern_scheme_fees,
d.intern_scheme_fees,
d.scheme_fees_rebate,
d.fraud_fee_indicator,
d.c3ds_fee_indicator,
d.c3ds_fees,
source_application,
processing_dt
FROM `temp_fee_calc` d;

INSERT INTO `wpay_analytics.wpay_billing_engine_tran_dtl`
SELECT
d.switch_tran_date,
d.tran_uid,
d.tstamp_trans,
d.tstamp_local,
d.masked_pan,
d.date_recon_acq,
d.net_term_id,
d.rpt_lvl_id_b,
d.mti,
d.tran_type_id,
d.amt_recon_net,
d.act_code,
d.response_code,
d.account_type,
d.transaction_total,
d.purchase_total,
d.cashout_total,
d.retrieval_ref_no,
d.stan,
d.original_stan,
d.proc_id_acq_b,
d.inst_id_recn_acq_b,
d.card_acpt_name_loc,
d.proc_id_iss_b,
d.issuer_institution_id,
d.inst_id_recon_iss_name,
d.card_owner,
d.pos_crd_dat_in_mod,
d.pos_crdhldr_presnt,
d.order_number,
d.approval_code,
d.adtnl_response_data,
d.card_acpt_id,
d.merchant_store_id,
d.dom_int_ind,
d.card_type,
d.card_subtype,
d.bin_product_code,
d.scheme,
d.tran_type_desc,
d.tran_type_abbr,
d.approval_flag,
d.link_route,
d.merchant_group,
d.rate_group,
d.currency_code,
d.calc_tran_type_abbr,
d.calc_approval_flag,
d.calc_scheme,
d.calc_card_type,
d.calc_tran_type_description,
d.interchange_fees_calc,
d.interchange_fees_actual,
d.interchange_fees_invoiced,
d.interchange_fees_rebate,
d.fee_indicator,
d.processing_fees,
d.fraud_fees,
d.settled_datetime,
d.fncl_posted_datetime,
d.early_settlement_fees,
d.cost_of_credit,
d.pymt_acct_ref,
d.scdr_token,
-- WPAY ANALYTICS FIELDS
d.source_application,
d.customerRef,
d.userId,
d.username,
d.userStatus,
d.containerId,
d.containerRef,
d.itemId,
d.itemtype,
d.item_token,
d.schemeName,
d.qc_CardNumber,
d.card_id,
-- SETTLEMENT DATE FIELDS
d.orig_date_recon_acq,
d.settlement_date_indicator,
-- ADDITIONAL PRICING MODEL FIELDS
d.pricing_model,
d.extern_scheme_fees,
d.intern_scheme_fees,
d.scheme_fees_rebate,
d.fraud_fee_indicator,
d.c3ds_fee_indicator,
d.c3ds_fees,
d.wallet_id,
NULL,
processing_dt
FROM `temp_fee_calc` d;

------------------------------------------------------------------------------------------------------------------------------------------
--TBL_FEES_ALL
--Mastercard Update

Update `pdh_analytics_ds.tbl_fees_all` i
set i.interchange_fees_actual = int_fees*100,
i.fee_indicator='A'
 from (select pan, 
   amount_txn,
   card_acceptor_terminal_id,  
   datetime_local_txn,
   system_trace_audit_num,
   retrieval_reference_number,
   min(int_fees) int_fees
   from
   (SELECT 
   pan,    
   amount_txn,
   card_acceptor_terminal_id,  
   datetime_local_txn,
   system_trace_audit_num,
   retrieval_reference_number,
   if(extended_interchange_amount_fee > 0, extended_interchange_amount_fee/1.1,amount_txn_fee) int_fees,
   count(1)
   from `pdh_staging_ds.gfs_aux_mastercard`  where t1g0_file_date > '2021-07-02' 
   group by 1,2,3,4,5,6,7
  ) c group by 1,2,3,4,5,6 ) v 
where i.tstamp_local = parse_timestamp('%y%m%d%H%M%S', trim(v.datetime_local_txn))
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acceptor_terminal_id), 5)
and i.retrieval_ref_no = LPAD(v.retrieval_reference_number,12,'0')
and i.stan = v.system_trace_audit_num
and i.transaction_total = CAST(v.amount_txn*100 AS int64)
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and TRIM(proc_id_iss_b)='MC'; 


Update `pdh_analytics_ds.tbl_fees_all` i	
set i.interchange_fees_actual = int_fees*100,
i.fee_indicator='A'
 from (
   
    Select concat(substr(pan,1,6),"~~~~~~~",substr(pan,14,3)) pan,
    cast(amount_txn as int64) amount_txn,
    LEFT(trim(card_acceptor_terminal_id), 5) store_id,
    date(parse_timestamp('%y%m%d%H%M%S',datetime_local_txn)) txn_lcl_date,
    MIN(if(extended_interchange_amount_fee > 0, cast(extended_interchange_amount_fee as int64)/1000000/1.1,cast(amount_txn_fee as int64)/100)) int_fees
    
     from `pdh_rd_data_navigator.mastercard_T1G0`
     where trim(card_acceptor_terminal_id)<>'' 
    and file_date > DATE_SUB(start_date, INTERVAL 10 DAY)

     GROUP BY 1,2,3,4 
     ) v 
where date(i.tstamp_local) = v.txn_lcl_date
and LEFT(trim(i.net_term_id), 5) = v.store_id
and i.transaction_total = v.amount_txn
and concat(substr(i.masked_pan,1,6),'~~~~~~~',substr(i.masked_pan,14,3)) = trim(v.pan)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and TRIM(proc_id_iss_b)='MC'
and fee_indicator <> 'A';				

-------------------------------------------------------------------------------------------------------------------------------------------
--VISA UPDATE

Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual= v.interchange_fee/10000/1.1,
i.fee_indicator='A'
from (Select mti,tstamp_local,card_acpt_term_id,rrn,stan,tran_amt,pan,
MIN(ABS(interchange_fee)) interchange_fee from  `pdh_rd_data_navigator.gfs_aux_visa`
GROUP BY 1,2,3,4,5,6,7) v
--from invoice_gfs_taf.aux_visa_apr2021 v
where i.tstamp_local = v.tstamp_local
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acpt_term_id), 5)
--and cast(i.retrieval_ref_no as Int64) = v.rrn
and i.stan = v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE v.mti WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and trim(i.proc_id_iss_b) = 'VDCS'
;

-------------------------------------------------------------------------------------------------------------------------------------------
--EFTPOS UPDATE

Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual= v.issuer_interchange_amt + v.acquirer_interchange_amt,
i.fee_indicator='A'
from (Select distinct tstamp_local,trim(card_acpt_term_id) card_acpt_term_id,rrn,stan,
tran_amt,trim(if(trim(payment_token)='',pan,payment_token)) pan ,mti, acquirer_interchange_amt, issuer_interchange_amt from `pdh_rd_data_navigator.eftpos_tx_100_01`) v
where i.tstamp_local = v.tstamp_local
and  i.net_term_id = v.card_acpt_term_id
and i.retrieval_ref_no = v.rrn
and i.stan=v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE CAST(v.mti AS STRING) WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and link_route = 'EFTPOS'
;

-------------------------------------------------------------------------------------------------------------------------------------------
--ALIPAY UPDATE

Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual = s.Fee * 100,
i.fee_indicator = 'A'
from `pdh_rd_apm.alipay_stlm` s
where i.adtnl_response_data = CAST(s.transaction_id AS STRING)
and CAST(ROUND(s.amount * 100) AS INT64) = i.transaction_total
and i.calc_tran_type_abbr IN ('PURCHASE', 'REFUND')
and (case i.calc_tran_type_abbr when 'PURCHASE' THEN 'P' WHEN 'REFUND' then 'R' else null end) = TRIM(s.Type)
and switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';

-------------------------------------------------------------------------------------------------------------------------------------------

--ISG UPDATE FOR VISA

Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual = s.interchange_fee_atm / 10000 / 1.1,
i.fee_indicator = 'A'
from (SELECT *, RANK() OVER (PARTITION BY txn_id, txn_code_of_fin_txn, samt ORDER BY pdh_load_time DESC) rank FROM (SELECT DISTINCT pdh_load_time, interchange_fee_atm, txn_id, txn_code_of_fin_txn, samt FROM `pdh_rd_data_navigator.tc33_visa`) v) s
where i.adtnl_response_data = CAST(s.txn_id AS STRING)
and ( (i.tran_type_desc = 'PURCHASE' and s.txn_code_of_fin_txn = '05') or (i.tran_type_desc = 'REFUND' and s.txn_code_of_fin_txn = '06') )
and i.amt_recon_net = s.samt
and i.calc_tran_type_abbr IN ('PURCHASE', 'REFUND')
and s.rank = 1
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';


--ISG UPDATE FOR MC

-- PURCHASE transactions have TRACE_ID
Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual = case when s.extd_interchg_amt_fee > 0 then s.extd_interchg_amt_fee/1.1/10000 else s.amt_tran_fee end,
i.fee_indicator = 'A'
from (
    SELECT DISTINCT trace_id, extd_interchg_amt_fee, amt_tran_fee,
    RANK() OVER (PARTITION BY trace_id ORDER BY pdh_load_time DESC) rank
    FROM `pdh_rd_data_navigator.tn70_mc`
) s
where i.adtnl_response_data = concat(right(s.trace_id,4), left(s.trace_id, length(s.trace_id)-4))
and i.calc_tran_type_abbr = 'PURCHASE'
and rank = 1
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';

-- REFUND transactions where TRACE_ID is NULL
Update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_actual = case when s.extd_interchg_amt_fee > 0 then s.extd_interchg_amt_fee/1.1/10000 else s.amt_tran_fee end,
i.fee_indicator = 'A'
from (
    SELECT DISTINCT card_acceptor_terminal_id, pan, datetime_loc_tran, processing_code, transaction_amt, extd_interchg_amt_fee, amt_tran_fee,
    RANK() OVER (PARTITION BY card_acceptor_terminal_id, pan, datetime_loc_tran, processing_code, transaction_amt ORDER BY pdh_load_time DESC) rank
    FROM `pdh_rd_data_navigator.tn70_mc`
) s
where (i.net_term_id = s.card_acceptor_terminal_id and i.masked_pan = s.pan and s.processing_code = 200000 and i.date_recon_acq = PARSE_DATE("%y%m%d", LEFT(CAST(s.datetime_loc_tran AS STRING),6))
and (i.tran_type_desc = 'REFUND' and s.processing_code = 200000)
and i.amt_recon_net = s.transaction_amt)
and i.calc_tran_type_abbr = 'REFUND'
and s.rank = 1
and i.fee_indicator <> 'A'
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';

update `pdh_analytics_ds.tbl_fees_all` i
set interchange_fees_invoiced=interchange_fees_actual
where i.fee_indicator in ('A')
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and pricing_model IN ('IC+', 'IC++');

update `pdh_analytics_ds.tbl_fees_all` set interchange_fees_invoiced=interchange_fees_calc,fee_indicator='C'
where fee_indicator not in ('A')
AND switch_tran_date >= start_date;


------------------------------------------------------------------------------------------------------------------------------------------
--WPAY_BILLING_ENGINE_TRAN_DTL
--Mastercard Update

Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set i.interchange_fees_actual = int_fees*100,
i.fee_indicator='A'
 from (select pan, 
   amount_txn,
   card_acceptor_terminal_id,  
   datetime_local_txn,
   system_trace_audit_num,
   retrieval_reference_number,
   min(int_fees) int_fees
   from
   (SELECT 
   pan,    
   amount_txn,
   card_acceptor_terminal_id,  
   datetime_local_txn,
   system_trace_audit_num,
   retrieval_reference_number,
   if(extended_interchange_amount_fee > 0, extended_interchange_amount_fee/1.1,amount_txn_fee) int_fees,
   count(1)
   from `pdh_staging_ds.gfs_aux_mastercard`  where t1g0_file_date > '2021-07-02' 
   group by 1,2,3,4,5,6,7
  ) c group by 1,2,3,4,5,6 ) v 
where i.tstamp_local = parse_timestamp('%y%m%d%H%M%S', trim(v.datetime_local_txn))
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acceptor_terminal_id), 5)
and i.retrieval_ref_no = LPAD(v.retrieval_reference_number,12,'0')
and i.stan = v.system_trace_audit_num
and i.transaction_total = CAST(v.amount_txn*100 AS int64)
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and TRIM(proc_id_iss_b)='MC'; 


Update `wpay_analytics.wpay_billing_engine_tran_dtl` i	
set i.interchange_fees_actual = int_fees*100,
i.fee_indicator='A'
 from (
   
    Select concat(substr(pan,1,6),"~~~~~~~",substr(pan,14,3)) pan,
    cast(amount_txn as int64) amount_txn,
    LEFT(trim(card_acceptor_terminal_id), 5) store_id,
    date(parse_timestamp('%y%m%d%H%M%S',datetime_local_txn)) txn_lcl_date,
    MIN(if(extended_interchange_amount_fee > 0, cast(extended_interchange_amount_fee as int64)/1000000/1.1,cast(amount_txn_fee as int64)/100)) int_fees
    
     from `pdh_rd_data_navigator.mastercard_T1G0`
     where trim(card_acceptor_terminal_id)<>'' 
    and file_date > DATE_SUB(start_date, INTERVAL 10 DAY)

     GROUP BY 1,2,3,4 
     ) v 
where date(i.tstamp_local) = v.txn_lcl_date
and LEFT(trim(i.net_term_id), 5) = v.store_id
and i.transaction_total = v.amount_txn
and concat(substr(i.masked_pan,1,6),'~~~~~~~',substr(i.masked_pan,14,3)) = trim(v.pan)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and TRIM(proc_id_iss_b)='MC'
and fee_indicator <> 'A';				

-------------------------------------------------------------------------------------------------------------------------------------------
--VISA UPDATE

Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_actual= v.interchange_fee/10000/1.1,
i.fee_indicator='A'
from (Select mti,tstamp_local,card_acpt_term_id,rrn,stan,tran_amt,pan,
MIN(ABS(interchange_fee)) interchange_fee from  `pdh_rd_data_navigator.gfs_aux_visa`
GROUP BY 1,2,3,4,5,6,7) v
--from invoice_gfs_taf.aux_visa_apr2021 v
where i.tstamp_local = v.tstamp_local
and LEFT(trim(i.net_term_id), 5) = LEFT(trim(v.card_acpt_term_id), 5)
--and cast(i.retrieval_ref_no as Int64) = v.rrn
and i.stan = v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE v.mti WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and trim(i.proc_id_iss_b) = 'VDCS'
;

-------------------------------------------------------------------------------------------------------------------------------------------
--EFTPOS UPDATE

Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_actual= v.issuer_interchange_amt + v.acquirer_interchange_amt,
i.fee_indicator='A'
from (Select distinct tstamp_local,trim(card_acpt_term_id) card_acpt_term_id,rrn,stan,
tran_amt,trim(if(trim(payment_token)='',pan,payment_token)) pan ,mti, acquirer_interchange_amt, issuer_interchange_amt from `pdh_rd_data_navigator.eftpos_tx_100_01`) v
where i.tstamp_local = v.tstamp_local
and  i.net_term_id = v.card_acpt_term_id
and i.retrieval_ref_no = v.rrn
and i.stan=v.stan
and i.transaction_total = v.tran_amt
and i.mti = CASE CAST(v.mti AS STRING) WHEN '0200' THEN '1210' WHEN '0220' THEN '1240' WHEN '0420' THEN '1440' ELSE null END
and substr(i.masked_pan,1,6) = substr(v.pan,1,6)
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and link_route = 'EFTPOS'
;

-------------------------------------------------------------------------------------------------------------------------------------------
--ALIPAY UPDATE

Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_actual = s.Fee * 100,
i.fee_indicator = 'A'
from `pdh_rd_apm.alipay_stlm` s
where i.adtnl_response_data = CAST(s.transaction_id AS STRING)
and CAST(ROUND(s.amount * 100) AS INT64) = i.transaction_total
and i.calc_tran_type_abbr IN ('PURCHASE', 'REFUND')
and (case i.calc_tran_type_abbr when 'PURCHASE' THEN 'P' WHEN 'REFUND' then 'R' else null end) = TRIM(s.Type)
and switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';

-------------------------------------------------------------------------------------------------------------------------------------------

--ISG UPDATE FOR VISA

Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_actual = s.interchange_fee_atm / 10000 / 1.1,
i.fee_indicator = 'A'
from (SELECT *, RANK() OVER (PARTITION BY txn_id, txn_code_of_fin_txn, samt ORDER BY pdh_load_time DESC) rank FROM (SELECT DISTINCT pdh_load_time, interchange_fee_atm, txn_id, txn_code_of_fin_txn, samt FROM `pdh_rd_data_navigator.tc33_visa`) v) s
where i.adtnl_response_data = CAST(s.txn_id AS STRING)
and ( (i.tran_type_desc = 'PURCHASE' and s.txn_code_of_fin_txn = '05') or (i.tran_type_desc = 'REFUND' and s.txn_code_of_fin_txn = '06') )
and i.amt_recon_net = s.samt
and i.calc_tran_type_abbr IN ('PURCHASE', 'REFUND')
and s.rank = 1
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';


--ISG UPDATE FOR MC

-- PURCHASE transactions have TRACE_ID
Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_actual = case when s.extd_interchg_amt_fee > 0 then s.extd_interchg_amt_fee/1.1/10000 else s.amt_tran_fee end,
i.fee_indicator = 'A'
from (
    SELECT DISTINCT trace_id, extd_interchg_amt_fee, amt_tran_fee,
    RANK() OVER (PARTITION BY trace_id ORDER BY pdh_load_time DESC) rank
    FROM `pdh_rd_data_navigator.tn70_mc`
) s
where i.adtnl_response_data = concat(right(s.trace_id,4), left(s.trace_id, length(s.trace_id)-4))
and i.calc_tran_type_abbr = 'PURCHASE'
and rank = 1
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';

-- REFUND transactions where TRACE_ID is NULL
Update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_actual = case when s.extd_interchg_amt_fee > 0 then s.extd_interchg_amt_fee/1.1/10000 else s.amt_tran_fee end,
i.fee_indicator = 'A'
from (
    SELECT DISTINCT card_acceptor_terminal_id, pan, datetime_loc_tran, processing_code, transaction_amt, extd_interchg_amt_fee, amt_tran_fee,
    RANK() OVER (PARTITION BY card_acceptor_terminal_id, pan, datetime_loc_tran, processing_code, transaction_amt ORDER BY pdh_load_time DESC) rank
    FROM `pdh_rd_data_navigator.tn70_mc`
) s
where (i.net_term_id = s.card_acceptor_terminal_id and i.masked_pan = s.pan and s.processing_code = 200000 and i.date_recon_acq = PARSE_DATE("%y%m%d", LEFT(CAST(s.datetime_loc_tran AS STRING),6))
and (i.tran_type_desc = 'REFUND' and s.processing_code = 200000)
and i.amt_recon_net = s.transaction_amt)
and i.calc_tran_type_abbr = 'REFUND'
and s.rank = 1
and i.fee_indicator <> 'A'
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and i.approval_flag = 'Y';

update `wpay_analytics.wpay_billing_engine_tran_dtl` i
set interchange_fees_invoiced=interchange_fees_actual
where i.fee_indicator in ('A')
AND switch_tran_date >= start_date AND switch_tran_date <= end_date
and pricing_model IN ('IC+', 'IC++');

update `wpay_analytics.wpay_billing_engine_tran_dtl` set interchange_fees_invoiced=interchange_fees_calc,fee_indicator='C'
where fee_indicator not in ('A')
AND switch_tran_date >= start_date;

-------------------------------------------------------------------------------------------------------------------------------------------

-- EDG SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_edg`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group = 'ENDEAVOUR';

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_edg`) < end_date THEN
    SELECT ERROR("EDG billing table not fully updated");
END IF;

-- For EDG, Cash out only transactions have no interchange fee
update `pdh_analytics_ds.tbl_fees_edg` set interchange_fees_calc=0 where fee_indicator = 'C' AND calc_scheme = 'EFTPOS'
AND merchant_group = 'ENDEAVOUR'
AND UPPER(calc_tran_type_description) = 'CASHOUT'
AND switch_tran_date BETWEEN start_date AND end_date;

-- For EDG, Cash out and Purchase with Cash out have a rebate applicable
update `pdh_analytics_ds.tbl_fees_edg` set interchange_fees_invoiced=interchange_fees_calc-16.5 where fee_indicator = 'C' AND calc_scheme = 'EFTPOS'
AND merchant_group = 'ENDEAVOUR'
AND UPPER(calc_tran_type_description) IN ('PURCHASE WITH CASHOUT', 'CASHOUT')
AND switch_tran_date BETWEEN start_date AND end_date;

-- This table is used in Tableau Report
INSERT INTO `pdh_analytics_ds.tbl_edg_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   LEFT(i.net_term_id,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type AS card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,
	m.merchant_group,
	m.division, 
	m.brand,    
	m.store_id ined_store_id,   
	m.site_name,    
	m.suburb,   
	m.state,    
	m.postcode,
	m.country,
	null sap_filename,
	null sap_post_timestamp,
	fy_start_date,
	currency_code,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.early_settlement_fees / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.early_settlement_fees / 100 END AS vcalc_early_settlement_fees_ex_gst,
	i.early_settlement_fees / 100 AS early_settlement_fees_ex_gst,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.cost_of_credit / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.cost_of_credit / 100 END AS vcalc_cost_of_credit,

	i.cost_of_credit / 100 AS cost_of_credit,
	i.pymt_acct_ref,
	i.scdr_token,
    CAST(FORMAT_DATE('%Y%m%d', i.orig_date_recon_acq) AS INT64) orig_settlement_date,
    i.settlement_date_indicator,
	-- ADDITIONAL PRICING MODEL FIELDS
	i.pricing_model,
    i.extern_scheme_fees / 100 extern_scheme_fees_ex_gst,
    i.intern_scheme_fees / 100 intern_scheme_fees_ex_gst,
	i.scheme_fees_rebate / 100 scheme_fees_rebate_ex_gst,
	i.fraud_fee_indicator,
	i.c3ds_fee_indicator,
	i.c3ds_fees / 100 c3ds_fees_ex_gst,
    source_application,
    processing_dt
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id = LEFT(i.net_term_id,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group = 'ENDEAVOUR';

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_edg_fees_rpt`) < end_date THEN
    SELECT ERROR("EDG reporting table not fully updated");
END IF;

-- EG FUEL SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_egfuel`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group IN ('EG FUEL', 'EG FUEL APAC');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_egfuel`) < end_date THEN
    SELECT ERROR("EG Fuel billing table not fully updated");
END IF;

INSERT INTO `pdh_analytics_ds.tbl_egfuel_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   --2021030219355774
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   substr(i.rpt_lvl_id_b,3,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type as card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,    
    m.merchant_group,
    m.division, 
    m.brand,    
    m.store_id ined_store_id,   
    m.site_name,    
    m.suburb,   
    m.state,    
    m.postcode,
    m.country,
	null sap_filename,
	null sap_post_timestamp,
	fy_start_date,
	currency_code,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.early_settlement_fees / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.early_settlement_fees / 100 END AS vcalc_early_settlement_fees_ex_gst,
	i.early_settlement_fees / 100 AS early_settlement_fees_ex_gst,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.cost_of_credit / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.cost_of_credit / 100 END AS vcalc_cost_of_credit,

	i.cost_of_credit / 100 AS cost_of_credit,
	i.pymt_acct_ref,
	i.scdr_token,
    CAST(FORMAT_DATE('%Y%m%d', i.orig_date_recon_acq) AS INT64) orig_settlement_date,
    i.settlement_date_indicator,
	-- ADDITIONAL PRICING MODEL FIELDS
	i.pricing_model,
    i.extern_scheme_fees / 100 extern_scheme_fees_ex_gst,
    i.intern_scheme_fees / 100 intern_scheme_fees_ex_gst,
	i.scheme_fees_rebate / 100 scheme_fees_rebate_ex_gst,
	i.fraud_fee_indicator,
	i.c3ds_fee_indicator,
	i.c3ds_fees / 100 c3ds_fees_ex_gst,
    source_application,
    processing_dt
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id=substr(i.rpt_lvl_id_b,3,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group IN ('EG FUEL', 'EG FUEL APAC');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_egfuel_fees_rpt`) < end_date THEN
    SELECT ERROR("EG Fuel reporting table not fully updated");
END IF;

-- WPAY NZ SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_wpaynz`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group = 'COUNTDOWN';

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_wpaynz`) < end_date THEN
    SELECT ERROR("WPay NZ billing table not fully updated");
END IF;

-- This table is used in Tableau Report
INSERT INTO `pdh_analytics_ds.tbl_wpaynz_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   LEFT(i.net_term_id,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type AS card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,
	m.merchant_group,
	m.division, 
	m.brand,    
	m.store_id ined_store_id,   
	m.site_name,    
	m.suburb,   
	m.state,    
	m.postcode,
	m.country,
	null sap_filename,
	null sap_post_timestamp,
	fy_start_date,
	currency_code,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.early_settlement_fees / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.early_settlement_fees / 100 END AS vcalc_early_settlement_fees_ex_gst,
	i.early_settlement_fees / 100 AS early_settlement_fees_ex_gst,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.cost_of_credit / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.cost_of_credit / 100 END AS vcalc_cost_of_credit,

	i.cost_of_credit / 100 AS cost_of_credit,
	i.pymt_acct_ref,
	i.scdr_token,
    CAST(FORMAT_DATE('%Y%m%d', i.orig_date_recon_acq) AS INT64) orig_settlement_date,
    i.settlement_date_indicator,
	-- ADDITIONAL PRICING MODEL FIELDS
	i.pricing_model,
    i.extern_scheme_fees / 100 extern_scheme_fees_ex_gst,
    i.intern_scheme_fees / 100 intern_scheme_fees_ex_gst,
	i.scheme_fees_rebate / 100 scheme_fees_rebate_ex_gst,
	i.fraud_fee_indicator,
	i.c3ds_fee_indicator,
	i.c3ds_fees / 100 c3ds_fees_ex_gst,
    source_application,
    processing_dt
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id = LEFT(i.net_term_id,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group = 'COUNTDOWN';

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_wpaynz_fees_rpt`) < end_date THEN
    SELECT ERROR("WPay NZ reporting table not fully updated");
END IF;

-- SMALL MERCHANT SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_sml_merchant`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group NOT IN ('ENDEAVOUR', 'EG FUEL', 'EG FUEL APAC', 'COUNTDOWN', 'SUPERMARKETS', 'WOW ONLINE');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_sml_merchant`) < end_date THEN
    SELECT ERROR("Small Merchant billing table not fully updated");
END IF;

INSERT INTO `pdh_analytics_ds.tbl_sml_merchant_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   --2021030219355774
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   LEFT(i.net_term_id,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type as card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,
	m.merchant_group,
	m.division, 
	m.brand,    
	m.store_id ined_store_id,   
	m.site_name,    
	m.suburb,   
	m.state,    
	m.postcode,
	m.country,
    null sap_filename,
    null sap_post_timestamp,
    fy_start_date,
	currency_code,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.early_settlement_fees / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.early_settlement_fees / 100 END AS vcalc_early_settlement_fees_ex_gst,
	i.early_settlement_fees / 100 AS early_settlement_fees_ex_gst,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.cost_of_credit / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.cost_of_credit / 100 END AS vcalc_cost_of_credit,

	i.cost_of_credit / 100 AS cost_of_credit,
	i.pymt_acct_ref,
	i.scdr_token,
    CAST(FORMAT_DATE('%Y%m%d', i.orig_date_recon_acq) AS INT64) orig_settlement_date,
    i.settlement_date_indicator,
	-- ADDITIONAL PRICING MODEL FIELDS
	i.pricing_model,
    i.extern_scheme_fees / 100 extern_scheme_fees_ex_gst,
    i.intern_scheme_fees / 100 intern_scheme_fees_ex_gst,
	i.scheme_fees_rebate / 100 scheme_fees_rebate_ex_gst,
	i.fraud_fee_indicator,
	i.c3ds_fee_indicator,
	i.c3ds_fees / 100 c3ds_fees_ex_gst,
    source_application,
    processing_dt
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id = LEFT(i.net_term_id,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group NOT IN ('ENDEAVOUR', 'EG FUEL', 'EG FUEL APAC', 'COUNTDOWN', 'SUPERMARKETS', 'WOW ONLINE');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_sml_merchant_fees_rpt`) < end_date THEN
    SELECT ERROR("Small Merchant reporting table not fully updated");
END IF;

-- SUPERMARKETS SPECIFIC TABLES
INSERT INTO `pdh_analytics_ds.tbl_fees_super`
SELECT * FROM `pdh_analytics_ds.tbl_fees_all`
WHERE cast(tstamp_trans as date) >= start_date AND cast(tstamp_trans as date) <= end_date
AND merchant_group IN ('SUPERMARKETS', 'WOW ONLINE');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_fees_super`) < end_date THEN
    SELECT ERROR("Supermarkets billing table not fully updated");
END IF;

INSERT INTO `pdh_analytics_ds.tbl_super_fees_rpt`
SELECT
   switch_tran_date,
   tran_uid,
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S00', tstamp_trans) switch_timestamp,
   --2021030219355774
   FORMAT_TIMESTAMP('%Y%m%d%H%M%S', tstamp_local) local_timestamp,
   LEFT(i.net_term_id,5) store_id,
   net_term_id terminal_id,
   null bin,
   masked_pan pan,
   SAFE_CAST(tran_type_id AS INT64) txn_type_indicator,
   CAST(FORMAT_DATE('%Y%m%d', date_recon_acq) AS INT64) settlement_date,
   approval_code ap_approval_code,
   act_code action_code,
   response_code,
   proc_id_acq_b acquirer,
   inst_id_recn_acq_b acquirer_institution_id,
   proc_id_iss_b issuer,
   issuer_institution_id issuer_institution_id,
   inst_id_recon_iss_name,
   CAST(mti AS INT64) mti,
   card_owner,
   order_number transaction_desc,
   CAST(retrieval_ref_no AS STRING) rrn,
   pos_crdhldr_presnt pos_card_holder_present,
   pos_crd_dat_in_mod pos_data_card_input_method,
   i.tran_type_desc tran_type,
   calc_tran_type_abbr abbr,
   calc_approval_flag approval_flag,
   tac.transaction_approval_status_text,
   account_type account,
   link_route,
   calc_scheme as scheme,
   calc_card_type as card_type,
   i.card_type as card_type_code,
   CASE WHEN TRIM(card_type) = 'D' THEN "DEBIT"
   WHEN TRIM(card_type) = 'P' THEN "PREPAID"
   WHEN TRIM(card_type) IN ('C', 'H', 'R') THEN "CREDIT" ELSE card_type END as orig_card_type,
   dom_int_ind,
   stan,
   original_stan,
   card_acpt_id,
   card_acpt_name_loc location,
   adtnl_response_data,
   UPPER(i.calc_tran_type_description) tran_type_description,
   fee_indicator,
   i.transaction_total / 100 AS transaction_amount,
   i.purchase_total / 100 AS purchase_amount,
   i.cashout_total / 100 AS cashout_amount,
   Ifnull(tt.transaction_count_factor, 0) * 1 AS vcalc_transaction_count,
    tt.spend_factor * i.amt_recon_net / 100 AS vcalc_settlement_amount_inc_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_calc / 100 AS vcalc_interchange_fees_ex_gst,
   0.0 vcalc_interchange_fees_rebate_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_actual / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_actual / 100 END AS vcalc_interchange_fees_actual_ex_gst,
   CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.interchange_fees_invoiced / 100 ELSE Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag *tt.interchange_count_factor * i.interchange_fees_invoiced / 100 END AS vcalc_interchange_fees_invoiced_ex_gst,
   Ifnull(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * 1 AS vcalc_interchange_fees_tran_count,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * i.processing_fees / 100 AS vcalc_processing_fees_ex_gst,
   Ifnull(tt.processing_fees_flag, 0) * tac.processing_fee_flag * 1 AS vcalc_processing_fees_tran_count,
   i.interchange_fees_calc * 1.1 / 100 AS interchange_fees_inc_gst,
   i.interchange_fees_calc / 100 AS interchange_fees_ex_gst,
   i.processing_fees * 1.1 / 100 AS processing_fees_inc_gst,
   i.processing_fees / 100 AS processing_fees_ex_gst,
   i.fraud_fees * 1.1 / 100 AS fraud_fees_inc_gst,
   i.fraud_fees / 100 AS fraud_fees_ex_gst,
    m.company,
    m.invoice_group,
	m.merchant_group,
	m.division, 
	m.brand,    
	m.store_id ined_store_id,   
	m.site_name,    
	m.suburb,   
	m.state,    
	m.postcode,
	m.country,
    null sap_filename,
    null sap_post_timestamp,
    fy_start_date,
	currency_code,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.early_settlement_fees / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.early_settlement_fees / 100 END AS vcalc_early_settlement_fees_ex_gst,
	i.early_settlement_fees / 100 AS early_settlement_fees_ex_gst,
	CASE WHEN calc_scheme = 'EFTPOS' AND i.fee_indicator = 'A' THEN IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * i.cost_of_credit / 100 ELSE IFNULL(tt.interchange_fees_flag, 0) * tac.interchange_fee_flag * tt.interchange_count_factor * i.cost_of_credit / 100 END AS vcalc_cost_of_credit,
	i.cost_of_credit / 100 AS cost_of_credit,
	i.pymt_acct_ref,
	i.scdr_token,
    CAST(FORMAT_DATE('%Y%m%d', i.orig_date_recon_acq) AS INT64) orig_settlement_date,
    i.settlement_date_indicator,
	-- ADDITIONAL PRICING MODEL FIELDS
	i.pricing_model,
    i.extern_scheme_fees / 100 extern_scheme_fees_ex_gst,
    i.intern_scheme_fees / 100 intern_scheme_fees_ex_gst,
	i.scheme_fees_rebate / 100 scheme_fees_rebate_ex_gst,
	i.fraud_fee_indicator,
	i.c3ds_fee_indicator,
	i.c3ds_fees / 100 c3ds_fees_ex_gst,
    source_application,
    processing_dt
FROM
   `pdh_analytics_ds.tbl_fees_all` i left join
   `pdh_ref_ds.ref_tran_type_codes` tt
on i.calc_tran_type_description = tt.tran_type_desc 
left join `pdh_ref_ds.ref_store_details` m on m.store_id = LEFT(i.net_term_id,5)
left join
`pdh_ref_ds.ref_tran_approval_codes` tac
on i.calc_approval_flag = tac.transaction_approval_status_code
LEFT JOIN `pdh_ref_ds.dim_date` dt
ON i.switch_tran_date = dt.clndr_date
WHERE switch_tran_date BETWEEN start_date AND end_date
AND m.is_closed = FALSE
AND i.merchant_group IN ('SUPERMARKETS', 'WOW ONLINE');

IF (SELECT MAX(switch_tran_date) FROM `pdh_analytics_ds.tbl_super_fees_rpt`) < end_date THEN
    SELECT ERROR("Supermarkets reporting table not fully updated");
END IF;